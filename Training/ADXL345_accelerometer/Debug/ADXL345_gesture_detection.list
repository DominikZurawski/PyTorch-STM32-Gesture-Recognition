
ADXL345_gesture_detection.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005008  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08005198  08005198  00006198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005220  08005220  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005220  08005220  00006220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005228  08005228  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005228  08005228  00006228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800522c  0800522c  0000622c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005230  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  20000068  08005298  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002c4  08005298  000072c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c582  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c76  00000000  00000000  0001361a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b98  00000000  00000000  00015290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008e1  00000000  00000000  00015e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026c6f  00000000  00000000  00016709  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000da09  00000000  00000000  0003d378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb789  00000000  00000000  0004ad81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013650a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036ac  00000000  00000000  00136550  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  00139bfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005180 	.word	0x08005180

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08005180 	.word	0x08005180

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
    if (ch == '\n') {
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	2b0a      	cmp	r3, #10
 800056c:	d109      	bne.n	8000582 <__io_putchar+0x22>
        uint8_t ch2 = '\r';
 800056e:	230d      	movs	r3, #13
 8000570:	73fb      	strb	r3, [r7, #15]
        HAL_UART_Transmit(&huart2, &ch2, 1, HAL_MAX_DELAY);
 8000572:	f107 010f 	add.w	r1, r7, #15
 8000576:	f04f 33ff 	mov.w	r3, #4294967295
 800057a:	2201      	movs	r2, #1
 800057c:	4807      	ldr	r0, [pc, #28]	@ (800059c <__io_putchar+0x3c>)
 800057e:	f003 f971 	bl	8003864 <HAL_UART_Transmit>
    }

    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000582:	1d39      	adds	r1, r7, #4
 8000584:	f04f 33ff 	mov.w	r3, #4294967295
 8000588:	2201      	movs	r2, #1
 800058a:	4804      	ldr	r0, [pc, #16]	@ (800059c <__io_putchar+0x3c>)
 800058c:	f003 f96a 	bl	8003864 <HAL_UART_Transmit>
    return 1;
 8000590:	2301      	movs	r3, #1
}
 8000592:	4618      	mov	r0, r3
 8000594:	3710      	adds	r7, #16
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	200000e8 	.word	0x200000e8

080005a0 <CS_Select>:

/* Funkcje pomocnicze */
// Funkcje CS
static void CS_Select(void)   { HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); }
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
 80005a4:	2200      	movs	r2, #0
 80005a6:	2110      	movs	r1, #16
 80005a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005ac:	f000 fea8 	bl	8001300 <HAL_GPIO_WritePin>
 80005b0:	bf00      	nop
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <CS_Deselect>:
static void CS_Deselect(void) { HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); }
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	2201      	movs	r2, #1
 80005ba:	2110      	movs	r1, #16
 80005bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005c0:	f000 fe9e 	bl	8001300 <HAL_GPIO_WritePin>
 80005c4:	bf00      	nop
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <ADXL345_Write>:

// Zapis do rejestru
void ADXL345_Write(uint8_t reg, uint8_t value) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	460a      	mov	r2, r1
 80005d2:	71fb      	strb	r3, [r7, #7]
 80005d4:	4613      	mov	r3, r2
 80005d6:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2] = { reg, value };
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	733b      	strb	r3, [r7, #12]
 80005dc:	79bb      	ldrb	r3, [r7, #6]
 80005de:	737b      	strb	r3, [r7, #13]
    CS_Select();
 80005e0:	f7ff ffde 	bl	80005a0 <CS_Select>
    HAL_SPI_Transmit(&hspi1, buf, 2, HAL_MAX_DELAY);
 80005e4:	f107 010c 	add.w	r1, r7, #12
 80005e8:	f04f 33ff 	mov.w	r3, #4294967295
 80005ec:	2202      	movs	r2, #2
 80005ee:	4804      	ldr	r0, [pc, #16]	@ (8000600 <ADXL345_Write+0x38>)
 80005f0:	f002 fa61 	bl	8002ab6 <HAL_SPI_Transmit>
    CS_Deselect();
 80005f4:	f7ff ffde 	bl	80005b4 <CS_Deselect>
}
 80005f8:	bf00      	nop
 80005fa:	3710      	adds	r7, #16
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	20000084 	.word	0x20000084

08000604 <ADXL345_Read>:

// Odczyt wielobajtowy
void ADXL345_Read(uint8_t reg, uint8_t *data, uint8_t len) {
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	4603      	mov	r3, r0
 800060c:	6039      	str	r1, [r7, #0]
 800060e:	71fb      	strb	r3, [r7, #7]
 8000610:	4613      	mov	r3, r2
 8000612:	71bb      	strb	r3, [r7, #6]
    reg |= ADXL345_READ | ADXL345_MULTI;
 8000614:	79fb      	ldrb	r3, [r7, #7]
 8000616:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 800061a:	b2db      	uxtb	r3, r3
 800061c:	71fb      	strb	r3, [r7, #7]
    CS_Select();
 800061e:	f7ff ffbf 	bl	80005a0 <CS_Select>
    HAL_SPI_Transmit(&hspi1, &reg, 1, HAL_MAX_DELAY);
 8000622:	1df9      	adds	r1, r7, #7
 8000624:	f04f 33ff 	mov.w	r3, #4294967295
 8000628:	2201      	movs	r2, #1
 800062a:	4808      	ldr	r0, [pc, #32]	@ (800064c <ADXL345_Read+0x48>)
 800062c:	f002 fa43 	bl	8002ab6 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, data, len, HAL_MAX_DELAY);
 8000630:	79bb      	ldrb	r3, [r7, #6]
 8000632:	b29a      	uxth	r2, r3
 8000634:	f04f 33ff 	mov.w	r3, #4294967295
 8000638:	6839      	ldr	r1, [r7, #0]
 800063a:	4804      	ldr	r0, [pc, #16]	@ (800064c <ADXL345_Read+0x48>)
 800063c:	f002 fbb1 	bl	8002da2 <HAL_SPI_Receive>
    CS_Deselect();
 8000640:	f7ff ffb8 	bl	80005b4 <CS_Deselect>
}
 8000644:	bf00      	nop
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20000084 	.word	0x20000084

08000650 <ADXL345_Init>:

// Inicjalizacja ADXL345
void ADXL345_Init(void) {
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
    // Sprawdzenie ID
    uint8_t id;
    ADXL345_Read(ADXL345_DEVID, &id, 1);
 8000656:	1dfb      	adds	r3, r7, #7
 8000658:	2201      	movs	r2, #1
 800065a:	4619      	mov	r1, r3
 800065c:	2000      	movs	r0, #0
 800065e:	f7ff ffd1 	bl	8000604 <ADXL345_Read>
    // Ustawienie ±4g
    ADXL345_Write(ADXL345_DATA_FORMAT, 0x01);
 8000662:	2101      	movs	r1, #1
 8000664:	2031      	movs	r0, #49	@ 0x31
 8000666:	f7ff ffaf 	bl	80005c8 <ADXL345_Write>
    // Uaktywnienie pomiarów
    ADXL345_Write(ADXL345_POWER_CTL, 0x08);
 800066a:	2108      	movs	r1, #8
 800066c:	202d      	movs	r0, #45	@ 0x2d
 800066e:	f7ff ffab 	bl	80005c8 <ADXL345_Write>
}
 8000672:	bf00      	nop
 8000674:	3708      	adds	r7, #8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}

0800067a <ADXL345_GetXYZ>:

// Pobranie danych
void ADXL345_GetXYZ(int16_t *x, int16_t *y, int16_t *z) {
 800067a:	b580      	push	{r7, lr}
 800067c:	b086      	sub	sp, #24
 800067e:	af00      	add	r7, sp, #0
 8000680:	60f8      	str	r0, [r7, #12]
 8000682:	60b9      	str	r1, [r7, #8]
 8000684:	607a      	str	r2, [r7, #4]
    uint8_t buf[6];
    ADXL345_Read(ADXL345_DATAX0, buf, 6);
 8000686:	f107 0310 	add.w	r3, r7, #16
 800068a:	2206      	movs	r2, #6
 800068c:	4619      	mov	r1, r3
 800068e:	2032      	movs	r0, #50	@ 0x32
 8000690:	f7ff ffb8 	bl	8000604 <ADXL345_Read>
    *x = (int16_t)((buf[1] << 8) | buf[0]);
 8000694:	7c7b      	ldrb	r3, [r7, #17]
 8000696:	021b      	lsls	r3, r3, #8
 8000698:	b21a      	sxth	r2, r3
 800069a:	7c3b      	ldrb	r3, [r7, #16]
 800069c:	b21b      	sxth	r3, r3
 800069e:	4313      	orrs	r3, r2
 80006a0:	b21a      	sxth	r2, r3
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	801a      	strh	r2, [r3, #0]
    *y = (int16_t)((buf[3] << 8) | buf[2]);
 80006a6:	7cfb      	ldrb	r3, [r7, #19]
 80006a8:	021b      	lsls	r3, r3, #8
 80006aa:	b21a      	sxth	r2, r3
 80006ac:	7cbb      	ldrb	r3, [r7, #18]
 80006ae:	b21b      	sxth	r3, r3
 80006b0:	4313      	orrs	r3, r2
 80006b2:	b21a      	sxth	r2, r3
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	801a      	strh	r2, [r3, #0]
    *z = (int16_t)((buf[5] << 8) | buf[4]);
 80006b8:	7d7b      	ldrb	r3, [r7, #21]
 80006ba:	021b      	lsls	r3, r3, #8
 80006bc:	b21a      	sxth	r2, r3
 80006be:	7d3b      	ldrb	r3, [r7, #20]
 80006c0:	b21b      	sxth	r3, r3
 80006c2:	4313      	orrs	r3, r2
 80006c4:	b21a      	sxth	r2, r3
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	801a      	strh	r2, [r3, #0]
}
 80006ca:	bf00      	nop
 80006cc:	3718      	adds	r7, #24
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
	...

080006d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006da:	f000 fae8 	bl	8000cae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006de:	f000 f821 	bl	8000724 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e2:	f000 f8df 	bl	80008a4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006e6:	f000 f8ad 	bl	8000844 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80006ea:	f000 f86d 	bl	80007c8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  ADXL345_Init();
 80006ee:	f7ff ffaf 	bl	8000650 <ADXL345_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ADXL345_GetXYZ(&x, &y, &z);
 80006f2:	1cba      	adds	r2, r7, #2
 80006f4:	1d39      	adds	r1, r7, #4
 80006f6:	1dbb      	adds	r3, r7, #6
 80006f8:	4618      	mov	r0, r3
 80006fa:	f7ff ffbe 	bl	800067a <ADXL345_GetXYZ>
	  printf("%d,%d,%d\r\n", x, y, z);
 80006fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000702:	4619      	mov	r1, r3
 8000704:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000708:	461a      	mov	r2, r3
 800070a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800070e:	4804      	ldr	r0, [pc, #16]	@ (8000720 <main+0x4c>)
 8000710:	f003 fec8 	bl	80044a4 <iprintf>
	  HAL_Delay(20);
 8000714:	2014      	movs	r0, #20
 8000716:	f000 fb3f 	bl	8000d98 <HAL_Delay>
	  ADXL345_GetXYZ(&x, &y, &z);
 800071a:	bf00      	nop
 800071c:	e7e9      	b.n	80006f2 <main+0x1e>
 800071e:	bf00      	nop
 8000720:	08005198 	.word	0x08005198

08000724 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b096      	sub	sp, #88	@ 0x58
 8000728:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072a:	f107 0314 	add.w	r3, r7, #20
 800072e:	2244      	movs	r2, #68	@ 0x44
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f003 ff0b 	bl	800454e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000738:	463b      	mov	r3, r7
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
 8000744:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000746:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800074a:	f000 fdff 	bl	800134c <HAL_PWREx_ControlVoltageScaling>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000754:	f000 f8d6 	bl	8000904 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000758:	2310      	movs	r3, #16
 800075a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800075c:	2301      	movs	r3, #1
 800075e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000760:	2300      	movs	r3, #0
 8000762:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000764:	2360      	movs	r3, #96	@ 0x60
 8000766:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000768:	2302      	movs	r3, #2
 800076a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800076c:	2301      	movs	r3, #1
 800076e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000770:	2301      	movs	r3, #1
 8000772:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000774:	2328      	movs	r3, #40	@ 0x28
 8000776:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000778:	2307      	movs	r3, #7
 800077a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800077c:	2302      	movs	r3, #2
 800077e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000780:	2302      	movs	r3, #2
 8000782:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000784:	f107 0314 	add.w	r3, r7, #20
 8000788:	4618      	mov	r0, r3
 800078a:	f000 fe35 	bl	80013f8 <HAL_RCC_OscConfig>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000794:	f000 f8b6 	bl	8000904 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000798:	230f      	movs	r3, #15
 800079a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800079c:	2303      	movs	r3, #3
 800079e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a0:	2300      	movs	r3, #0
 80007a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007ac:	463b      	mov	r3, r7
 80007ae:	2104      	movs	r1, #4
 80007b0:	4618      	mov	r0, r3
 80007b2:	f001 f9fd 	bl	8001bb0 <HAL_RCC_ClockConfig>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80007bc:	f000 f8a2 	bl	8000904 <Error_Handler>
  }
}
 80007c0:	bf00      	nop
 80007c2:	3758      	adds	r7, #88	@ 0x58
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007cc:	4b1b      	ldr	r3, [pc, #108]	@ (800083c <MX_SPI1_Init+0x74>)
 80007ce:	4a1c      	ldr	r2, [pc, #112]	@ (8000840 <MX_SPI1_Init+0x78>)
 80007d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007d2:	4b1a      	ldr	r3, [pc, #104]	@ (800083c <MX_SPI1_Init+0x74>)
 80007d4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007da:	4b18      	ldr	r3, [pc, #96]	@ (800083c <MX_SPI1_Init+0x74>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007e0:	4b16      	ldr	r3, [pc, #88]	@ (800083c <MX_SPI1_Init+0x74>)
 80007e2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80007e6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80007e8:	4b14      	ldr	r3, [pc, #80]	@ (800083c <MX_SPI1_Init+0x74>)
 80007ea:	2202      	movs	r2, #2
 80007ec:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80007ee:	4b13      	ldr	r3, [pc, #76]	@ (800083c <MX_SPI1_Init+0x74>)
 80007f0:	2201      	movs	r2, #1
 80007f2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007f4:	4b11      	ldr	r3, [pc, #68]	@ (800083c <MX_SPI1_Init+0x74>)
 80007f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007fa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80007fc:	4b0f      	ldr	r3, [pc, #60]	@ (800083c <MX_SPI1_Init+0x74>)
 80007fe:	2218      	movs	r2, #24
 8000800:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000802:	4b0e      	ldr	r3, [pc, #56]	@ (800083c <MX_SPI1_Init+0x74>)
 8000804:	2200      	movs	r2, #0
 8000806:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000808:	4b0c      	ldr	r3, [pc, #48]	@ (800083c <MX_SPI1_Init+0x74>)
 800080a:	2200      	movs	r2, #0
 800080c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800080e:	4b0b      	ldr	r3, [pc, #44]	@ (800083c <MX_SPI1_Init+0x74>)
 8000810:	2200      	movs	r2, #0
 8000812:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000814:	4b09      	ldr	r3, [pc, #36]	@ (800083c <MX_SPI1_Init+0x74>)
 8000816:	2207      	movs	r2, #7
 8000818:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800081a:	4b08      	ldr	r3, [pc, #32]	@ (800083c <MX_SPI1_Init+0x74>)
 800081c:	2200      	movs	r2, #0
 800081e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000820:	4b06      	ldr	r3, [pc, #24]	@ (800083c <MX_SPI1_Init+0x74>)
 8000822:	2200      	movs	r2, #0
 8000824:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000826:	4805      	ldr	r0, [pc, #20]	@ (800083c <MX_SPI1_Init+0x74>)
 8000828:	f002 f8a2 	bl	8002970 <HAL_SPI_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000832:	f000 f867 	bl	8000904 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20000084 	.word	0x20000084
 8000840:	40013000 	.word	0x40013000

08000844 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000848:	4b14      	ldr	r3, [pc, #80]	@ (800089c <MX_USART2_UART_Init+0x58>)
 800084a:	4a15      	ldr	r2, [pc, #84]	@ (80008a0 <MX_USART2_UART_Init+0x5c>)
 800084c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800084e:	4b13      	ldr	r3, [pc, #76]	@ (800089c <MX_USART2_UART_Init+0x58>)
 8000850:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000854:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000856:	4b11      	ldr	r3, [pc, #68]	@ (800089c <MX_USART2_UART_Init+0x58>)
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800085c:	4b0f      	ldr	r3, [pc, #60]	@ (800089c <MX_USART2_UART_Init+0x58>)
 800085e:	2200      	movs	r2, #0
 8000860:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000862:	4b0e      	ldr	r3, [pc, #56]	@ (800089c <MX_USART2_UART_Init+0x58>)
 8000864:	2200      	movs	r2, #0
 8000866:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000868:	4b0c      	ldr	r3, [pc, #48]	@ (800089c <MX_USART2_UART_Init+0x58>)
 800086a:	220c      	movs	r2, #12
 800086c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800086e:	4b0b      	ldr	r3, [pc, #44]	@ (800089c <MX_USART2_UART_Init+0x58>)
 8000870:	2200      	movs	r2, #0
 8000872:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000874:	4b09      	ldr	r3, [pc, #36]	@ (800089c <MX_USART2_UART_Init+0x58>)
 8000876:	2200      	movs	r2, #0
 8000878:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800087a:	4b08      	ldr	r3, [pc, #32]	@ (800089c <MX_USART2_UART_Init+0x58>)
 800087c:	2200      	movs	r2, #0
 800087e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000880:	4b06      	ldr	r3, [pc, #24]	@ (800089c <MX_USART2_UART_Init+0x58>)
 8000882:	2200      	movs	r2, #0
 8000884:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000886:	4805      	ldr	r0, [pc, #20]	@ (800089c <MX_USART2_UART_Init+0x58>)
 8000888:	f002 ff9e 	bl	80037c8 <HAL_UART_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000892:	f000 f837 	bl	8000904 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	200000e8 	.word	0x200000e8
 80008a0:	40004400 	.word	0x40004400

080008a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b086      	sub	sp, #24
 80008a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b8:	4b11      	ldr	r3, [pc, #68]	@ (8000900 <MX_GPIO_Init+0x5c>)
 80008ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008bc:	4a10      	ldr	r2, [pc, #64]	@ (8000900 <MX_GPIO_Init+0x5c>)
 80008be:	f043 0301 	orr.w	r3, r3, #1
 80008c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008c4:	4b0e      	ldr	r3, [pc, #56]	@ (8000900 <MX_GPIO_Init+0x5c>)
 80008c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008c8:	f003 0301 	and.w	r3, r3, #1
 80008cc:	603b      	str	r3, [r7, #0]
 80008ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80008d0:	2200      	movs	r2, #0
 80008d2:	2110      	movs	r1, #16
 80008d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008d8:	f000 fd12 	bl	8001300 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 80008dc:	2310      	movs	r3, #16
 80008de:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e0:	2301      	movs	r3, #1
 80008e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e8:	2300      	movs	r3, #0
 80008ea:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 80008ec:	1d3b      	adds	r3, r7, #4
 80008ee:	4619      	mov	r1, r3
 80008f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008f4:	f000 fb5a 	bl	8000fac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008f8:	bf00      	nop
 80008fa:	3718      	adds	r7, #24
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40021000 	.word	0x40021000

08000904 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000908:	b672      	cpsid	i
}
 800090a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800090c:	bf00      	nop
 800090e:	e7fd      	b.n	800090c <Error_Handler+0x8>

08000910 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000916:	4b0f      	ldr	r3, [pc, #60]	@ (8000954 <HAL_MspInit+0x44>)
 8000918:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800091a:	4a0e      	ldr	r2, [pc, #56]	@ (8000954 <HAL_MspInit+0x44>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	6613      	str	r3, [r2, #96]	@ 0x60
 8000922:	4b0c      	ldr	r3, [pc, #48]	@ (8000954 <HAL_MspInit+0x44>)
 8000924:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800092e:	4b09      	ldr	r3, [pc, #36]	@ (8000954 <HAL_MspInit+0x44>)
 8000930:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000932:	4a08      	ldr	r2, [pc, #32]	@ (8000954 <HAL_MspInit+0x44>)
 8000934:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000938:	6593      	str	r3, [r2, #88]	@ 0x58
 800093a:	4b06      	ldr	r3, [pc, #24]	@ (8000954 <HAL_MspInit+0x44>)
 800093c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800093e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000942:	603b      	str	r3, [r7, #0]
 8000944:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000946:	bf00      	nop
 8000948:	370c      	adds	r7, #12
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	40021000 	.word	0x40021000

08000958 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b08a      	sub	sp, #40	@ 0x28
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000960:	f107 0314 	add.w	r3, r7, #20
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	60da      	str	r2, [r3, #12]
 800096e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a17      	ldr	r2, [pc, #92]	@ (80009d4 <HAL_SPI_MspInit+0x7c>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d128      	bne.n	80009cc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800097a:	4b17      	ldr	r3, [pc, #92]	@ (80009d8 <HAL_SPI_MspInit+0x80>)
 800097c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800097e:	4a16      	ldr	r2, [pc, #88]	@ (80009d8 <HAL_SPI_MspInit+0x80>)
 8000980:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000984:	6613      	str	r3, [r2, #96]	@ 0x60
 8000986:	4b14      	ldr	r3, [pc, #80]	@ (80009d8 <HAL_SPI_MspInit+0x80>)
 8000988:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800098a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800098e:	613b      	str	r3, [r7, #16]
 8000990:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000992:	4b11      	ldr	r3, [pc, #68]	@ (80009d8 <HAL_SPI_MspInit+0x80>)
 8000994:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000996:	4a10      	ldr	r2, [pc, #64]	@ (80009d8 <HAL_SPI_MspInit+0x80>)
 8000998:	f043 0301 	orr.w	r3, r3, #1
 800099c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800099e:	4b0e      	ldr	r3, [pc, #56]	@ (80009d8 <HAL_SPI_MspInit+0x80>)
 80009a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80009aa:	23e0      	movs	r3, #224	@ 0xe0
 80009ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ae:	2302      	movs	r3, #2
 80009b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b6:	2303      	movs	r3, #3
 80009b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009ba:	2305      	movs	r3, #5
 80009bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009be:	f107 0314 	add.w	r3, r7, #20
 80009c2:	4619      	mov	r1, r3
 80009c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009c8:	f000 faf0 	bl	8000fac <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80009cc:	bf00      	nop
 80009ce:	3728      	adds	r7, #40	@ 0x28
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40013000 	.word	0x40013000
 80009d8:	40021000 	.word	0x40021000

080009dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b0ac      	sub	sp, #176	@ 0xb0
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
 80009f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	2288      	movs	r2, #136	@ 0x88
 80009fa:	2100      	movs	r1, #0
 80009fc:	4618      	mov	r0, r3
 80009fe:	f003 fda6 	bl	800454e <memset>
  if(huart->Instance==USART2)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4a21      	ldr	r2, [pc, #132]	@ (8000a8c <HAL_UART_MspInit+0xb0>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d13b      	bne.n	8000a84 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a10:	2300      	movs	r3, #0
 8000a12:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f001 faed 	bl	8001ff8 <HAL_RCCEx_PeriphCLKConfig>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a24:	f7ff ff6e 	bl	8000904 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a28:	4b19      	ldr	r3, [pc, #100]	@ (8000a90 <HAL_UART_MspInit+0xb4>)
 8000a2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a2c:	4a18      	ldr	r2, [pc, #96]	@ (8000a90 <HAL_UART_MspInit+0xb4>)
 8000a2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a32:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a34:	4b16      	ldr	r3, [pc, #88]	@ (8000a90 <HAL_UART_MspInit+0xb4>)
 8000a36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a3c:	613b      	str	r3, [r7, #16]
 8000a3e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a40:	4b13      	ldr	r3, [pc, #76]	@ (8000a90 <HAL_UART_MspInit+0xb4>)
 8000a42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a44:	4a12      	ldr	r2, [pc, #72]	@ (8000a90 <HAL_UART_MspInit+0xb4>)
 8000a46:	f043 0301 	orr.w	r3, r3, #1
 8000a4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a4c:	4b10      	ldr	r3, [pc, #64]	@ (8000a90 <HAL_UART_MspInit+0xb4>)
 8000a4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a50:	f003 0301 	and.w	r3, r3, #1
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a58:	230c      	movs	r3, #12
 8000a5a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6a:	2303      	movs	r3, #3
 8000a6c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a70:	2307      	movs	r3, #7
 8000a72:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a76:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a80:	f000 fa94 	bl	8000fac <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a84:	bf00      	nop
 8000a86:	37b0      	adds	r7, #176	@ 0xb0
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40004400 	.word	0x40004400
 8000a90:	40021000 	.word	0x40021000

08000a94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a98:	bf00      	nop
 8000a9a:	e7fd      	b.n	8000a98 <NMI_Handler+0x4>

08000a9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa0:	bf00      	nop
 8000aa2:	e7fd      	b.n	8000aa0 <HardFault_Handler+0x4>

08000aa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa8:	bf00      	nop
 8000aaa:	e7fd      	b.n	8000aa8 <MemManage_Handler+0x4>

08000aac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab0:	bf00      	nop
 8000ab2:	e7fd      	b.n	8000ab0 <BusFault_Handler+0x4>

08000ab4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab8:	bf00      	nop
 8000aba:	e7fd      	b.n	8000ab8 <UsageFault_Handler+0x4>

08000abc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr

08000aca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aea:	f000 f935 	bl	8000d58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000af2:	b580      	push	{r7, lr}
 8000af4:	b086      	sub	sp, #24
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	60f8      	str	r0, [r7, #12]
 8000afa:	60b9      	str	r1, [r7, #8]
 8000afc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000afe:	2300      	movs	r3, #0
 8000b00:	617b      	str	r3, [r7, #20]
 8000b02:	e00a      	b.n	8000b1a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b04:	f3af 8000 	nop.w
 8000b08:	4601      	mov	r1, r0
 8000b0a:	68bb      	ldr	r3, [r7, #8]
 8000b0c:	1c5a      	adds	r2, r3, #1
 8000b0e:	60ba      	str	r2, [r7, #8]
 8000b10:	b2ca      	uxtb	r2, r1
 8000b12:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	3301      	adds	r3, #1
 8000b18:	617b      	str	r3, [r7, #20]
 8000b1a:	697a      	ldr	r2, [r7, #20]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	429a      	cmp	r2, r3
 8000b20:	dbf0      	blt.n	8000b04 <_read+0x12>
  }

  return len;
 8000b22:	687b      	ldr	r3, [r7, #4]
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3718      	adds	r7, #24
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b086      	sub	sp, #24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	60f8      	str	r0, [r7, #12]
 8000b34:	60b9      	str	r1, [r7, #8]
 8000b36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b38:	2300      	movs	r3, #0
 8000b3a:	617b      	str	r3, [r7, #20]
 8000b3c:	e009      	b.n	8000b52 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b3e:	68bb      	ldr	r3, [r7, #8]
 8000b40:	1c5a      	adds	r2, r3, #1
 8000b42:	60ba      	str	r2, [r7, #8]
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	4618      	mov	r0, r3
 8000b48:	f7ff fd0a 	bl	8000560 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	3301      	adds	r3, #1
 8000b50:	617b      	str	r3, [r7, #20]
 8000b52:	697a      	ldr	r2, [r7, #20]
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	429a      	cmp	r2, r3
 8000b58:	dbf1      	blt.n	8000b3e <_write+0x12>
  }
  return len;
 8000b5a:	687b      	ldr	r3, [r7, #4]
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3718      	adds	r7, #24
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <_close>:

int _close(int file)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	370c      	adds	r7, #12
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b8c:	605a      	str	r2, [r3, #4]
  return 0;
 8000b8e:	2300      	movs	r3, #0
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <_isatty>:

int _isatty(int file)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ba4:	2301      	movs	r3, #1
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr

08000bb2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	b085      	sub	sp, #20
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	60f8      	str	r0, [r7, #12]
 8000bba:	60b9      	str	r1, [r7, #8]
 8000bbc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bbe:	2300      	movs	r3, #0
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3714      	adds	r7, #20
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bd4:	4a14      	ldr	r2, [pc, #80]	@ (8000c28 <_sbrk+0x5c>)
 8000bd6:	4b15      	ldr	r3, [pc, #84]	@ (8000c2c <_sbrk+0x60>)
 8000bd8:	1ad3      	subs	r3, r2, r3
 8000bda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000be0:	4b13      	ldr	r3, [pc, #76]	@ (8000c30 <_sbrk+0x64>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d102      	bne.n	8000bee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000be8:	4b11      	ldr	r3, [pc, #68]	@ (8000c30 <_sbrk+0x64>)
 8000bea:	4a12      	ldr	r2, [pc, #72]	@ (8000c34 <_sbrk+0x68>)
 8000bec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bee:	4b10      	ldr	r3, [pc, #64]	@ (8000c30 <_sbrk+0x64>)
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	d207      	bcs.n	8000c0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bfc:	f003 fcf6 	bl	80045ec <__errno>
 8000c00:	4603      	mov	r3, r0
 8000c02:	220c      	movs	r2, #12
 8000c04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c06:	f04f 33ff 	mov.w	r3, #4294967295
 8000c0a:	e009      	b.n	8000c20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c0c:	4b08      	ldr	r3, [pc, #32]	@ (8000c30 <_sbrk+0x64>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c12:	4b07      	ldr	r3, [pc, #28]	@ (8000c30 <_sbrk+0x64>)
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4413      	add	r3, r2
 8000c1a:	4a05      	ldr	r2, [pc, #20]	@ (8000c30 <_sbrk+0x64>)
 8000c1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c1e:	68fb      	ldr	r3, [r7, #12]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3718      	adds	r7, #24
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20018000 	.word	0x20018000
 8000c2c:	00000400 	.word	0x00000400
 8000c30:	20000170 	.word	0x20000170
 8000c34:	200002c8 	.word	0x200002c8

08000c38 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c3c:	4b06      	ldr	r3, [pc, #24]	@ (8000c58 <SystemInit+0x20>)
 8000c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c42:	4a05      	ldr	r2, [pc, #20]	@ (8000c58 <SystemInit+0x20>)
 8000c44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c5c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c94 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c60:	f7ff ffea 	bl	8000c38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c64:	480c      	ldr	r0, [pc, #48]	@ (8000c98 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c66:	490d      	ldr	r1, [pc, #52]	@ (8000c9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c68:	4a0d      	ldr	r2, [pc, #52]	@ (8000ca0 <LoopForever+0xe>)
  movs r3, #0
 8000c6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c6c:	e002      	b.n	8000c74 <LoopCopyDataInit>

08000c6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c72:	3304      	adds	r3, #4

08000c74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c78:	d3f9      	bcc.n	8000c6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ca4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c7c:	4c0a      	ldr	r4, [pc, #40]	@ (8000ca8 <LoopForever+0x16>)
  movs r3, #0
 8000c7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c80:	e001      	b.n	8000c86 <LoopFillZerobss>

08000c82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c84:	3204      	adds	r2, #4

08000c86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c88:	d3fb      	bcc.n	8000c82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c8a:	f003 fcb5 	bl	80045f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c8e:	f7ff fd21 	bl	80006d4 <main>

08000c92 <LoopForever>:

LoopForever:
    b LoopForever
 8000c92:	e7fe      	b.n	8000c92 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c94:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c9c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000ca0:	08005230 	.word	0x08005230
  ldr r2, =_sbss
 8000ca4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000ca8:	200002c4 	.word	0x200002c4

08000cac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cac:	e7fe      	b.n	8000cac <ADC1_2_IRQHandler>

08000cae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b082      	sub	sp, #8
 8000cb2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb8:	2003      	movs	r0, #3
 8000cba:	f000 f943 	bl	8000f44 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cbe:	200f      	movs	r0, #15
 8000cc0:	f000 f80e 	bl	8000ce0 <HAL_InitTick>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d002      	beq.n	8000cd0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	71fb      	strb	r3, [r7, #7]
 8000cce:	e001      	b.n	8000cd4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cd0:	f7ff fe1e 	bl	8000910 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
	...

08000ce0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000cec:	4b17      	ldr	r3, [pc, #92]	@ (8000d4c <HAL_InitTick+0x6c>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d023      	beq.n	8000d3c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000cf4:	4b16      	ldr	r3, [pc, #88]	@ (8000d50 <HAL_InitTick+0x70>)
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	4b14      	ldr	r3, [pc, #80]	@ (8000d4c <HAL_InitTick+0x6c>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f000 f941 	bl	8000f92 <HAL_SYSTICK_Config>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d10f      	bne.n	8000d36 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2b0f      	cmp	r3, #15
 8000d1a:	d809      	bhi.n	8000d30 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	6879      	ldr	r1, [r7, #4]
 8000d20:	f04f 30ff 	mov.w	r0, #4294967295
 8000d24:	f000 f919 	bl	8000f5a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d28:	4a0a      	ldr	r2, [pc, #40]	@ (8000d54 <HAL_InitTick+0x74>)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6013      	str	r3, [r2, #0]
 8000d2e:	e007      	b.n	8000d40 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d30:	2301      	movs	r3, #1
 8000d32:	73fb      	strb	r3, [r7, #15]
 8000d34:	e004      	b.n	8000d40 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
 8000d38:	73fb      	strb	r3, [r7, #15]
 8000d3a:	e001      	b.n	8000d40 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3710      	adds	r7, #16
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000008 	.word	0x20000008
 8000d50:	20000000 	.word	0x20000000
 8000d54:	20000004 	.word	0x20000004

08000d58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d5c:	4b06      	ldr	r3, [pc, #24]	@ (8000d78 <HAL_IncTick+0x20>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	461a      	mov	r2, r3
 8000d62:	4b06      	ldr	r3, [pc, #24]	@ (8000d7c <HAL_IncTick+0x24>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4413      	add	r3, r2
 8000d68:	4a04      	ldr	r2, [pc, #16]	@ (8000d7c <HAL_IncTick+0x24>)
 8000d6a:	6013      	str	r3, [r2, #0]
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	20000008 	.word	0x20000008
 8000d7c:	20000174 	.word	0x20000174

08000d80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  return uwTick;
 8000d84:	4b03      	ldr	r3, [pc, #12]	@ (8000d94 <HAL_GetTick+0x14>)
 8000d86:	681b      	ldr	r3, [r3, #0]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	20000174 	.word	0x20000174

08000d98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000da0:	f7ff ffee 	bl	8000d80 <HAL_GetTick>
 8000da4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000db0:	d005      	beq.n	8000dbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000db2:	4b0a      	ldr	r3, [pc, #40]	@ (8000ddc <HAL_Delay+0x44>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	461a      	mov	r2, r3
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	4413      	add	r3, r2
 8000dbc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dbe:	bf00      	nop
 8000dc0:	f7ff ffde 	bl	8000d80 <HAL_GetTick>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	68bb      	ldr	r3, [r7, #8]
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	68fa      	ldr	r2, [r7, #12]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d8f7      	bhi.n	8000dc0 <HAL_Delay+0x28>
  {
  }
}
 8000dd0:	bf00      	nop
 8000dd2:	bf00      	nop
 8000dd4:	3710      	adds	r7, #16
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000008 	.word	0x20000008

08000de0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b085      	sub	sp, #20
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	f003 0307 	and.w	r3, r3, #7
 8000dee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000df0:	4b0c      	ldr	r3, [pc, #48]	@ (8000e24 <__NVIC_SetPriorityGrouping+0x44>)
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000df6:	68ba      	ldr	r2, [r7, #8]
 8000df8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e12:	4a04      	ldr	r2, [pc, #16]	@ (8000e24 <__NVIC_SetPriorityGrouping+0x44>)
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	60d3      	str	r3, [r2, #12]
}
 8000e18:	bf00      	nop
 8000e1a:	3714      	adds	r7, #20
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e2c:	4b04      	ldr	r3, [pc, #16]	@ (8000e40 <__NVIC_GetPriorityGrouping+0x18>)
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	0a1b      	lsrs	r3, r3, #8
 8000e32:	f003 0307 	and.w	r3, r3, #7
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	6039      	str	r1, [r7, #0]
 8000e4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	db0a      	blt.n	8000e6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	b2da      	uxtb	r2, r3
 8000e5c:	490c      	ldr	r1, [pc, #48]	@ (8000e90 <__NVIC_SetPriority+0x4c>)
 8000e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e62:	0112      	lsls	r2, r2, #4
 8000e64:	b2d2      	uxtb	r2, r2
 8000e66:	440b      	add	r3, r1
 8000e68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e6c:	e00a      	b.n	8000e84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	b2da      	uxtb	r2, r3
 8000e72:	4908      	ldr	r1, [pc, #32]	@ (8000e94 <__NVIC_SetPriority+0x50>)
 8000e74:	79fb      	ldrb	r3, [r7, #7]
 8000e76:	f003 030f 	and.w	r3, r3, #15
 8000e7a:	3b04      	subs	r3, #4
 8000e7c:	0112      	lsls	r2, r2, #4
 8000e7e:	b2d2      	uxtb	r2, r2
 8000e80:	440b      	add	r3, r1
 8000e82:	761a      	strb	r2, [r3, #24]
}
 8000e84:	bf00      	nop
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	e000e100 	.word	0xe000e100
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b089      	sub	sp, #36	@ 0x24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	f003 0307 	and.w	r3, r3, #7
 8000eaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	f1c3 0307 	rsb	r3, r3, #7
 8000eb2:	2b04      	cmp	r3, #4
 8000eb4:	bf28      	it	cs
 8000eb6:	2304      	movcs	r3, #4
 8000eb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	3304      	adds	r3, #4
 8000ebe:	2b06      	cmp	r3, #6
 8000ec0:	d902      	bls.n	8000ec8 <NVIC_EncodePriority+0x30>
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	3b03      	subs	r3, #3
 8000ec6:	e000      	b.n	8000eca <NVIC_EncodePriority+0x32>
 8000ec8:	2300      	movs	r3, #0
 8000eca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ed0:	69bb      	ldr	r3, [r7, #24]
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	43da      	mvns	r2, r3
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	401a      	ands	r2, r3
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ee0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eea:	43d9      	mvns	r1, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef0:	4313      	orrs	r3, r2
         );
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3724      	adds	r7, #36	@ 0x24
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
	...

08000f00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3b01      	subs	r3, #1
 8000f0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f10:	d301      	bcc.n	8000f16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f12:	2301      	movs	r3, #1
 8000f14:	e00f      	b.n	8000f36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f16:	4a0a      	ldr	r2, [pc, #40]	@ (8000f40 <SysTick_Config+0x40>)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	3b01      	subs	r3, #1
 8000f1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f1e:	210f      	movs	r1, #15
 8000f20:	f04f 30ff 	mov.w	r0, #4294967295
 8000f24:	f7ff ff8e 	bl	8000e44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f28:	4b05      	ldr	r3, [pc, #20]	@ (8000f40 <SysTick_Config+0x40>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f2e:	4b04      	ldr	r3, [pc, #16]	@ (8000f40 <SysTick_Config+0x40>)
 8000f30:	2207      	movs	r2, #7
 8000f32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	e000e010 	.word	0xe000e010

08000f44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f7ff ff47 	bl	8000de0 <__NVIC_SetPriorityGrouping>
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b086      	sub	sp, #24
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	4603      	mov	r3, r0
 8000f62:	60b9      	str	r1, [r7, #8]
 8000f64:	607a      	str	r2, [r7, #4]
 8000f66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f6c:	f7ff ff5c 	bl	8000e28 <__NVIC_GetPriorityGrouping>
 8000f70:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f72:	687a      	ldr	r2, [r7, #4]
 8000f74:	68b9      	ldr	r1, [r7, #8]
 8000f76:	6978      	ldr	r0, [r7, #20]
 8000f78:	f7ff ff8e 	bl	8000e98 <NVIC_EncodePriority>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f82:	4611      	mov	r1, r2
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff ff5d 	bl	8000e44 <__NVIC_SetPriority>
}
 8000f8a:	bf00      	nop
 8000f8c:	3718      	adds	r7, #24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b082      	sub	sp, #8
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f7ff ffb0 	bl	8000f00 <SysTick_Config>
 8000fa0:	4603      	mov	r3, r0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
	...

08000fac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b087      	sub	sp, #28
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fba:	e17f      	b.n	80012bc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	2101      	movs	r1, #1
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc8:	4013      	ands	r3, r2
 8000fca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	f000 8171 	beq.w	80012b6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f003 0303 	and.w	r3, r3, #3
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d005      	beq.n	8000fec <HAL_GPIO_Init+0x40>
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f003 0303 	and.w	r3, r3, #3
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	d130      	bne.n	800104e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	2203      	movs	r2, #3
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	4013      	ands	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	68da      	ldr	r2, [r3, #12]
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	4313      	orrs	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001022:	2201      	movs	r2, #1
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	43db      	mvns	r3, r3
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	4013      	ands	r3, r2
 8001030:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	091b      	lsrs	r3, r3, #4
 8001038:	f003 0201 	and.w	r2, r3, #1
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	4313      	orrs	r3, r2
 8001046:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f003 0303 	and.w	r3, r3, #3
 8001056:	2b03      	cmp	r3, #3
 8001058:	d118      	bne.n	800108c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800105e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001060:	2201      	movs	r2, #1
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	43db      	mvns	r3, r3
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	4013      	ands	r3, r2
 800106e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	08db      	lsrs	r3, r3, #3
 8001076:	f003 0201 	and.w	r2, r3, #1
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	4313      	orrs	r3, r2
 8001084:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f003 0303 	and.w	r3, r3, #3
 8001094:	2b03      	cmp	r3, #3
 8001096:	d017      	beq.n	80010c8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	2203      	movs	r2, #3
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	43db      	mvns	r3, r3
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	4013      	ands	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	689a      	ldr	r2, [r3, #8]
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	4313      	orrs	r3, r2
 80010c0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f003 0303 	and.w	r3, r3, #3
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d123      	bne.n	800111c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	08da      	lsrs	r2, r3, #3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	3208      	adds	r2, #8
 80010dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	f003 0307 	and.w	r3, r3, #7
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	220f      	movs	r2, #15
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	43db      	mvns	r3, r3
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	4013      	ands	r3, r2
 80010f6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	691a      	ldr	r2, [r3, #16]
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	f003 0307 	and.w	r3, r3, #7
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	4313      	orrs	r3, r2
 800110c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	08da      	lsrs	r2, r3, #3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	3208      	adds	r2, #8
 8001116:	6939      	ldr	r1, [r7, #16]
 8001118:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	2203      	movs	r2, #3
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	43db      	mvns	r3, r3
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	4013      	ands	r3, r2
 8001132:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f003 0203 	and.w	r2, r3, #3
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	4313      	orrs	r3, r2
 8001148:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001158:	2b00      	cmp	r3, #0
 800115a:	f000 80ac 	beq.w	80012b6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800115e:	4b5f      	ldr	r3, [pc, #380]	@ (80012dc <HAL_GPIO_Init+0x330>)
 8001160:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001162:	4a5e      	ldr	r2, [pc, #376]	@ (80012dc <HAL_GPIO_Init+0x330>)
 8001164:	f043 0301 	orr.w	r3, r3, #1
 8001168:	6613      	str	r3, [r2, #96]	@ 0x60
 800116a:	4b5c      	ldr	r3, [pc, #368]	@ (80012dc <HAL_GPIO_Init+0x330>)
 800116c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	60bb      	str	r3, [r7, #8]
 8001174:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001176:	4a5a      	ldr	r2, [pc, #360]	@ (80012e0 <HAL_GPIO_Init+0x334>)
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	089b      	lsrs	r3, r3, #2
 800117c:	3302      	adds	r3, #2
 800117e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001182:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	f003 0303 	and.w	r3, r3, #3
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	220f      	movs	r2, #15
 800118e:	fa02 f303 	lsl.w	r3, r2, r3
 8001192:	43db      	mvns	r3, r3
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	4013      	ands	r3, r2
 8001198:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80011a0:	d025      	beq.n	80011ee <HAL_GPIO_Init+0x242>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a4f      	ldr	r2, [pc, #316]	@ (80012e4 <HAL_GPIO_Init+0x338>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d01f      	beq.n	80011ea <HAL_GPIO_Init+0x23e>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a4e      	ldr	r2, [pc, #312]	@ (80012e8 <HAL_GPIO_Init+0x33c>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d019      	beq.n	80011e6 <HAL_GPIO_Init+0x23a>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a4d      	ldr	r2, [pc, #308]	@ (80012ec <HAL_GPIO_Init+0x340>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d013      	beq.n	80011e2 <HAL_GPIO_Init+0x236>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a4c      	ldr	r2, [pc, #304]	@ (80012f0 <HAL_GPIO_Init+0x344>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d00d      	beq.n	80011de <HAL_GPIO_Init+0x232>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a4b      	ldr	r2, [pc, #300]	@ (80012f4 <HAL_GPIO_Init+0x348>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d007      	beq.n	80011da <HAL_GPIO_Init+0x22e>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a4a      	ldr	r2, [pc, #296]	@ (80012f8 <HAL_GPIO_Init+0x34c>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d101      	bne.n	80011d6 <HAL_GPIO_Init+0x22a>
 80011d2:	2306      	movs	r3, #6
 80011d4:	e00c      	b.n	80011f0 <HAL_GPIO_Init+0x244>
 80011d6:	2307      	movs	r3, #7
 80011d8:	e00a      	b.n	80011f0 <HAL_GPIO_Init+0x244>
 80011da:	2305      	movs	r3, #5
 80011dc:	e008      	b.n	80011f0 <HAL_GPIO_Init+0x244>
 80011de:	2304      	movs	r3, #4
 80011e0:	e006      	b.n	80011f0 <HAL_GPIO_Init+0x244>
 80011e2:	2303      	movs	r3, #3
 80011e4:	e004      	b.n	80011f0 <HAL_GPIO_Init+0x244>
 80011e6:	2302      	movs	r3, #2
 80011e8:	e002      	b.n	80011f0 <HAL_GPIO_Init+0x244>
 80011ea:	2301      	movs	r3, #1
 80011ec:	e000      	b.n	80011f0 <HAL_GPIO_Init+0x244>
 80011ee:	2300      	movs	r3, #0
 80011f0:	697a      	ldr	r2, [r7, #20]
 80011f2:	f002 0203 	and.w	r2, r2, #3
 80011f6:	0092      	lsls	r2, r2, #2
 80011f8:	4093      	lsls	r3, r2
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001200:	4937      	ldr	r1, [pc, #220]	@ (80012e0 <HAL_GPIO_Init+0x334>)
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	089b      	lsrs	r3, r3, #2
 8001206:	3302      	adds	r3, #2
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800120e:	4b3b      	ldr	r3, [pc, #236]	@ (80012fc <HAL_GPIO_Init+0x350>)
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	43db      	mvns	r3, r3
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	4013      	ands	r3, r2
 800121c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d003      	beq.n	8001232 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	4313      	orrs	r3, r2
 8001230:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001232:	4a32      	ldr	r2, [pc, #200]	@ (80012fc <HAL_GPIO_Init+0x350>)
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001238:	4b30      	ldr	r3, [pc, #192]	@ (80012fc <HAL_GPIO_Init+0x350>)
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	43db      	mvns	r3, r3
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	4013      	ands	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001250:	2b00      	cmp	r3, #0
 8001252:	d003      	beq.n	800125c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	4313      	orrs	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800125c:	4a27      	ldr	r2, [pc, #156]	@ (80012fc <HAL_GPIO_Init+0x350>)
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001262:	4b26      	ldr	r3, [pc, #152]	@ (80012fc <HAL_GPIO_Init+0x350>)
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	43db      	mvns	r3, r3
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	4013      	ands	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d003      	beq.n	8001286 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	4313      	orrs	r3, r2
 8001284:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001286:	4a1d      	ldr	r2, [pc, #116]	@ (80012fc <HAL_GPIO_Init+0x350>)
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800128c:	4b1b      	ldr	r3, [pc, #108]	@ (80012fc <HAL_GPIO_Init+0x350>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	43db      	mvns	r3, r3
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	4013      	ands	r3, r2
 800129a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d003      	beq.n	80012b0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012b0:	4a12      	ldr	r2, [pc, #72]	@ (80012fc <HAL_GPIO_Init+0x350>)
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	3301      	adds	r3, #1
 80012ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	fa22 f303 	lsr.w	r3, r2, r3
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	f47f ae78 	bne.w	8000fbc <HAL_GPIO_Init+0x10>
  }
}
 80012cc:	bf00      	nop
 80012ce:	bf00      	nop
 80012d0:	371c      	adds	r7, #28
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	40021000 	.word	0x40021000
 80012e0:	40010000 	.word	0x40010000
 80012e4:	48000400 	.word	0x48000400
 80012e8:	48000800 	.word	0x48000800
 80012ec:	48000c00 	.word	0x48000c00
 80012f0:	48001000 	.word	0x48001000
 80012f4:	48001400 	.word	0x48001400
 80012f8:	48001800 	.word	0x48001800
 80012fc:	40010400 	.word	0x40010400

08001300 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	460b      	mov	r3, r1
 800130a:	807b      	strh	r3, [r7, #2]
 800130c:	4613      	mov	r3, r2
 800130e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001310:	787b      	ldrb	r3, [r7, #1]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d003      	beq.n	800131e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001316:	887a      	ldrh	r2, [r7, #2]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800131c:	e002      	b.n	8001324 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800131e:	887a      	ldrh	r2, [r7, #2]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001324:	bf00      	nop
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001334:	4b04      	ldr	r3, [pc, #16]	@ (8001348 <HAL_PWREx_GetVoltageRange+0x18>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800133c:	4618      	mov	r0, r3
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	40007000 	.word	0x40007000

0800134c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800135a:	d130      	bne.n	80013be <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800135c:	4b23      	ldr	r3, [pc, #140]	@ (80013ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001364:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001368:	d038      	beq.n	80013dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800136a:	4b20      	ldr	r3, [pc, #128]	@ (80013ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001372:	4a1e      	ldr	r2, [pc, #120]	@ (80013ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001374:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001378:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800137a:	4b1d      	ldr	r3, [pc, #116]	@ (80013f0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2232      	movs	r2, #50	@ 0x32
 8001380:	fb02 f303 	mul.w	r3, r2, r3
 8001384:	4a1b      	ldr	r2, [pc, #108]	@ (80013f4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001386:	fba2 2303 	umull	r2, r3, r2, r3
 800138a:	0c9b      	lsrs	r3, r3, #18
 800138c:	3301      	adds	r3, #1
 800138e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001390:	e002      	b.n	8001398 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	3b01      	subs	r3, #1
 8001396:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001398:	4b14      	ldr	r3, [pc, #80]	@ (80013ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800139a:	695b      	ldr	r3, [r3, #20]
 800139c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013a4:	d102      	bne.n	80013ac <HAL_PWREx_ControlVoltageScaling+0x60>
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d1f2      	bne.n	8001392 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013ac:	4b0f      	ldr	r3, [pc, #60]	@ (80013ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013ae:	695b      	ldr	r3, [r3, #20]
 80013b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013b8:	d110      	bne.n	80013dc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e00f      	b.n	80013de <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80013be:	4b0b      	ldr	r3, [pc, #44]	@ (80013ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80013c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013ca:	d007      	beq.n	80013dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80013cc:	4b07      	ldr	r3, [pc, #28]	@ (80013ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80013d4:	4a05      	ldr	r2, [pc, #20]	@ (80013ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013da:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3714      	adds	r7, #20
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	40007000 	.word	0x40007000
 80013f0:	20000000 	.word	0x20000000
 80013f4:	431bde83 	.word	0x431bde83

080013f8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b088      	sub	sp, #32
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d101      	bne.n	800140a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e3ca      	b.n	8001ba0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800140a:	4b97      	ldr	r3, [pc, #604]	@ (8001668 <HAL_RCC_OscConfig+0x270>)
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	f003 030c 	and.w	r3, r3, #12
 8001412:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001414:	4b94      	ldr	r3, [pc, #592]	@ (8001668 <HAL_RCC_OscConfig+0x270>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	f003 0303 	and.w	r3, r3, #3
 800141c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0310 	and.w	r3, r3, #16
 8001426:	2b00      	cmp	r3, #0
 8001428:	f000 80e4 	beq.w	80015f4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d007      	beq.n	8001442 <HAL_RCC_OscConfig+0x4a>
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	2b0c      	cmp	r3, #12
 8001436:	f040 808b 	bne.w	8001550 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	2b01      	cmp	r3, #1
 800143e:	f040 8087 	bne.w	8001550 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001442:	4b89      	ldr	r3, [pc, #548]	@ (8001668 <HAL_RCC_OscConfig+0x270>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	2b00      	cmp	r3, #0
 800144c:	d005      	beq.n	800145a <HAL_RCC_OscConfig+0x62>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	699b      	ldr	r3, [r3, #24]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d101      	bne.n	800145a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e3a2      	b.n	8001ba0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6a1a      	ldr	r2, [r3, #32]
 800145e:	4b82      	ldr	r3, [pc, #520]	@ (8001668 <HAL_RCC_OscConfig+0x270>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0308 	and.w	r3, r3, #8
 8001466:	2b00      	cmp	r3, #0
 8001468:	d004      	beq.n	8001474 <HAL_RCC_OscConfig+0x7c>
 800146a:	4b7f      	ldr	r3, [pc, #508]	@ (8001668 <HAL_RCC_OscConfig+0x270>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001472:	e005      	b.n	8001480 <HAL_RCC_OscConfig+0x88>
 8001474:	4b7c      	ldr	r3, [pc, #496]	@ (8001668 <HAL_RCC_OscConfig+0x270>)
 8001476:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800147a:	091b      	lsrs	r3, r3, #4
 800147c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001480:	4293      	cmp	r3, r2
 8001482:	d223      	bcs.n	80014cc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6a1b      	ldr	r3, [r3, #32]
 8001488:	4618      	mov	r0, r3
 800148a:	f000 fd55 	bl	8001f38 <RCC_SetFlashLatencyFromMSIRange>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e383      	b.n	8001ba0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001498:	4b73      	ldr	r3, [pc, #460]	@ (8001668 <HAL_RCC_OscConfig+0x270>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a72      	ldr	r2, [pc, #456]	@ (8001668 <HAL_RCC_OscConfig+0x270>)
 800149e:	f043 0308 	orr.w	r3, r3, #8
 80014a2:	6013      	str	r3, [r2, #0]
 80014a4:	4b70      	ldr	r3, [pc, #448]	@ (8001668 <HAL_RCC_OscConfig+0x270>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6a1b      	ldr	r3, [r3, #32]
 80014b0:	496d      	ldr	r1, [pc, #436]	@ (8001668 <HAL_RCC_OscConfig+0x270>)
 80014b2:	4313      	orrs	r3, r2
 80014b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014b6:	4b6c      	ldr	r3, [pc, #432]	@ (8001668 <HAL_RCC_OscConfig+0x270>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	69db      	ldr	r3, [r3, #28]
 80014c2:	021b      	lsls	r3, r3, #8
 80014c4:	4968      	ldr	r1, [pc, #416]	@ (8001668 <HAL_RCC_OscConfig+0x270>)
 80014c6:	4313      	orrs	r3, r2
 80014c8:	604b      	str	r3, [r1, #4]
 80014ca:	e025      	b.n	8001518 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014cc:	4b66      	ldr	r3, [pc, #408]	@ (8001668 <HAL_RCC_OscConfig+0x270>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a65      	ldr	r2, [pc, #404]	@ (8001668 <HAL_RCC_OscConfig+0x270>)
 80014d2:	f043 0308 	orr.w	r3, r3, #8
 80014d6:	6013      	str	r3, [r2, #0]
 80014d8:	4b63      	ldr	r3, [pc, #396]	@ (8001668 <HAL_RCC_OscConfig+0x270>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6a1b      	ldr	r3, [r3, #32]
 80014e4:	4960      	ldr	r1, [pc, #384]	@ (8001668 <HAL_RCC_OscConfig+0x270>)
 80014e6:	4313      	orrs	r3, r2
 80014e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014ea:	4b5f      	ldr	r3, [pc, #380]	@ (8001668 <HAL_RCC_OscConfig+0x270>)
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	69db      	ldr	r3, [r3, #28]
 80014f6:	021b      	lsls	r3, r3, #8
 80014f8:	495b      	ldr	r1, [pc, #364]	@ (8001668 <HAL_RCC_OscConfig+0x270>)
 80014fa:	4313      	orrs	r3, r2
 80014fc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d109      	bne.n	8001518 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6a1b      	ldr	r3, [r3, #32]
 8001508:	4618      	mov	r0, r3
 800150a:	f000 fd15 	bl	8001f38 <RCC_SetFlashLatencyFromMSIRange>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e343      	b.n	8001ba0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001518:	f000 fc4a 	bl	8001db0 <HAL_RCC_GetSysClockFreq>
 800151c:	4602      	mov	r2, r0
 800151e:	4b52      	ldr	r3, [pc, #328]	@ (8001668 <HAL_RCC_OscConfig+0x270>)
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	091b      	lsrs	r3, r3, #4
 8001524:	f003 030f 	and.w	r3, r3, #15
 8001528:	4950      	ldr	r1, [pc, #320]	@ (800166c <HAL_RCC_OscConfig+0x274>)
 800152a:	5ccb      	ldrb	r3, [r1, r3]
 800152c:	f003 031f 	and.w	r3, r3, #31
 8001530:	fa22 f303 	lsr.w	r3, r2, r3
 8001534:	4a4e      	ldr	r2, [pc, #312]	@ (8001670 <HAL_RCC_OscConfig+0x278>)
 8001536:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001538:	4b4e      	ldr	r3, [pc, #312]	@ (8001674 <HAL_RCC_OscConfig+0x27c>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff fbcf 	bl	8000ce0 <HAL_InitTick>
 8001542:	4603      	mov	r3, r0
 8001544:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001546:	7bfb      	ldrb	r3, [r7, #15]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d052      	beq.n	80015f2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800154c:	7bfb      	ldrb	r3, [r7, #15]
 800154e:	e327      	b.n	8001ba0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d032      	beq.n	80015be <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001558:	4b43      	ldr	r3, [pc, #268]	@ (8001668 <HAL_RCC_OscConfig+0x270>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a42      	ldr	r2, [pc, #264]	@ (8001668 <HAL_RCC_OscConfig+0x270>)
 800155e:	f043 0301 	orr.w	r3, r3, #1
 8001562:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001564:	f7ff fc0c 	bl	8000d80 <HAL_GetTick>
 8001568:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800156a:	e008      	b.n	800157e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800156c:	f7ff fc08 	bl	8000d80 <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	2b02      	cmp	r3, #2
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e310      	b.n	8001ba0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800157e:	4b3a      	ldr	r3, [pc, #232]	@ (8001668 <HAL_RCC_OscConfig+0x270>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d0f0      	beq.n	800156c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800158a:	4b37      	ldr	r3, [pc, #220]	@ (8001668 <HAL_RCC_OscConfig+0x270>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a36      	ldr	r2, [pc, #216]	@ (8001668 <HAL_RCC_OscConfig+0x270>)
 8001590:	f043 0308 	orr.w	r3, r3, #8
 8001594:	6013      	str	r3, [r2, #0]
 8001596:	4b34      	ldr	r3, [pc, #208]	@ (8001668 <HAL_RCC_OscConfig+0x270>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6a1b      	ldr	r3, [r3, #32]
 80015a2:	4931      	ldr	r1, [pc, #196]	@ (8001668 <HAL_RCC_OscConfig+0x270>)
 80015a4:	4313      	orrs	r3, r2
 80015a6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015a8:	4b2f      	ldr	r3, [pc, #188]	@ (8001668 <HAL_RCC_OscConfig+0x270>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	69db      	ldr	r3, [r3, #28]
 80015b4:	021b      	lsls	r3, r3, #8
 80015b6:	492c      	ldr	r1, [pc, #176]	@ (8001668 <HAL_RCC_OscConfig+0x270>)
 80015b8:	4313      	orrs	r3, r2
 80015ba:	604b      	str	r3, [r1, #4]
 80015bc:	e01a      	b.n	80015f4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80015be:	4b2a      	ldr	r3, [pc, #168]	@ (8001668 <HAL_RCC_OscConfig+0x270>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a29      	ldr	r2, [pc, #164]	@ (8001668 <HAL_RCC_OscConfig+0x270>)
 80015c4:	f023 0301 	bic.w	r3, r3, #1
 80015c8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015ca:	f7ff fbd9 	bl	8000d80 <HAL_GetTick>
 80015ce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015d0:	e008      	b.n	80015e4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015d2:	f7ff fbd5 	bl	8000d80 <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d901      	bls.n	80015e4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e2dd      	b.n	8001ba0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015e4:	4b20      	ldr	r3, [pc, #128]	@ (8001668 <HAL_RCC_OscConfig+0x270>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0302 	and.w	r3, r3, #2
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d1f0      	bne.n	80015d2 <HAL_RCC_OscConfig+0x1da>
 80015f0:	e000      	b.n	80015f4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015f2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0301 	and.w	r3, r3, #1
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d074      	beq.n	80016ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	2b08      	cmp	r3, #8
 8001604:	d005      	beq.n	8001612 <HAL_RCC_OscConfig+0x21a>
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	2b0c      	cmp	r3, #12
 800160a:	d10e      	bne.n	800162a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	2b03      	cmp	r3, #3
 8001610:	d10b      	bne.n	800162a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001612:	4b15      	ldr	r3, [pc, #84]	@ (8001668 <HAL_RCC_OscConfig+0x270>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d064      	beq.n	80016e8 <HAL_RCC_OscConfig+0x2f0>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d160      	bne.n	80016e8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e2ba      	b.n	8001ba0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001632:	d106      	bne.n	8001642 <HAL_RCC_OscConfig+0x24a>
 8001634:	4b0c      	ldr	r3, [pc, #48]	@ (8001668 <HAL_RCC_OscConfig+0x270>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a0b      	ldr	r2, [pc, #44]	@ (8001668 <HAL_RCC_OscConfig+0x270>)
 800163a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800163e:	6013      	str	r3, [r2, #0]
 8001640:	e026      	b.n	8001690 <HAL_RCC_OscConfig+0x298>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800164a:	d115      	bne.n	8001678 <HAL_RCC_OscConfig+0x280>
 800164c:	4b06      	ldr	r3, [pc, #24]	@ (8001668 <HAL_RCC_OscConfig+0x270>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a05      	ldr	r2, [pc, #20]	@ (8001668 <HAL_RCC_OscConfig+0x270>)
 8001652:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001656:	6013      	str	r3, [r2, #0]
 8001658:	4b03      	ldr	r3, [pc, #12]	@ (8001668 <HAL_RCC_OscConfig+0x270>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a02      	ldr	r2, [pc, #8]	@ (8001668 <HAL_RCC_OscConfig+0x270>)
 800165e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001662:	6013      	str	r3, [r2, #0]
 8001664:	e014      	b.n	8001690 <HAL_RCC_OscConfig+0x298>
 8001666:	bf00      	nop
 8001668:	40021000 	.word	0x40021000
 800166c:	080051a4 	.word	0x080051a4
 8001670:	20000000 	.word	0x20000000
 8001674:	20000004 	.word	0x20000004
 8001678:	4ba0      	ldr	r3, [pc, #640]	@ (80018fc <HAL_RCC_OscConfig+0x504>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a9f      	ldr	r2, [pc, #636]	@ (80018fc <HAL_RCC_OscConfig+0x504>)
 800167e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001682:	6013      	str	r3, [r2, #0]
 8001684:	4b9d      	ldr	r3, [pc, #628]	@ (80018fc <HAL_RCC_OscConfig+0x504>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a9c      	ldr	r2, [pc, #624]	@ (80018fc <HAL_RCC_OscConfig+0x504>)
 800168a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800168e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d013      	beq.n	80016c0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001698:	f7ff fb72 	bl	8000d80 <HAL_GetTick>
 800169c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800169e:	e008      	b.n	80016b2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016a0:	f7ff fb6e 	bl	8000d80 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b64      	cmp	r3, #100	@ 0x64
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e276      	b.n	8001ba0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016b2:	4b92      	ldr	r3, [pc, #584]	@ (80018fc <HAL_RCC_OscConfig+0x504>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d0f0      	beq.n	80016a0 <HAL_RCC_OscConfig+0x2a8>
 80016be:	e014      	b.n	80016ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c0:	f7ff fb5e 	bl	8000d80 <HAL_GetTick>
 80016c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016c6:	e008      	b.n	80016da <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016c8:	f7ff fb5a 	bl	8000d80 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b64      	cmp	r3, #100	@ 0x64
 80016d4:	d901      	bls.n	80016da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e262      	b.n	8001ba0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016da:	4b88      	ldr	r3, [pc, #544]	@ (80018fc <HAL_RCC_OscConfig+0x504>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1f0      	bne.n	80016c8 <HAL_RCC_OscConfig+0x2d0>
 80016e6:	e000      	b.n	80016ea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d060      	beq.n	80017b8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	2b04      	cmp	r3, #4
 80016fa:	d005      	beq.n	8001708 <HAL_RCC_OscConfig+0x310>
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	2b0c      	cmp	r3, #12
 8001700:	d119      	bne.n	8001736 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	2b02      	cmp	r3, #2
 8001706:	d116      	bne.n	8001736 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001708:	4b7c      	ldr	r3, [pc, #496]	@ (80018fc <HAL_RCC_OscConfig+0x504>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001710:	2b00      	cmp	r3, #0
 8001712:	d005      	beq.n	8001720 <HAL_RCC_OscConfig+0x328>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d101      	bne.n	8001720 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e23f      	b.n	8001ba0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001720:	4b76      	ldr	r3, [pc, #472]	@ (80018fc <HAL_RCC_OscConfig+0x504>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	691b      	ldr	r3, [r3, #16]
 800172c:	061b      	lsls	r3, r3, #24
 800172e:	4973      	ldr	r1, [pc, #460]	@ (80018fc <HAL_RCC_OscConfig+0x504>)
 8001730:	4313      	orrs	r3, r2
 8001732:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001734:	e040      	b.n	80017b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d023      	beq.n	8001786 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800173e:	4b6f      	ldr	r3, [pc, #444]	@ (80018fc <HAL_RCC_OscConfig+0x504>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a6e      	ldr	r2, [pc, #440]	@ (80018fc <HAL_RCC_OscConfig+0x504>)
 8001744:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001748:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800174a:	f7ff fb19 	bl	8000d80 <HAL_GetTick>
 800174e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001750:	e008      	b.n	8001764 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001752:	f7ff fb15 	bl	8000d80 <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	2b02      	cmp	r3, #2
 800175e:	d901      	bls.n	8001764 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e21d      	b.n	8001ba0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001764:	4b65      	ldr	r3, [pc, #404]	@ (80018fc <HAL_RCC_OscConfig+0x504>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800176c:	2b00      	cmp	r3, #0
 800176e:	d0f0      	beq.n	8001752 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001770:	4b62      	ldr	r3, [pc, #392]	@ (80018fc <HAL_RCC_OscConfig+0x504>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	691b      	ldr	r3, [r3, #16]
 800177c:	061b      	lsls	r3, r3, #24
 800177e:	495f      	ldr	r1, [pc, #380]	@ (80018fc <HAL_RCC_OscConfig+0x504>)
 8001780:	4313      	orrs	r3, r2
 8001782:	604b      	str	r3, [r1, #4]
 8001784:	e018      	b.n	80017b8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001786:	4b5d      	ldr	r3, [pc, #372]	@ (80018fc <HAL_RCC_OscConfig+0x504>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a5c      	ldr	r2, [pc, #368]	@ (80018fc <HAL_RCC_OscConfig+0x504>)
 800178c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001790:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001792:	f7ff faf5 	bl	8000d80 <HAL_GetTick>
 8001796:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001798:	e008      	b.n	80017ac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800179a:	f7ff faf1 	bl	8000d80 <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d901      	bls.n	80017ac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e1f9      	b.n	8001ba0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017ac:	4b53      	ldr	r3, [pc, #332]	@ (80018fc <HAL_RCC_OscConfig+0x504>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d1f0      	bne.n	800179a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0308 	and.w	r3, r3, #8
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d03c      	beq.n	800183e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	695b      	ldr	r3, [r3, #20]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d01c      	beq.n	8001806 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017cc:	4b4b      	ldr	r3, [pc, #300]	@ (80018fc <HAL_RCC_OscConfig+0x504>)
 80017ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017d2:	4a4a      	ldr	r2, [pc, #296]	@ (80018fc <HAL_RCC_OscConfig+0x504>)
 80017d4:	f043 0301 	orr.w	r3, r3, #1
 80017d8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017dc:	f7ff fad0 	bl	8000d80 <HAL_GetTick>
 80017e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017e2:	e008      	b.n	80017f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017e4:	f7ff facc 	bl	8000d80 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e1d4      	b.n	8001ba0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017f6:	4b41      	ldr	r3, [pc, #260]	@ (80018fc <HAL_RCC_OscConfig+0x504>)
 80017f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017fc:	f003 0302 	and.w	r3, r3, #2
 8001800:	2b00      	cmp	r3, #0
 8001802:	d0ef      	beq.n	80017e4 <HAL_RCC_OscConfig+0x3ec>
 8001804:	e01b      	b.n	800183e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001806:	4b3d      	ldr	r3, [pc, #244]	@ (80018fc <HAL_RCC_OscConfig+0x504>)
 8001808:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800180c:	4a3b      	ldr	r2, [pc, #236]	@ (80018fc <HAL_RCC_OscConfig+0x504>)
 800180e:	f023 0301 	bic.w	r3, r3, #1
 8001812:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001816:	f7ff fab3 	bl	8000d80 <HAL_GetTick>
 800181a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800181c:	e008      	b.n	8001830 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800181e:	f7ff faaf 	bl	8000d80 <HAL_GetTick>
 8001822:	4602      	mov	r2, r0
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	2b02      	cmp	r3, #2
 800182a:	d901      	bls.n	8001830 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800182c:	2303      	movs	r3, #3
 800182e:	e1b7      	b.n	8001ba0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001830:	4b32      	ldr	r3, [pc, #200]	@ (80018fc <HAL_RCC_OscConfig+0x504>)
 8001832:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d1ef      	bne.n	800181e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0304 	and.w	r3, r3, #4
 8001846:	2b00      	cmp	r3, #0
 8001848:	f000 80a6 	beq.w	8001998 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800184c:	2300      	movs	r3, #0
 800184e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001850:	4b2a      	ldr	r3, [pc, #168]	@ (80018fc <HAL_RCC_OscConfig+0x504>)
 8001852:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001854:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d10d      	bne.n	8001878 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800185c:	4b27      	ldr	r3, [pc, #156]	@ (80018fc <HAL_RCC_OscConfig+0x504>)
 800185e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001860:	4a26      	ldr	r2, [pc, #152]	@ (80018fc <HAL_RCC_OscConfig+0x504>)
 8001862:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001866:	6593      	str	r3, [r2, #88]	@ 0x58
 8001868:	4b24      	ldr	r3, [pc, #144]	@ (80018fc <HAL_RCC_OscConfig+0x504>)
 800186a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800186c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001870:	60bb      	str	r3, [r7, #8]
 8001872:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001874:	2301      	movs	r3, #1
 8001876:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001878:	4b21      	ldr	r3, [pc, #132]	@ (8001900 <HAL_RCC_OscConfig+0x508>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001880:	2b00      	cmp	r3, #0
 8001882:	d118      	bne.n	80018b6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001884:	4b1e      	ldr	r3, [pc, #120]	@ (8001900 <HAL_RCC_OscConfig+0x508>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a1d      	ldr	r2, [pc, #116]	@ (8001900 <HAL_RCC_OscConfig+0x508>)
 800188a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800188e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001890:	f7ff fa76 	bl	8000d80 <HAL_GetTick>
 8001894:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001896:	e008      	b.n	80018aa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001898:	f7ff fa72 	bl	8000d80 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e17a      	b.n	8001ba0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018aa:	4b15      	ldr	r3, [pc, #84]	@ (8001900 <HAL_RCC_OscConfig+0x508>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d0f0      	beq.n	8001898 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d108      	bne.n	80018d0 <HAL_RCC_OscConfig+0x4d8>
 80018be:	4b0f      	ldr	r3, [pc, #60]	@ (80018fc <HAL_RCC_OscConfig+0x504>)
 80018c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018c4:	4a0d      	ldr	r2, [pc, #52]	@ (80018fc <HAL_RCC_OscConfig+0x504>)
 80018c6:	f043 0301 	orr.w	r3, r3, #1
 80018ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018ce:	e029      	b.n	8001924 <HAL_RCC_OscConfig+0x52c>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	2b05      	cmp	r3, #5
 80018d6:	d115      	bne.n	8001904 <HAL_RCC_OscConfig+0x50c>
 80018d8:	4b08      	ldr	r3, [pc, #32]	@ (80018fc <HAL_RCC_OscConfig+0x504>)
 80018da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018de:	4a07      	ldr	r2, [pc, #28]	@ (80018fc <HAL_RCC_OscConfig+0x504>)
 80018e0:	f043 0304 	orr.w	r3, r3, #4
 80018e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018e8:	4b04      	ldr	r3, [pc, #16]	@ (80018fc <HAL_RCC_OscConfig+0x504>)
 80018ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018ee:	4a03      	ldr	r2, [pc, #12]	@ (80018fc <HAL_RCC_OscConfig+0x504>)
 80018f0:	f043 0301 	orr.w	r3, r3, #1
 80018f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018f8:	e014      	b.n	8001924 <HAL_RCC_OscConfig+0x52c>
 80018fa:	bf00      	nop
 80018fc:	40021000 	.word	0x40021000
 8001900:	40007000 	.word	0x40007000
 8001904:	4b9c      	ldr	r3, [pc, #624]	@ (8001b78 <HAL_RCC_OscConfig+0x780>)
 8001906:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800190a:	4a9b      	ldr	r2, [pc, #620]	@ (8001b78 <HAL_RCC_OscConfig+0x780>)
 800190c:	f023 0301 	bic.w	r3, r3, #1
 8001910:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001914:	4b98      	ldr	r3, [pc, #608]	@ (8001b78 <HAL_RCC_OscConfig+0x780>)
 8001916:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800191a:	4a97      	ldr	r2, [pc, #604]	@ (8001b78 <HAL_RCC_OscConfig+0x780>)
 800191c:	f023 0304 	bic.w	r3, r3, #4
 8001920:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d016      	beq.n	800195a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800192c:	f7ff fa28 	bl	8000d80 <HAL_GetTick>
 8001930:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001932:	e00a      	b.n	800194a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001934:	f7ff fa24 	bl	8000d80 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001942:	4293      	cmp	r3, r2
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e12a      	b.n	8001ba0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800194a:	4b8b      	ldr	r3, [pc, #556]	@ (8001b78 <HAL_RCC_OscConfig+0x780>)
 800194c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001950:	f003 0302 	and.w	r3, r3, #2
 8001954:	2b00      	cmp	r3, #0
 8001956:	d0ed      	beq.n	8001934 <HAL_RCC_OscConfig+0x53c>
 8001958:	e015      	b.n	8001986 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800195a:	f7ff fa11 	bl	8000d80 <HAL_GetTick>
 800195e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001960:	e00a      	b.n	8001978 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001962:	f7ff fa0d 	bl	8000d80 <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001970:	4293      	cmp	r3, r2
 8001972:	d901      	bls.n	8001978 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e113      	b.n	8001ba0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001978:	4b7f      	ldr	r3, [pc, #508]	@ (8001b78 <HAL_RCC_OscConfig+0x780>)
 800197a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	2b00      	cmp	r3, #0
 8001984:	d1ed      	bne.n	8001962 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001986:	7ffb      	ldrb	r3, [r7, #31]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d105      	bne.n	8001998 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800198c:	4b7a      	ldr	r3, [pc, #488]	@ (8001b78 <HAL_RCC_OscConfig+0x780>)
 800198e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001990:	4a79      	ldr	r2, [pc, #484]	@ (8001b78 <HAL_RCC_OscConfig+0x780>)
 8001992:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001996:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800199c:	2b00      	cmp	r3, #0
 800199e:	f000 80fe 	beq.w	8001b9e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	f040 80d0 	bne.w	8001b4c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80019ac:	4b72      	ldr	r3, [pc, #456]	@ (8001b78 <HAL_RCC_OscConfig+0x780>)
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	f003 0203 	and.w	r2, r3, #3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019bc:	429a      	cmp	r2, r3
 80019be:	d130      	bne.n	8001a22 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ca:	3b01      	subs	r3, #1
 80019cc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d127      	bne.n	8001a22 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019dc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019de:	429a      	cmp	r2, r3
 80019e0:	d11f      	bne.n	8001a22 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80019ec:	2a07      	cmp	r2, #7
 80019ee:	bf14      	ite	ne
 80019f0:	2201      	movne	r2, #1
 80019f2:	2200      	moveq	r2, #0
 80019f4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d113      	bne.n	8001a22 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a04:	085b      	lsrs	r3, r3, #1
 8001a06:	3b01      	subs	r3, #1
 8001a08:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d109      	bne.n	8001a22 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a18:	085b      	lsrs	r3, r3, #1
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d06e      	beq.n	8001b00 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	2b0c      	cmp	r3, #12
 8001a26:	d069      	beq.n	8001afc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001a28:	4b53      	ldr	r3, [pc, #332]	@ (8001b78 <HAL_RCC_OscConfig+0x780>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d105      	bne.n	8001a40 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001a34:	4b50      	ldr	r3, [pc, #320]	@ (8001b78 <HAL_RCC_OscConfig+0x780>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e0ad      	b.n	8001ba0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a44:	4b4c      	ldr	r3, [pc, #304]	@ (8001b78 <HAL_RCC_OscConfig+0x780>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a4b      	ldr	r2, [pc, #300]	@ (8001b78 <HAL_RCC_OscConfig+0x780>)
 8001a4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a4e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a50:	f7ff f996 	bl	8000d80 <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a58:	f7ff f992 	bl	8000d80 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e09a      	b.n	8001ba0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a6a:	4b43      	ldr	r3, [pc, #268]	@ (8001b78 <HAL_RCC_OscConfig+0x780>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1f0      	bne.n	8001a58 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a76:	4b40      	ldr	r3, [pc, #256]	@ (8001b78 <HAL_RCC_OscConfig+0x780>)
 8001a78:	68da      	ldr	r2, [r3, #12]
 8001a7a:	4b40      	ldr	r3, [pc, #256]	@ (8001b7c <HAL_RCC_OscConfig+0x784>)
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001a86:	3a01      	subs	r2, #1
 8001a88:	0112      	lsls	r2, r2, #4
 8001a8a:	4311      	orrs	r1, r2
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001a90:	0212      	lsls	r2, r2, #8
 8001a92:	4311      	orrs	r1, r2
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001a98:	0852      	lsrs	r2, r2, #1
 8001a9a:	3a01      	subs	r2, #1
 8001a9c:	0552      	lsls	r2, r2, #21
 8001a9e:	4311      	orrs	r1, r2
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001aa4:	0852      	lsrs	r2, r2, #1
 8001aa6:	3a01      	subs	r2, #1
 8001aa8:	0652      	lsls	r2, r2, #25
 8001aaa:	4311      	orrs	r1, r2
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001ab0:	0912      	lsrs	r2, r2, #4
 8001ab2:	0452      	lsls	r2, r2, #17
 8001ab4:	430a      	orrs	r2, r1
 8001ab6:	4930      	ldr	r1, [pc, #192]	@ (8001b78 <HAL_RCC_OscConfig+0x780>)
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001abc:	4b2e      	ldr	r3, [pc, #184]	@ (8001b78 <HAL_RCC_OscConfig+0x780>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a2d      	ldr	r2, [pc, #180]	@ (8001b78 <HAL_RCC_OscConfig+0x780>)
 8001ac2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ac6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ac8:	4b2b      	ldr	r3, [pc, #172]	@ (8001b78 <HAL_RCC_OscConfig+0x780>)
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	4a2a      	ldr	r2, [pc, #168]	@ (8001b78 <HAL_RCC_OscConfig+0x780>)
 8001ace:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ad2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ad4:	f7ff f954 	bl	8000d80 <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001adc:	f7ff f950 	bl	8000d80 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e058      	b.n	8001ba0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aee:	4b22      	ldr	r3, [pc, #136]	@ (8001b78 <HAL_RCC_OscConfig+0x780>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d0f0      	beq.n	8001adc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001afa:	e050      	b.n	8001b9e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e04f      	b.n	8001ba0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b00:	4b1d      	ldr	r3, [pc, #116]	@ (8001b78 <HAL_RCC_OscConfig+0x780>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d148      	bne.n	8001b9e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001b0c:	4b1a      	ldr	r3, [pc, #104]	@ (8001b78 <HAL_RCC_OscConfig+0x780>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a19      	ldr	r2, [pc, #100]	@ (8001b78 <HAL_RCC_OscConfig+0x780>)
 8001b12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b16:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b18:	4b17      	ldr	r3, [pc, #92]	@ (8001b78 <HAL_RCC_OscConfig+0x780>)
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	4a16      	ldr	r2, [pc, #88]	@ (8001b78 <HAL_RCC_OscConfig+0x780>)
 8001b1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b22:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b24:	f7ff f92c 	bl	8000d80 <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b2c:	f7ff f928 	bl	8000d80 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e030      	b.n	8001ba0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b3e:	4b0e      	ldr	r3, [pc, #56]	@ (8001b78 <HAL_RCC_OscConfig+0x780>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d0f0      	beq.n	8001b2c <HAL_RCC_OscConfig+0x734>
 8001b4a:	e028      	b.n	8001b9e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	2b0c      	cmp	r3, #12
 8001b50:	d023      	beq.n	8001b9a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b52:	4b09      	ldr	r3, [pc, #36]	@ (8001b78 <HAL_RCC_OscConfig+0x780>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a08      	ldr	r2, [pc, #32]	@ (8001b78 <HAL_RCC_OscConfig+0x780>)
 8001b58:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b5e:	f7ff f90f 	bl	8000d80 <HAL_GetTick>
 8001b62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b64:	e00c      	b.n	8001b80 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b66:	f7ff f90b 	bl	8000d80 <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d905      	bls.n	8001b80 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e013      	b.n	8001ba0 <HAL_RCC_OscConfig+0x7a8>
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b80:	4b09      	ldr	r3, [pc, #36]	@ (8001ba8 <HAL_RCC_OscConfig+0x7b0>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d1ec      	bne.n	8001b66 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001b8c:	4b06      	ldr	r3, [pc, #24]	@ (8001ba8 <HAL_RCC_OscConfig+0x7b0>)
 8001b8e:	68da      	ldr	r2, [r3, #12]
 8001b90:	4905      	ldr	r1, [pc, #20]	@ (8001ba8 <HAL_RCC_OscConfig+0x7b0>)
 8001b92:	4b06      	ldr	r3, [pc, #24]	@ (8001bac <HAL_RCC_OscConfig+0x7b4>)
 8001b94:	4013      	ands	r3, r2
 8001b96:	60cb      	str	r3, [r1, #12]
 8001b98:	e001      	b.n	8001b9e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e000      	b.n	8001ba0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001b9e:	2300      	movs	r3, #0
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3720      	adds	r7, #32
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	feeefffc 	.word	0xfeeefffc

08001bb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d101      	bne.n	8001bc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e0e7      	b.n	8001d94 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bc4:	4b75      	ldr	r3, [pc, #468]	@ (8001d9c <HAL_RCC_ClockConfig+0x1ec>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0307 	and.w	r3, r3, #7
 8001bcc:	683a      	ldr	r2, [r7, #0]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d910      	bls.n	8001bf4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bd2:	4b72      	ldr	r3, [pc, #456]	@ (8001d9c <HAL_RCC_ClockConfig+0x1ec>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f023 0207 	bic.w	r2, r3, #7
 8001bda:	4970      	ldr	r1, [pc, #448]	@ (8001d9c <HAL_RCC_ClockConfig+0x1ec>)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001be2:	4b6e      	ldr	r3, [pc, #440]	@ (8001d9c <HAL_RCC_ClockConfig+0x1ec>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0307 	and.w	r3, r3, #7
 8001bea:	683a      	ldr	r2, [r7, #0]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d001      	beq.n	8001bf4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e0cf      	b.n	8001d94 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0302 	and.w	r3, r3, #2
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d010      	beq.n	8001c22 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689a      	ldr	r2, [r3, #8]
 8001c04:	4b66      	ldr	r3, [pc, #408]	@ (8001da0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d908      	bls.n	8001c22 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c10:	4b63      	ldr	r3, [pc, #396]	@ (8001da0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	4960      	ldr	r1, [pc, #384]	@ (8001da0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d04c      	beq.n	8001cc8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	2b03      	cmp	r3, #3
 8001c34:	d107      	bne.n	8001c46 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c36:	4b5a      	ldr	r3, [pc, #360]	@ (8001da0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d121      	bne.n	8001c86 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e0a6      	b.n	8001d94 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d107      	bne.n	8001c5e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c4e:	4b54      	ldr	r3, [pc, #336]	@ (8001da0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d115      	bne.n	8001c86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e09a      	b.n	8001d94 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d107      	bne.n	8001c76 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c66:	4b4e      	ldr	r3, [pc, #312]	@ (8001da0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d109      	bne.n	8001c86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e08e      	b.n	8001d94 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c76:	4b4a      	ldr	r3, [pc, #296]	@ (8001da0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d101      	bne.n	8001c86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e086      	b.n	8001d94 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c86:	4b46      	ldr	r3, [pc, #280]	@ (8001da0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f023 0203 	bic.w	r2, r3, #3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	4943      	ldr	r1, [pc, #268]	@ (8001da0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c94:	4313      	orrs	r3, r2
 8001c96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c98:	f7ff f872 	bl	8000d80 <HAL_GetTick>
 8001c9c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c9e:	e00a      	b.n	8001cb6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ca0:	f7ff f86e 	bl	8000d80 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e06e      	b.n	8001d94 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cb6:	4b3a      	ldr	r3, [pc, #232]	@ (8001da0 <HAL_RCC_ClockConfig+0x1f0>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f003 020c 	and.w	r2, r3, #12
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d1eb      	bne.n	8001ca0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0302 	and.w	r3, r3, #2
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d010      	beq.n	8001cf6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689a      	ldr	r2, [r3, #8]
 8001cd8:	4b31      	ldr	r3, [pc, #196]	@ (8001da0 <HAL_RCC_ClockConfig+0x1f0>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d208      	bcs.n	8001cf6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ce4:	4b2e      	ldr	r3, [pc, #184]	@ (8001da0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	492b      	ldr	r1, [pc, #172]	@ (8001da0 <HAL_RCC_ClockConfig+0x1f0>)
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cf6:	4b29      	ldr	r3, [pc, #164]	@ (8001d9c <HAL_RCC_ClockConfig+0x1ec>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	683a      	ldr	r2, [r7, #0]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d210      	bcs.n	8001d26 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d04:	4b25      	ldr	r3, [pc, #148]	@ (8001d9c <HAL_RCC_ClockConfig+0x1ec>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f023 0207 	bic.w	r2, r3, #7
 8001d0c:	4923      	ldr	r1, [pc, #140]	@ (8001d9c <HAL_RCC_ClockConfig+0x1ec>)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d14:	4b21      	ldr	r3, [pc, #132]	@ (8001d9c <HAL_RCC_ClockConfig+0x1ec>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0307 	and.w	r3, r3, #7
 8001d1c:	683a      	ldr	r2, [r7, #0]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d001      	beq.n	8001d26 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e036      	b.n	8001d94 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0304 	and.w	r3, r3, #4
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d008      	beq.n	8001d44 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d32:	4b1b      	ldr	r3, [pc, #108]	@ (8001da0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	4918      	ldr	r1, [pc, #96]	@ (8001da0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d40:	4313      	orrs	r3, r2
 8001d42:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0308 	and.w	r3, r3, #8
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d009      	beq.n	8001d64 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d50:	4b13      	ldr	r3, [pc, #76]	@ (8001da0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	691b      	ldr	r3, [r3, #16]
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	4910      	ldr	r1, [pc, #64]	@ (8001da0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d60:	4313      	orrs	r3, r2
 8001d62:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d64:	f000 f824 	bl	8001db0 <HAL_RCC_GetSysClockFreq>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8001da0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	091b      	lsrs	r3, r3, #4
 8001d70:	f003 030f 	and.w	r3, r3, #15
 8001d74:	490b      	ldr	r1, [pc, #44]	@ (8001da4 <HAL_RCC_ClockConfig+0x1f4>)
 8001d76:	5ccb      	ldrb	r3, [r1, r3]
 8001d78:	f003 031f 	and.w	r3, r3, #31
 8001d7c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d80:	4a09      	ldr	r2, [pc, #36]	@ (8001da8 <HAL_RCC_ClockConfig+0x1f8>)
 8001d82:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d84:	4b09      	ldr	r3, [pc, #36]	@ (8001dac <HAL_RCC_ClockConfig+0x1fc>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7fe ffa9 	bl	8000ce0 <HAL_InitTick>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	72fb      	strb	r3, [r7, #11]

  return status;
 8001d92:	7afb      	ldrb	r3, [r7, #11]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3710      	adds	r7, #16
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	40022000 	.word	0x40022000
 8001da0:	40021000 	.word	0x40021000
 8001da4:	080051a4 	.word	0x080051a4
 8001da8:	20000000 	.word	0x20000000
 8001dac:	20000004 	.word	0x20000004

08001db0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b089      	sub	sp, #36	@ 0x24
 8001db4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001db6:	2300      	movs	r3, #0
 8001db8:	61fb      	str	r3, [r7, #28]
 8001dba:	2300      	movs	r3, #0
 8001dbc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dbe:	4b3e      	ldr	r3, [pc, #248]	@ (8001eb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f003 030c 	and.w	r3, r3, #12
 8001dc6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dc8:	4b3b      	ldr	r3, [pc, #236]	@ (8001eb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	f003 0303 	and.w	r3, r3, #3
 8001dd0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d005      	beq.n	8001de4 <HAL_RCC_GetSysClockFreq+0x34>
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	2b0c      	cmp	r3, #12
 8001ddc:	d121      	bne.n	8001e22 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d11e      	bne.n	8001e22 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001de4:	4b34      	ldr	r3, [pc, #208]	@ (8001eb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0308 	and.w	r3, r3, #8
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d107      	bne.n	8001e00 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001df0:	4b31      	ldr	r3, [pc, #196]	@ (8001eb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001df2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001df6:	0a1b      	lsrs	r3, r3, #8
 8001df8:	f003 030f 	and.w	r3, r3, #15
 8001dfc:	61fb      	str	r3, [r7, #28]
 8001dfe:	e005      	b.n	8001e0c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e00:	4b2d      	ldr	r3, [pc, #180]	@ (8001eb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	091b      	lsrs	r3, r3, #4
 8001e06:	f003 030f 	and.w	r3, r3, #15
 8001e0a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001e0c:	4a2b      	ldr	r2, [pc, #172]	@ (8001ebc <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e14:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d10d      	bne.n	8001e38 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e20:	e00a      	b.n	8001e38 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	2b04      	cmp	r3, #4
 8001e26:	d102      	bne.n	8001e2e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e28:	4b25      	ldr	r3, [pc, #148]	@ (8001ec0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e2a:	61bb      	str	r3, [r7, #24]
 8001e2c:	e004      	b.n	8001e38 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	2b08      	cmp	r3, #8
 8001e32:	d101      	bne.n	8001e38 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e34:	4b23      	ldr	r3, [pc, #140]	@ (8001ec4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e36:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	2b0c      	cmp	r3, #12
 8001e3c:	d134      	bne.n	8001ea8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e3e:	4b1e      	ldr	r3, [pc, #120]	@ (8001eb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	f003 0303 	and.w	r3, r3, #3
 8001e46:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d003      	beq.n	8001e56 <HAL_RCC_GetSysClockFreq+0xa6>
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	2b03      	cmp	r3, #3
 8001e52:	d003      	beq.n	8001e5c <HAL_RCC_GetSysClockFreq+0xac>
 8001e54:	e005      	b.n	8001e62 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e56:	4b1a      	ldr	r3, [pc, #104]	@ (8001ec0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e58:	617b      	str	r3, [r7, #20]
      break;
 8001e5a:	e005      	b.n	8001e68 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e5c:	4b19      	ldr	r3, [pc, #100]	@ (8001ec4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e5e:	617b      	str	r3, [r7, #20]
      break;
 8001e60:	e002      	b.n	8001e68 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	617b      	str	r3, [r7, #20]
      break;
 8001e66:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e68:	4b13      	ldr	r3, [pc, #76]	@ (8001eb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	091b      	lsrs	r3, r3, #4
 8001e6e:	f003 0307 	and.w	r3, r3, #7
 8001e72:	3301      	adds	r3, #1
 8001e74:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e76:	4b10      	ldr	r3, [pc, #64]	@ (8001eb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	0a1b      	lsrs	r3, r3, #8
 8001e7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001e80:	697a      	ldr	r2, [r7, #20]
 8001e82:	fb03 f202 	mul.w	r2, r3, r2
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e8c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8001eb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	0e5b      	lsrs	r3, r3, #25
 8001e94:	f003 0303 	and.w	r3, r3, #3
 8001e98:	3301      	adds	r3, #1
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e9e:	697a      	ldr	r2, [r7, #20]
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001ea8:	69bb      	ldr	r3, [r7, #24]
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3724      	adds	r7, #36	@ 0x24
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	080051bc 	.word	0x080051bc
 8001ec0:	00f42400 	.word	0x00f42400
 8001ec4:	007a1200 	.word	0x007a1200

08001ec8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ecc:	4b03      	ldr	r3, [pc, #12]	@ (8001edc <HAL_RCC_GetHCLKFreq+0x14>)
 8001ece:	681b      	ldr	r3, [r3, #0]
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	20000000 	.word	0x20000000

08001ee0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001ee4:	f7ff fff0 	bl	8001ec8 <HAL_RCC_GetHCLKFreq>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	4b06      	ldr	r3, [pc, #24]	@ (8001f04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	0a1b      	lsrs	r3, r3, #8
 8001ef0:	f003 0307 	and.w	r3, r3, #7
 8001ef4:	4904      	ldr	r1, [pc, #16]	@ (8001f08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ef6:	5ccb      	ldrb	r3, [r1, r3]
 8001ef8:	f003 031f 	and.w	r3, r3, #31
 8001efc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40021000 	.word	0x40021000
 8001f08:	080051b4 	.word	0x080051b4

08001f0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001f10:	f7ff ffda 	bl	8001ec8 <HAL_RCC_GetHCLKFreq>
 8001f14:	4602      	mov	r2, r0
 8001f16:	4b06      	ldr	r3, [pc, #24]	@ (8001f30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	0adb      	lsrs	r3, r3, #11
 8001f1c:	f003 0307 	and.w	r3, r3, #7
 8001f20:	4904      	ldr	r1, [pc, #16]	@ (8001f34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f22:	5ccb      	ldrb	r3, [r1, r3]
 8001f24:	f003 031f 	and.w	r3, r3, #31
 8001f28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40021000 	.word	0x40021000
 8001f34:	080051b4 	.word	0x080051b4

08001f38 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f40:	2300      	movs	r3, #0
 8001f42:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f44:	4b2a      	ldr	r3, [pc, #168]	@ (8001ff0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d003      	beq.n	8001f58 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f50:	f7ff f9ee 	bl	8001330 <HAL_PWREx_GetVoltageRange>
 8001f54:	6178      	str	r0, [r7, #20]
 8001f56:	e014      	b.n	8001f82 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f58:	4b25      	ldr	r3, [pc, #148]	@ (8001ff0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f5c:	4a24      	ldr	r2, [pc, #144]	@ (8001ff0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f62:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f64:	4b22      	ldr	r3, [pc, #136]	@ (8001ff0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f6c:	60fb      	str	r3, [r7, #12]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f70:	f7ff f9de 	bl	8001330 <HAL_PWREx_GetVoltageRange>
 8001f74:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f76:	4b1e      	ldr	r3, [pc, #120]	@ (8001ff0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f7a:	4a1d      	ldr	r2, [pc, #116]	@ (8001ff0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f7c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f80:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f88:	d10b      	bne.n	8001fa2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2b80      	cmp	r3, #128	@ 0x80
 8001f8e:	d919      	bls.n	8001fc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2ba0      	cmp	r3, #160	@ 0xa0
 8001f94:	d902      	bls.n	8001f9c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f96:	2302      	movs	r3, #2
 8001f98:	613b      	str	r3, [r7, #16]
 8001f9a:	e013      	b.n	8001fc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	613b      	str	r3, [r7, #16]
 8001fa0:	e010      	b.n	8001fc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2b80      	cmp	r3, #128	@ 0x80
 8001fa6:	d902      	bls.n	8001fae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001fa8:	2303      	movs	r3, #3
 8001faa:	613b      	str	r3, [r7, #16]
 8001fac:	e00a      	b.n	8001fc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2b80      	cmp	r3, #128	@ 0x80
 8001fb2:	d102      	bne.n	8001fba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	613b      	str	r3, [r7, #16]
 8001fb8:	e004      	b.n	8001fc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2b70      	cmp	r3, #112	@ 0x70
 8001fbe:	d101      	bne.n	8001fc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001fc4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ff4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f023 0207 	bic.w	r2, r3, #7
 8001fcc:	4909      	ldr	r1, [pc, #36]	@ (8001ff4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001fd4:	4b07      	ldr	r3, [pc, #28]	@ (8001ff4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0307 	and.w	r3, r3, #7
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d001      	beq.n	8001fe6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e000      	b.n	8001fe8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3718      	adds	r7, #24
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	40022000 	.word	0x40022000

08001ff8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b086      	sub	sp, #24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002000:	2300      	movs	r3, #0
 8002002:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002004:	2300      	movs	r3, #0
 8002006:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002010:	2b00      	cmp	r3, #0
 8002012:	d041      	beq.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002018:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800201c:	d02a      	beq.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800201e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002022:	d824      	bhi.n	800206e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002024:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002028:	d008      	beq.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800202a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800202e:	d81e      	bhi.n	800206e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002030:	2b00      	cmp	r3, #0
 8002032:	d00a      	beq.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002034:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002038:	d010      	beq.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800203a:	e018      	b.n	800206e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800203c:	4b86      	ldr	r3, [pc, #536]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	4a85      	ldr	r2, [pc, #532]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002042:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002046:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002048:	e015      	b.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	3304      	adds	r3, #4
 800204e:	2100      	movs	r1, #0
 8002050:	4618      	mov	r0, r3
 8002052:	f000 fabb 	bl	80025cc <RCCEx_PLLSAI1_Config>
 8002056:	4603      	mov	r3, r0
 8002058:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800205a:	e00c      	b.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	3320      	adds	r3, #32
 8002060:	2100      	movs	r1, #0
 8002062:	4618      	mov	r0, r3
 8002064:	f000 fba6 	bl	80027b4 <RCCEx_PLLSAI2_Config>
 8002068:	4603      	mov	r3, r0
 800206a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800206c:	e003      	b.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	74fb      	strb	r3, [r7, #19]
      break;
 8002072:	e000      	b.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002074:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002076:	7cfb      	ldrb	r3, [r7, #19]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d10b      	bne.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800207c:	4b76      	ldr	r3, [pc, #472]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800207e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002082:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800208a:	4973      	ldr	r1, [pc, #460]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800208c:	4313      	orrs	r3, r2
 800208e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002092:	e001      	b.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002094:	7cfb      	ldrb	r3, [r7, #19]
 8002096:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d041      	beq.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80020a8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80020ac:	d02a      	beq.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80020ae:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80020b2:	d824      	bhi.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x106>
 80020b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80020b8:	d008      	beq.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80020ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80020be:	d81e      	bhi.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x106>
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d00a      	beq.n	80020da <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80020c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020c8:	d010      	beq.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80020ca:	e018      	b.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80020cc:	4b62      	ldr	r3, [pc, #392]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	4a61      	ldr	r2, [pc, #388]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020d6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020d8:	e015      	b.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	3304      	adds	r3, #4
 80020de:	2100      	movs	r1, #0
 80020e0:	4618      	mov	r0, r3
 80020e2:	f000 fa73 	bl	80025cc <RCCEx_PLLSAI1_Config>
 80020e6:	4603      	mov	r3, r0
 80020e8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020ea:	e00c      	b.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	3320      	adds	r3, #32
 80020f0:	2100      	movs	r1, #0
 80020f2:	4618      	mov	r0, r3
 80020f4:	f000 fb5e 	bl	80027b4 <RCCEx_PLLSAI2_Config>
 80020f8:	4603      	mov	r3, r0
 80020fa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020fc:	e003      	b.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	74fb      	strb	r3, [r7, #19]
      break;
 8002102:	e000      	b.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002104:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002106:	7cfb      	ldrb	r3, [r7, #19]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d10b      	bne.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800210c:	4b52      	ldr	r3, [pc, #328]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800210e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002112:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800211a:	494f      	ldr	r1, [pc, #316]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800211c:	4313      	orrs	r3, r2
 800211e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002122:	e001      	b.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002124:	7cfb      	ldrb	r3, [r7, #19]
 8002126:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002130:	2b00      	cmp	r3, #0
 8002132:	f000 80a0 	beq.w	8002276 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002136:	2300      	movs	r3, #0
 8002138:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800213a:	4b47      	ldr	r3, [pc, #284]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800213c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800213e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d101      	bne.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002146:	2301      	movs	r3, #1
 8002148:	e000      	b.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800214a:	2300      	movs	r3, #0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d00d      	beq.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002150:	4b41      	ldr	r3, [pc, #260]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002152:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002154:	4a40      	ldr	r2, [pc, #256]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002156:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800215a:	6593      	str	r3, [r2, #88]	@ 0x58
 800215c:	4b3e      	ldr	r3, [pc, #248]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800215e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002160:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002164:	60bb      	str	r3, [r7, #8]
 8002166:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002168:	2301      	movs	r3, #1
 800216a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800216c:	4b3b      	ldr	r3, [pc, #236]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a3a      	ldr	r2, [pc, #232]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002172:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002176:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002178:	f7fe fe02 	bl	8000d80 <HAL_GetTick>
 800217c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800217e:	e009      	b.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002180:	f7fe fdfe 	bl	8000d80 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	2b02      	cmp	r3, #2
 800218c:	d902      	bls.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	74fb      	strb	r3, [r7, #19]
        break;
 8002192:	e005      	b.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002194:	4b31      	ldr	r3, [pc, #196]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800219c:	2b00      	cmp	r3, #0
 800219e:	d0ef      	beq.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80021a0:	7cfb      	ldrb	r3, [r7, #19]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d15c      	bne.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80021a6:	4b2c      	ldr	r3, [pc, #176]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021b0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d01f      	beq.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80021be:	697a      	ldr	r2, [r7, #20]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d019      	beq.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80021c4:	4b24      	ldr	r3, [pc, #144]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021ce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80021d0:	4b21      	ldr	r3, [pc, #132]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021d6:	4a20      	ldr	r2, [pc, #128]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80021e0:	4b1d      	ldr	r3, [pc, #116]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021e6:	4a1c      	ldr	r2, [pc, #112]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80021f0:	4a19      	ldr	r2, [pc, #100]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d016      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002202:	f7fe fdbd 	bl	8000d80 <HAL_GetTick>
 8002206:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002208:	e00b      	b.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800220a:	f7fe fdb9 	bl	8000d80 <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002218:	4293      	cmp	r3, r2
 800221a:	d902      	bls.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	74fb      	strb	r3, [r7, #19]
            break;
 8002220:	e006      	b.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002222:	4b0d      	ldr	r3, [pc, #52]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002224:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002228:	f003 0302 	and.w	r3, r3, #2
 800222c:	2b00      	cmp	r3, #0
 800222e:	d0ec      	beq.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002230:	7cfb      	ldrb	r3, [r7, #19]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d10c      	bne.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002236:	4b08      	ldr	r3, [pc, #32]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002238:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800223c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002246:	4904      	ldr	r1, [pc, #16]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002248:	4313      	orrs	r3, r2
 800224a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800224e:	e009      	b.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002250:	7cfb      	ldrb	r3, [r7, #19]
 8002252:	74bb      	strb	r3, [r7, #18]
 8002254:	e006      	b.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002256:	bf00      	nop
 8002258:	40021000 	.word	0x40021000
 800225c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002260:	7cfb      	ldrb	r3, [r7, #19]
 8002262:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002264:	7c7b      	ldrb	r3, [r7, #17]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d105      	bne.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800226a:	4b9e      	ldr	r3, [pc, #632]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800226c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800226e:	4a9d      	ldr	r2, [pc, #628]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002270:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002274:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00a      	beq.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002282:	4b98      	ldr	r3, [pc, #608]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002284:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002288:	f023 0203 	bic.w	r2, r3, #3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002290:	4994      	ldr	r1, [pc, #592]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002292:	4313      	orrs	r3, r2
 8002294:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0302 	and.w	r3, r3, #2
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d00a      	beq.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022a4:	4b8f      	ldr	r3, [pc, #572]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022aa:	f023 020c 	bic.w	r2, r3, #12
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022b2:	498c      	ldr	r1, [pc, #560]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0304 	and.w	r3, r3, #4
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d00a      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80022c6:	4b87      	ldr	r3, [pc, #540]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022cc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d4:	4983      	ldr	r1, [pc, #524]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0308 	and.w	r3, r3, #8
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d00a      	beq.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80022e8:	4b7e      	ldr	r3, [pc, #504]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022ee:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022f6:	497b      	ldr	r1, [pc, #492]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0310 	and.w	r3, r3, #16
 8002306:	2b00      	cmp	r3, #0
 8002308:	d00a      	beq.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800230a:	4b76      	ldr	r3, [pc, #472]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800230c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002310:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002318:	4972      	ldr	r1, [pc, #456]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800231a:	4313      	orrs	r3, r2
 800231c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0320 	and.w	r3, r3, #32
 8002328:	2b00      	cmp	r3, #0
 800232a:	d00a      	beq.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800232c:	4b6d      	ldr	r3, [pc, #436]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800232e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002332:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800233a:	496a      	ldr	r1, [pc, #424]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800233c:	4313      	orrs	r3, r2
 800233e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800234a:	2b00      	cmp	r3, #0
 800234c:	d00a      	beq.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800234e:	4b65      	ldr	r3, [pc, #404]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002350:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002354:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800235c:	4961      	ldr	r1, [pc, #388]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800235e:	4313      	orrs	r3, r2
 8002360:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800236c:	2b00      	cmp	r3, #0
 800236e:	d00a      	beq.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002370:	4b5c      	ldr	r3, [pc, #368]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002372:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002376:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800237e:	4959      	ldr	r1, [pc, #356]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002380:	4313      	orrs	r3, r2
 8002382:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800238e:	2b00      	cmp	r3, #0
 8002390:	d00a      	beq.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002392:	4b54      	ldr	r3, [pc, #336]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002394:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002398:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023a0:	4950      	ldr	r1, [pc, #320]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023a2:	4313      	orrs	r3, r2
 80023a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d00a      	beq.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80023b4:	4b4b      	ldr	r3, [pc, #300]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023ba:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023c2:	4948      	ldr	r1, [pc, #288]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d00a      	beq.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023d6:	4b43      	ldr	r3, [pc, #268]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023dc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023e4:	493f      	ldr	r1, [pc, #252]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023e6:	4313      	orrs	r3, r2
 80023e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d028      	beq.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023f8:	4b3a      	ldr	r3, [pc, #232]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023fe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002406:	4937      	ldr	r1, [pc, #220]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002408:	4313      	orrs	r3, r2
 800240a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002412:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002416:	d106      	bne.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002418:	4b32      	ldr	r3, [pc, #200]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	4a31      	ldr	r2, [pc, #196]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800241e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002422:	60d3      	str	r3, [r2, #12]
 8002424:	e011      	b.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800242a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800242e:	d10c      	bne.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3304      	adds	r3, #4
 8002434:	2101      	movs	r1, #1
 8002436:	4618      	mov	r0, r3
 8002438:	f000 f8c8 	bl	80025cc <RCCEx_PLLSAI1_Config>
 800243c:	4603      	mov	r3, r0
 800243e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002440:	7cfb      	ldrb	r3, [r7, #19]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002446:	7cfb      	ldrb	r3, [r7, #19]
 8002448:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d028      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002456:	4b23      	ldr	r3, [pc, #140]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002458:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800245c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002464:	491f      	ldr	r1, [pc, #124]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002466:	4313      	orrs	r3, r2
 8002468:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002470:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002474:	d106      	bne.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002476:	4b1b      	ldr	r3, [pc, #108]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	4a1a      	ldr	r2, [pc, #104]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800247c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002480:	60d3      	str	r3, [r2, #12]
 8002482:	e011      	b.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002488:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800248c:	d10c      	bne.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	3304      	adds	r3, #4
 8002492:	2101      	movs	r1, #1
 8002494:	4618      	mov	r0, r3
 8002496:	f000 f899 	bl	80025cc <RCCEx_PLLSAI1_Config>
 800249a:	4603      	mov	r3, r0
 800249c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800249e:	7cfb      	ldrb	r3, [r7, #19]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80024a4:	7cfb      	ldrb	r3, [r7, #19]
 80024a6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d02b      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80024b4:	4b0b      	ldr	r3, [pc, #44]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024ba:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024c2:	4908      	ldr	r1, [pc, #32]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80024d2:	d109      	bne.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024d4:	4b03      	ldr	r3, [pc, #12]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	4a02      	ldr	r2, [pc, #8]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80024de:	60d3      	str	r3, [r2, #12]
 80024e0:	e014      	b.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x514>
 80024e2:	bf00      	nop
 80024e4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024ec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80024f0:	d10c      	bne.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	3304      	adds	r3, #4
 80024f6:	2101      	movs	r1, #1
 80024f8:	4618      	mov	r0, r3
 80024fa:	f000 f867 	bl	80025cc <RCCEx_PLLSAI1_Config>
 80024fe:	4603      	mov	r3, r0
 8002500:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002502:	7cfb      	ldrb	r3, [r7, #19]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002508:	7cfb      	ldrb	r3, [r7, #19]
 800250a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d02f      	beq.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002518:	4b2b      	ldr	r3, [pc, #172]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800251a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800251e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002526:	4928      	ldr	r1, [pc, #160]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002528:	4313      	orrs	r3, r2
 800252a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002532:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002536:	d10d      	bne.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	3304      	adds	r3, #4
 800253c:	2102      	movs	r1, #2
 800253e:	4618      	mov	r0, r3
 8002540:	f000 f844 	bl	80025cc <RCCEx_PLLSAI1_Config>
 8002544:	4603      	mov	r3, r0
 8002546:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002548:	7cfb      	ldrb	r3, [r7, #19]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d014      	beq.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800254e:	7cfb      	ldrb	r3, [r7, #19]
 8002550:	74bb      	strb	r3, [r7, #18]
 8002552:	e011      	b.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002558:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800255c:	d10c      	bne.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	3320      	adds	r3, #32
 8002562:	2102      	movs	r1, #2
 8002564:	4618      	mov	r0, r3
 8002566:	f000 f925 	bl	80027b4 <RCCEx_PLLSAI2_Config>
 800256a:	4603      	mov	r3, r0
 800256c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800256e:	7cfb      	ldrb	r3, [r7, #19]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002574:	7cfb      	ldrb	r3, [r7, #19]
 8002576:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d00a      	beq.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002584:	4b10      	ldr	r3, [pc, #64]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002586:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800258a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002592:	490d      	ldr	r1, [pc, #52]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002594:	4313      	orrs	r3, r2
 8002596:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d00b      	beq.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80025a6:	4b08      	ldr	r3, [pc, #32]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025ac:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80025b6:	4904      	ldr	r1, [pc, #16]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80025be:	7cbb      	ldrb	r3, [r7, #18]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3718      	adds	r7, #24
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40021000 	.word	0x40021000

080025cc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80025d6:	2300      	movs	r3, #0
 80025d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80025da:	4b75      	ldr	r3, [pc, #468]	@ (80027b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	f003 0303 	and.w	r3, r3, #3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d018      	beq.n	8002618 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80025e6:	4b72      	ldr	r3, [pc, #456]	@ (80027b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	f003 0203 	and.w	r2, r3, #3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d10d      	bne.n	8002612 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
       ||
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d009      	beq.n	8002612 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80025fe:	4b6c      	ldr	r3, [pc, #432]	@ (80027b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	091b      	lsrs	r3, r3, #4
 8002604:	f003 0307 	and.w	r3, r3, #7
 8002608:	1c5a      	adds	r2, r3, #1
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
       ||
 800260e:	429a      	cmp	r2, r3
 8002610:	d047      	beq.n	80026a2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	73fb      	strb	r3, [r7, #15]
 8002616:	e044      	b.n	80026a2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2b03      	cmp	r3, #3
 800261e:	d018      	beq.n	8002652 <RCCEx_PLLSAI1_Config+0x86>
 8002620:	2b03      	cmp	r3, #3
 8002622:	d825      	bhi.n	8002670 <RCCEx_PLLSAI1_Config+0xa4>
 8002624:	2b01      	cmp	r3, #1
 8002626:	d002      	beq.n	800262e <RCCEx_PLLSAI1_Config+0x62>
 8002628:	2b02      	cmp	r3, #2
 800262a:	d009      	beq.n	8002640 <RCCEx_PLLSAI1_Config+0x74>
 800262c:	e020      	b.n	8002670 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800262e:	4b60      	ldr	r3, [pc, #384]	@ (80027b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d11d      	bne.n	8002676 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800263e:	e01a      	b.n	8002676 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002640:	4b5b      	ldr	r3, [pc, #364]	@ (80027b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002648:	2b00      	cmp	r3, #0
 800264a:	d116      	bne.n	800267a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002650:	e013      	b.n	800267a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002652:	4b57      	ldr	r3, [pc, #348]	@ (80027b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d10f      	bne.n	800267e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800265e:	4b54      	ldr	r3, [pc, #336]	@ (80027b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d109      	bne.n	800267e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800266e:	e006      	b.n	800267e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	73fb      	strb	r3, [r7, #15]
      break;
 8002674:	e004      	b.n	8002680 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002676:	bf00      	nop
 8002678:	e002      	b.n	8002680 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800267a:	bf00      	nop
 800267c:	e000      	b.n	8002680 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800267e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002680:	7bfb      	ldrb	r3, [r7, #15]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d10d      	bne.n	80026a2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002686:	4b4a      	ldr	r3, [pc, #296]	@ (80027b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6819      	ldr	r1, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	3b01      	subs	r3, #1
 8002698:	011b      	lsls	r3, r3, #4
 800269a:	430b      	orrs	r3, r1
 800269c:	4944      	ldr	r1, [pc, #272]	@ (80027b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80026a2:	7bfb      	ldrb	r3, [r7, #15]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d17d      	bne.n	80027a4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80026a8:	4b41      	ldr	r3, [pc, #260]	@ (80027b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a40      	ldr	r2, [pc, #256]	@ (80027b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026ae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80026b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026b4:	f7fe fb64 	bl	8000d80 <HAL_GetTick>
 80026b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80026ba:	e009      	b.n	80026d0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026bc:	f7fe fb60 	bl	8000d80 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d902      	bls.n	80026d0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	73fb      	strb	r3, [r7, #15]
        break;
 80026ce:	e005      	b.n	80026dc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80026d0:	4b37      	ldr	r3, [pc, #220]	@ (80027b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d1ef      	bne.n	80026bc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80026dc:	7bfb      	ldrb	r3, [r7, #15]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d160      	bne.n	80027a4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d111      	bne.n	800270c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026e8:	4b31      	ldr	r3, [pc, #196]	@ (80027b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80026f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	6892      	ldr	r2, [r2, #8]
 80026f8:	0211      	lsls	r1, r2, #8
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	68d2      	ldr	r2, [r2, #12]
 80026fe:	0912      	lsrs	r2, r2, #4
 8002700:	0452      	lsls	r2, r2, #17
 8002702:	430a      	orrs	r2, r1
 8002704:	492a      	ldr	r1, [pc, #168]	@ (80027b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002706:	4313      	orrs	r3, r2
 8002708:	610b      	str	r3, [r1, #16]
 800270a:	e027      	b.n	800275c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d112      	bne.n	8002738 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002712:	4b27      	ldr	r3, [pc, #156]	@ (80027b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800271a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	6892      	ldr	r2, [r2, #8]
 8002722:	0211      	lsls	r1, r2, #8
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	6912      	ldr	r2, [r2, #16]
 8002728:	0852      	lsrs	r2, r2, #1
 800272a:	3a01      	subs	r2, #1
 800272c:	0552      	lsls	r2, r2, #21
 800272e:	430a      	orrs	r2, r1
 8002730:	491f      	ldr	r1, [pc, #124]	@ (80027b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002732:	4313      	orrs	r3, r2
 8002734:	610b      	str	r3, [r1, #16]
 8002736:	e011      	b.n	800275c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002738:	4b1d      	ldr	r3, [pc, #116]	@ (80027b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002740:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	6892      	ldr	r2, [r2, #8]
 8002748:	0211      	lsls	r1, r2, #8
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	6952      	ldr	r2, [r2, #20]
 800274e:	0852      	lsrs	r2, r2, #1
 8002750:	3a01      	subs	r2, #1
 8002752:	0652      	lsls	r2, r2, #25
 8002754:	430a      	orrs	r2, r1
 8002756:	4916      	ldr	r1, [pc, #88]	@ (80027b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002758:	4313      	orrs	r3, r2
 800275a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800275c:	4b14      	ldr	r3, [pc, #80]	@ (80027b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a13      	ldr	r2, [pc, #76]	@ (80027b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002762:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002766:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002768:	f7fe fb0a 	bl	8000d80 <HAL_GetTick>
 800276c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800276e:	e009      	b.n	8002784 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002770:	f7fe fb06 	bl	8000d80 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d902      	bls.n	8002784 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	73fb      	strb	r3, [r7, #15]
          break;
 8002782:	e005      	b.n	8002790 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002784:	4b0a      	ldr	r3, [pc, #40]	@ (80027b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d0ef      	beq.n	8002770 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002790:	7bfb      	ldrb	r3, [r7, #15]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d106      	bne.n	80027a4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002796:	4b06      	ldr	r3, [pc, #24]	@ (80027b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002798:	691a      	ldr	r2, [r3, #16]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	4904      	ldr	r1, [pc, #16]	@ (80027b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80027a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	40021000 	.word	0x40021000

080027b4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80027be:	2300      	movs	r3, #0
 80027c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80027c2:	4b6a      	ldr	r3, [pc, #424]	@ (800296c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	f003 0303 	and.w	r3, r3, #3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d018      	beq.n	8002800 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80027ce:	4b67      	ldr	r3, [pc, #412]	@ (800296c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	f003 0203 	and.w	r2, r3, #3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d10d      	bne.n	80027fa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
       ||
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d009      	beq.n	80027fa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80027e6:	4b61      	ldr	r3, [pc, #388]	@ (800296c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	091b      	lsrs	r3, r3, #4
 80027ec:	f003 0307 	and.w	r3, r3, #7
 80027f0:	1c5a      	adds	r2, r3, #1
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
       ||
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d047      	beq.n	800288a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	73fb      	strb	r3, [r7, #15]
 80027fe:	e044      	b.n	800288a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2b03      	cmp	r3, #3
 8002806:	d018      	beq.n	800283a <RCCEx_PLLSAI2_Config+0x86>
 8002808:	2b03      	cmp	r3, #3
 800280a:	d825      	bhi.n	8002858 <RCCEx_PLLSAI2_Config+0xa4>
 800280c:	2b01      	cmp	r3, #1
 800280e:	d002      	beq.n	8002816 <RCCEx_PLLSAI2_Config+0x62>
 8002810:	2b02      	cmp	r3, #2
 8002812:	d009      	beq.n	8002828 <RCCEx_PLLSAI2_Config+0x74>
 8002814:	e020      	b.n	8002858 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002816:	4b55      	ldr	r3, [pc, #340]	@ (800296c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d11d      	bne.n	800285e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002826:	e01a      	b.n	800285e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002828:	4b50      	ldr	r3, [pc, #320]	@ (800296c <RCCEx_PLLSAI2_Config+0x1b8>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002830:	2b00      	cmp	r3, #0
 8002832:	d116      	bne.n	8002862 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002838:	e013      	b.n	8002862 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800283a:	4b4c      	ldr	r3, [pc, #304]	@ (800296c <RCCEx_PLLSAI2_Config+0x1b8>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d10f      	bne.n	8002866 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002846:	4b49      	ldr	r3, [pc, #292]	@ (800296c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d109      	bne.n	8002866 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002856:	e006      	b.n	8002866 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	73fb      	strb	r3, [r7, #15]
      break;
 800285c:	e004      	b.n	8002868 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800285e:	bf00      	nop
 8002860:	e002      	b.n	8002868 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002862:	bf00      	nop
 8002864:	e000      	b.n	8002868 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002866:	bf00      	nop
    }

    if(status == HAL_OK)
 8002868:	7bfb      	ldrb	r3, [r7, #15]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d10d      	bne.n	800288a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800286e:	4b3f      	ldr	r3, [pc, #252]	@ (800296c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6819      	ldr	r1, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	3b01      	subs	r3, #1
 8002880:	011b      	lsls	r3, r3, #4
 8002882:	430b      	orrs	r3, r1
 8002884:	4939      	ldr	r1, [pc, #228]	@ (800296c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002886:	4313      	orrs	r3, r2
 8002888:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800288a:	7bfb      	ldrb	r3, [r7, #15]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d167      	bne.n	8002960 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002890:	4b36      	ldr	r3, [pc, #216]	@ (800296c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a35      	ldr	r2, [pc, #212]	@ (800296c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002896:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800289a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800289c:	f7fe fa70 	bl	8000d80 <HAL_GetTick>
 80028a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80028a2:	e009      	b.n	80028b8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80028a4:	f7fe fa6c 	bl	8000d80 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d902      	bls.n	80028b8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	73fb      	strb	r3, [r7, #15]
        break;
 80028b6:	e005      	b.n	80028c4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80028b8:	4b2c      	ldr	r3, [pc, #176]	@ (800296c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d1ef      	bne.n	80028a4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80028c4:	7bfb      	ldrb	r3, [r7, #15]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d14a      	bne.n	8002960 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d111      	bne.n	80028f4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80028d0:	4b26      	ldr	r3, [pc, #152]	@ (800296c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028d2:	695b      	ldr	r3, [r3, #20]
 80028d4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80028d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	6892      	ldr	r2, [r2, #8]
 80028e0:	0211      	lsls	r1, r2, #8
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	68d2      	ldr	r2, [r2, #12]
 80028e6:	0912      	lsrs	r2, r2, #4
 80028e8:	0452      	lsls	r2, r2, #17
 80028ea:	430a      	orrs	r2, r1
 80028ec:	491f      	ldr	r1, [pc, #124]	@ (800296c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	614b      	str	r3, [r1, #20]
 80028f2:	e011      	b.n	8002918 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80028f4:	4b1d      	ldr	r3, [pc, #116]	@ (800296c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028f6:	695b      	ldr	r3, [r3, #20]
 80028f8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80028fc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	6892      	ldr	r2, [r2, #8]
 8002904:	0211      	lsls	r1, r2, #8
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	6912      	ldr	r2, [r2, #16]
 800290a:	0852      	lsrs	r2, r2, #1
 800290c:	3a01      	subs	r2, #1
 800290e:	0652      	lsls	r2, r2, #25
 8002910:	430a      	orrs	r2, r1
 8002912:	4916      	ldr	r1, [pc, #88]	@ (800296c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002914:	4313      	orrs	r3, r2
 8002916:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002918:	4b14      	ldr	r3, [pc, #80]	@ (800296c <RCCEx_PLLSAI2_Config+0x1b8>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a13      	ldr	r2, [pc, #76]	@ (800296c <RCCEx_PLLSAI2_Config+0x1b8>)
 800291e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002922:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002924:	f7fe fa2c 	bl	8000d80 <HAL_GetTick>
 8002928:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800292a:	e009      	b.n	8002940 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800292c:	f7fe fa28 	bl	8000d80 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d902      	bls.n	8002940 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	73fb      	strb	r3, [r7, #15]
          break;
 800293e:	e005      	b.n	800294c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002940:	4b0a      	ldr	r3, [pc, #40]	@ (800296c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d0ef      	beq.n	800292c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800294c:	7bfb      	ldrb	r3, [r7, #15]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d106      	bne.n	8002960 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002952:	4b06      	ldr	r3, [pc, #24]	@ (800296c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002954:	695a      	ldr	r2, [r3, #20]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	4904      	ldr	r1, [pc, #16]	@ (800296c <RCCEx_PLLSAI2_Config+0x1b8>)
 800295c:	4313      	orrs	r3, r2
 800295e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002960:	7bfb      	ldrb	r3, [r7, #15]
}
 8002962:	4618      	mov	r0, r3
 8002964:	3710      	adds	r7, #16
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	40021000 	.word	0x40021000

08002970 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d101      	bne.n	8002982 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e095      	b.n	8002aae <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002986:	2b00      	cmp	r3, #0
 8002988:	d108      	bne.n	800299c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002992:	d009      	beq.n	80029a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	61da      	str	r2, [r3, #28]
 800299a:	e005      	b.n	80029a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d106      	bne.n	80029c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f7fd ffc8 	bl	8000958 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2202      	movs	r2, #2
 80029cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80029de:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80029e8:	d902      	bls.n	80029f0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80029ea:	2300      	movs	r3, #0
 80029ec:	60fb      	str	r3, [r7, #12]
 80029ee:	e002      	b.n	80029f6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80029f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029f4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80029fe:	d007      	beq.n	8002a10 <HAL_SPI_Init+0xa0>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002a08:	d002      	beq.n	8002a10 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002a20:	431a      	orrs	r2, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	431a      	orrs	r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	695b      	ldr	r3, [r3, #20]
 8002a30:	f003 0301 	and.w	r3, r3, #1
 8002a34:	431a      	orrs	r2, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a3e:	431a      	orrs	r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	69db      	ldr	r3, [r3, #28]
 8002a44:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a48:	431a      	orrs	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a1b      	ldr	r3, [r3, #32]
 8002a4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a52:	ea42 0103 	orr.w	r1, r2, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a5a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	430a      	orrs	r2, r1
 8002a64:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	0c1b      	lsrs	r3, r3, #16
 8002a6c:	f003 0204 	and.w	r2, r3, #4
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a74:	f003 0310 	and.w	r3, r3, #16
 8002a78:	431a      	orrs	r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a7e:	f003 0308 	and.w	r3, r3, #8
 8002a82:	431a      	orrs	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002a8c:	ea42 0103 	orr.w	r1, r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3710      	adds	r7, #16
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b088      	sub	sp, #32
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	60f8      	str	r0, [r7, #12]
 8002abe:	60b9      	str	r1, [r7, #8]
 8002ac0:	603b      	str	r3, [r7, #0]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ac6:	f7fe f95b 	bl	8000d80 <HAL_GetTick>
 8002aca:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002acc:	88fb      	ldrh	r3, [r7, #6]
 8002ace:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d001      	beq.n	8002ae0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002adc:	2302      	movs	r3, #2
 8002ade:	e15c      	b.n	8002d9a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d002      	beq.n	8002aec <HAL_SPI_Transmit+0x36>
 8002ae6:	88fb      	ldrh	r3, [r7, #6]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d101      	bne.n	8002af0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e154      	b.n	8002d9a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d101      	bne.n	8002afe <HAL_SPI_Transmit+0x48>
 8002afa:	2302      	movs	r3, #2
 8002afc:	e14d      	b.n	8002d9a <HAL_SPI_Transmit+0x2e4>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2203      	movs	r2, #3
 8002b0a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2200      	movs	r2, #0
 8002b12:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	68ba      	ldr	r2, [r7, #8]
 8002b18:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	88fa      	ldrh	r2, [r7, #6]
 8002b1e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	88fa      	ldrh	r2, [r7, #6]
 8002b24:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2200      	movs	r2, #0
 8002b46:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b50:	d10f      	bne.n	8002b72 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b60:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002b70:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b7c:	2b40      	cmp	r3, #64	@ 0x40
 8002b7e:	d007      	beq.n	8002b90 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b8e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002b98:	d952      	bls.n	8002c40 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d002      	beq.n	8002ba8 <HAL_SPI_Transmit+0xf2>
 8002ba2:	8b7b      	ldrh	r3, [r7, #26]
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d145      	bne.n	8002c34 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bac:	881a      	ldrh	r2, [r3, #0]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bb8:	1c9a      	adds	r2, r3, #2
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002bcc:	e032      	b.n	8002c34 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f003 0302 	and.w	r3, r3, #2
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d112      	bne.n	8002c02 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002be0:	881a      	ldrh	r2, [r3, #0]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bec:	1c9a      	adds	r2, r3, #2
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	3b01      	subs	r3, #1
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002c00:	e018      	b.n	8002c34 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c02:	f7fe f8bd 	bl	8000d80 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	683a      	ldr	r2, [r7, #0]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d803      	bhi.n	8002c1a <HAL_SPI_Transmit+0x164>
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c18:	d102      	bne.n	8002c20 <HAL_SPI_Transmit+0x16a>
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d109      	bne.n	8002c34 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e0b2      	b.n	8002d9a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d1c7      	bne.n	8002bce <HAL_SPI_Transmit+0x118>
 8002c3e:	e083      	b.n	8002d48 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d002      	beq.n	8002c4e <HAL_SPI_Transmit+0x198>
 8002c48:	8b7b      	ldrh	r3, [r7, #26]
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d177      	bne.n	8002d3e <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d912      	bls.n	8002c7e <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c5c:	881a      	ldrh	r2, [r3, #0]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c68:	1c9a      	adds	r2, r3, #2
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	3b02      	subs	r3, #2
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002c7c:	e05f      	b.n	8002d3e <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	330c      	adds	r3, #12
 8002c88:	7812      	ldrb	r2, [r2, #0]
 8002c8a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c90:	1c5a      	adds	r2, r3, #1
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	b29a      	uxth	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002ca4:	e04b      	b.n	8002d3e <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f003 0302 	and.w	r3, r3, #2
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d12b      	bne.n	8002d0c <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d912      	bls.n	8002ce4 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cc2:	881a      	ldrh	r2, [r3, #0]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cce:	1c9a      	adds	r2, r3, #2
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	3b02      	subs	r3, #2
 8002cdc:	b29a      	uxth	r2, r3
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002ce2:	e02c      	b.n	8002d3e <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	330c      	adds	r3, #12
 8002cee:	7812      	ldrb	r2, [r2, #0]
 8002cf0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cf6:	1c5a      	adds	r2, r3, #1
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	3b01      	subs	r3, #1
 8002d04:	b29a      	uxth	r2, r3
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002d0a:	e018      	b.n	8002d3e <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d0c:	f7fe f838 	bl	8000d80 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	683a      	ldr	r2, [r7, #0]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d803      	bhi.n	8002d24 <HAL_SPI_Transmit+0x26e>
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d22:	d102      	bne.n	8002d2a <HAL_SPI_Transmit+0x274>
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d109      	bne.n	8002d3e <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e02d      	b.n	8002d9a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d1ae      	bne.n	8002ca6 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d48:	69fa      	ldr	r2, [r7, #28]
 8002d4a:	6839      	ldr	r1, [r7, #0]
 8002d4c:	68f8      	ldr	r0, [r7, #12]
 8002d4e:	f000 fcf5 	bl	800373c <SPI_EndRxTxTransaction>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d002      	beq.n	8002d5e <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2220      	movs	r2, #32
 8002d5c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d10a      	bne.n	8002d7c <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d66:	2300      	movs	r3, #0
 8002d68:	617b      	str	r3, [r7, #20]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	617b      	str	r3, [r7, #20]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	617b      	str	r3, [r7, #20]
 8002d7a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e000      	b.n	8002d9a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8002d98:	2300      	movs	r3, #0
  }
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3720      	adds	r7, #32
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b088      	sub	sp, #32
 8002da6:	af02      	add	r7, sp, #8
 8002da8:	60f8      	str	r0, [r7, #12]
 8002daa:	60b9      	str	r1, [r7, #8]
 8002dac:	603b      	str	r3, [r7, #0]
 8002dae:	4613      	mov	r3, r2
 8002db0:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d001      	beq.n	8002dc2 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	e123      	b.n	800300a <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002dca:	d112      	bne.n	8002df2 <HAL_SPI_Receive+0x50>
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d10e      	bne.n	8002df2 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2204      	movs	r2, #4
 8002dd8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002ddc:	88fa      	ldrh	r2, [r7, #6]
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	9300      	str	r3, [sp, #0]
 8002de2:	4613      	mov	r3, r2
 8002de4:	68ba      	ldr	r2, [r7, #8]
 8002de6:	68b9      	ldr	r1, [r7, #8]
 8002de8:	68f8      	ldr	r0, [r7, #12]
 8002dea:	f000 f912 	bl	8003012 <HAL_SPI_TransmitReceive>
 8002dee:	4603      	mov	r3, r0
 8002df0:	e10b      	b.n	800300a <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002df2:	f7fd ffc5 	bl	8000d80 <HAL_GetTick>
 8002df6:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d002      	beq.n	8002e04 <HAL_SPI_Receive+0x62>
 8002dfe:	88fb      	ldrh	r3, [r7, #6]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d101      	bne.n	8002e08 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e100      	b.n	800300a <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d101      	bne.n	8002e16 <HAL_SPI_Receive+0x74>
 8002e12:	2302      	movs	r3, #2
 8002e14:	e0f9      	b.n	800300a <HAL_SPI_Receive+0x268>
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2204      	movs	r2, #4
 8002e22:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	68ba      	ldr	r2, [r7, #8]
 8002e30:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	88fa      	ldrh	r2, [r7, #6]
 8002e36:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	88fa      	ldrh	r2, [r7, #6]
 8002e3e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2200      	movs	r2, #0
 8002e46:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2200      	movs	r2, #0
 8002e58:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002e68:	d908      	bls.n	8002e7c <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	685a      	ldr	r2, [r3, #4]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002e78:	605a      	str	r2, [r3, #4]
 8002e7a:	e007      	b.n	8002e8c <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	685a      	ldr	r2, [r3, #4]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002e8a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e94:	d10f      	bne.n	8002eb6 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ea4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002eb4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ec0:	2b40      	cmp	r3, #64	@ 0x40
 8002ec2:	d007      	beq.n	8002ed4 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002ed2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002edc:	d875      	bhi.n	8002fca <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002ede:	e037      	b.n	8002f50 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d117      	bne.n	8002f1e <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f103 020c 	add.w	r2, r3, #12
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002efa:	7812      	ldrb	r2, [r2, #0]
 8002efc:	b2d2      	uxtb	r2, r2
 8002efe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f04:	1c5a      	adds	r2, r3, #1
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	3b01      	subs	r3, #1
 8002f14:	b29a      	uxth	r2, r3
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8002f1c:	e018      	b.n	8002f50 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f1e:	f7fd ff2f 	bl	8000d80 <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d803      	bhi.n	8002f36 <HAL_SPI_Receive+0x194>
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f34:	d102      	bne.n	8002f3c <HAL_SPI_Receive+0x19a>
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d109      	bne.n	8002f50 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e05c      	b.n	800300a <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d1c1      	bne.n	8002ee0 <HAL_SPI_Receive+0x13e>
 8002f5c:	e03b      	b.n	8002fd6 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f003 0301 	and.w	r3, r3, #1
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d115      	bne.n	8002f98 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68da      	ldr	r2, [r3, #12]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f76:	b292      	uxth	r2, r2
 8002f78:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f7e:	1c9a      	adds	r2, r3, #2
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	3b01      	subs	r3, #1
 8002f8e:	b29a      	uxth	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8002f96:	e018      	b.n	8002fca <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f98:	f7fd fef2 	bl	8000d80 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	683a      	ldr	r2, [r7, #0]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d803      	bhi.n	8002fb0 <HAL_SPI_Receive+0x20e>
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fae:	d102      	bne.n	8002fb6 <HAL_SPI_Receive+0x214>
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d109      	bne.n	8002fca <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e01f      	b.n	800300a <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1c3      	bne.n	8002f5e <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002fd6:	697a      	ldr	r2, [r7, #20]
 8002fd8:	6839      	ldr	r1, [r7, #0]
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f000 fb56 	bl	800368c <SPI_EndRxTransaction>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d002      	beq.n	8002fec <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2220      	movs	r2, #32
 8002fea:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003000:	2b00      	cmp	r3, #0
 8003002:	d001      	beq.n	8003008 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e000      	b.n	800300a <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8003008:	2300      	movs	r3, #0
  }
}
 800300a:	4618      	mov	r0, r3
 800300c:	3718      	adds	r7, #24
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}

08003012 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003012:	b580      	push	{r7, lr}
 8003014:	b08a      	sub	sp, #40	@ 0x28
 8003016:	af00      	add	r7, sp, #0
 8003018:	60f8      	str	r0, [r7, #12]
 800301a:	60b9      	str	r1, [r7, #8]
 800301c:	607a      	str	r2, [r7, #4]
 800301e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003020:	2301      	movs	r3, #1
 8003022:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003024:	f7fd feac 	bl	8000d80 <HAL_GetTick>
 8003028:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003030:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003038:	887b      	ldrh	r3, [r7, #2]
 800303a:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800303c:	887b      	ldrh	r3, [r7, #2]
 800303e:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003040:	7ffb      	ldrb	r3, [r7, #31]
 8003042:	2b01      	cmp	r3, #1
 8003044:	d00c      	beq.n	8003060 <HAL_SPI_TransmitReceive+0x4e>
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800304c:	d106      	bne.n	800305c <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d102      	bne.n	800305c <HAL_SPI_TransmitReceive+0x4a>
 8003056:	7ffb      	ldrb	r3, [r7, #31]
 8003058:	2b04      	cmp	r3, #4
 800305a:	d001      	beq.n	8003060 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800305c:	2302      	movs	r3, #2
 800305e:	e1f3      	b.n	8003448 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d005      	beq.n	8003072 <HAL_SPI_TransmitReceive+0x60>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d002      	beq.n	8003072 <HAL_SPI_TransmitReceive+0x60>
 800306c:	887b      	ldrh	r3, [r7, #2]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d101      	bne.n	8003076 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e1e8      	b.n	8003448 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800307c:	2b01      	cmp	r3, #1
 800307e:	d101      	bne.n	8003084 <HAL_SPI_TransmitReceive+0x72>
 8003080:	2302      	movs	r3, #2
 8003082:	e1e1      	b.n	8003448 <HAL_SPI_TransmitReceive+0x436>
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003092:	b2db      	uxtb	r3, r3
 8003094:	2b04      	cmp	r3, #4
 8003096:	d003      	beq.n	80030a0 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2205      	movs	r2, #5
 800309c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2200      	movs	r2, #0
 80030a4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	887a      	ldrh	r2, [r7, #2]
 80030b0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	887a      	ldrh	r2, [r7, #2]
 80030b8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	68ba      	ldr	r2, [r7, #8]
 80030c0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	887a      	ldrh	r2, [r7, #2]
 80030c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	887a      	ldrh	r2, [r7, #2]
 80030cc:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80030e2:	d802      	bhi.n	80030ea <HAL_SPI_TransmitReceive+0xd8>
 80030e4:	8abb      	ldrh	r3, [r7, #20]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d908      	bls.n	80030fc <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	685a      	ldr	r2, [r3, #4]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80030f8:	605a      	str	r2, [r3, #4]
 80030fa:	e007      	b.n	800310c <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	685a      	ldr	r2, [r3, #4]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800310a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003116:	2b40      	cmp	r3, #64	@ 0x40
 8003118:	d007      	beq.n	800312a <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003128:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003132:	f240 8083 	bls.w	800323c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d002      	beq.n	8003144 <HAL_SPI_TransmitReceive+0x132>
 800313e:	8afb      	ldrh	r3, [r7, #22]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d16f      	bne.n	8003224 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003148:	881a      	ldrh	r2, [r3, #0]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003154:	1c9a      	adds	r2, r3, #2
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800315e:	b29b      	uxth	r3, r3
 8003160:	3b01      	subs	r3, #1
 8003162:	b29a      	uxth	r2, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003168:	e05c      	b.n	8003224 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f003 0302 	and.w	r3, r3, #2
 8003174:	2b02      	cmp	r3, #2
 8003176:	d11b      	bne.n	80031b0 <HAL_SPI_TransmitReceive+0x19e>
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800317c:	b29b      	uxth	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d016      	beq.n	80031b0 <HAL_SPI_TransmitReceive+0x19e>
 8003182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003184:	2b01      	cmp	r3, #1
 8003186:	d113      	bne.n	80031b0 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800318c:	881a      	ldrh	r2, [r3, #0]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003198:	1c9a      	adds	r2, r3, #2
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	3b01      	subs	r3, #1
 80031a6:	b29a      	uxth	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80031ac:	2300      	movs	r3, #0
 80031ae:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d11c      	bne.n	80031f8 <HAL_SPI_TransmitReceive+0x1e6>
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d016      	beq.n	80031f8 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	68da      	ldr	r2, [r3, #12]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d4:	b292      	uxth	r2, r2
 80031d6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031dc:	1c9a      	adds	r2, r3, #2
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	3b01      	subs	r3, #1
 80031ec:	b29a      	uxth	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80031f4:	2301      	movs	r3, #1
 80031f6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80031f8:	f7fd fdc2 	bl	8000d80 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	6a3b      	ldr	r3, [r7, #32]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003204:	429a      	cmp	r2, r3
 8003206:	d80d      	bhi.n	8003224 <HAL_SPI_TransmitReceive+0x212>
 8003208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800320a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800320e:	d009      	beq.n	8003224 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e111      	b.n	8003448 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003228:	b29b      	uxth	r3, r3
 800322a:	2b00      	cmp	r3, #0
 800322c:	d19d      	bne.n	800316a <HAL_SPI_TransmitReceive+0x158>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003234:	b29b      	uxth	r3, r3
 8003236:	2b00      	cmp	r3, #0
 8003238:	d197      	bne.n	800316a <HAL_SPI_TransmitReceive+0x158>
 800323a:	e0e5      	b.n	8003408 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d003      	beq.n	800324c <HAL_SPI_TransmitReceive+0x23a>
 8003244:	8afb      	ldrh	r3, [r7, #22]
 8003246:	2b01      	cmp	r3, #1
 8003248:	f040 80d1 	bne.w	80033ee <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003250:	b29b      	uxth	r3, r3
 8003252:	2b01      	cmp	r3, #1
 8003254:	d912      	bls.n	800327c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800325a:	881a      	ldrh	r2, [r3, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003266:	1c9a      	adds	r2, r3, #2
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003270:	b29b      	uxth	r3, r3
 8003272:	3b02      	subs	r3, #2
 8003274:	b29a      	uxth	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800327a:	e0b8      	b.n	80033ee <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	330c      	adds	r3, #12
 8003286:	7812      	ldrb	r2, [r2, #0]
 8003288:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800328e:	1c5a      	adds	r2, r3, #1
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003298:	b29b      	uxth	r3, r3
 800329a:	3b01      	subs	r3, #1
 800329c:	b29a      	uxth	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032a2:	e0a4      	b.n	80033ee <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f003 0302 	and.w	r3, r3, #2
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d134      	bne.n	800331c <HAL_SPI_TransmitReceive+0x30a>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d02f      	beq.n	800331c <HAL_SPI_TransmitReceive+0x30a>
 80032bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d12c      	bne.n	800331c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d912      	bls.n	80032f2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032d0:	881a      	ldrh	r2, [r3, #0]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032dc:	1c9a      	adds	r2, r3, #2
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	3b02      	subs	r3, #2
 80032ea:	b29a      	uxth	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80032f0:	e012      	b.n	8003318 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	330c      	adds	r3, #12
 80032fc:	7812      	ldrb	r2, [r2, #0]
 80032fe:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003304:	1c5a      	adds	r2, r3, #1
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800330e:	b29b      	uxth	r3, r3
 8003310:	3b01      	subs	r3, #1
 8003312:	b29a      	uxth	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003318:	2300      	movs	r3, #0
 800331a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b01      	cmp	r3, #1
 8003328:	d148      	bne.n	80033bc <HAL_SPI_TransmitReceive+0x3aa>
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003330:	b29b      	uxth	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d042      	beq.n	80033bc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800333c:	b29b      	uxth	r3, r3
 800333e:	2b01      	cmp	r3, #1
 8003340:	d923      	bls.n	800338a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68da      	ldr	r2, [r3, #12]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334c:	b292      	uxth	r2, r2
 800334e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003354:	1c9a      	adds	r2, r3, #2
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003360:	b29b      	uxth	r3, r3
 8003362:	3b02      	subs	r3, #2
 8003364:	b29a      	uxth	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003372:	b29b      	uxth	r3, r3
 8003374:	2b01      	cmp	r3, #1
 8003376:	d81f      	bhi.n	80033b8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	685a      	ldr	r2, [r3, #4]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003386:	605a      	str	r2, [r3, #4]
 8003388:	e016      	b.n	80033b8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f103 020c 	add.w	r2, r3, #12
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003396:	7812      	ldrb	r2, [r2, #0]
 8003398:	b2d2      	uxtb	r2, r2
 800339a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a0:	1c5a      	adds	r2, r3, #1
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	3b01      	subs	r3, #1
 80033b0:	b29a      	uxth	r2, r3
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80033b8:	2301      	movs	r3, #1
 80033ba:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80033bc:	f7fd fce0 	bl	8000d80 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	6a3b      	ldr	r3, [r7, #32]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d803      	bhi.n	80033d4 <HAL_SPI_TransmitReceive+0x3c2>
 80033cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d2:	d102      	bne.n	80033da <HAL_SPI_TransmitReceive+0x3c8>
 80033d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d109      	bne.n	80033ee <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2201      	movs	r2, #1
 80033de:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e02c      	b.n	8003448 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	f47f af55 	bne.w	80032a4 <HAL_SPI_TransmitReceive+0x292>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003400:	b29b      	uxth	r3, r3
 8003402:	2b00      	cmp	r3, #0
 8003404:	f47f af4e 	bne.w	80032a4 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003408:	6a3a      	ldr	r2, [r7, #32]
 800340a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800340c:	68f8      	ldr	r0, [r7, #12]
 800340e:	f000 f995 	bl	800373c <SPI_EndRxTxTransaction>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d008      	beq.n	800342a <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2220      	movs	r2, #32
 800341c:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e00e      	b.n	8003448 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2201      	movs	r2, #1
 800342e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e000      	b.n	8003448 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8003446:	2300      	movs	r3, #0
  }
}
 8003448:	4618      	mov	r0, r3
 800344a:	3728      	adds	r7, #40	@ 0x28
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b088      	sub	sp, #32
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	603b      	str	r3, [r7, #0]
 800345c:	4613      	mov	r3, r2
 800345e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003460:	f7fd fc8e 	bl	8000d80 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003468:	1a9b      	subs	r3, r3, r2
 800346a:	683a      	ldr	r2, [r7, #0]
 800346c:	4413      	add	r3, r2
 800346e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003470:	f7fd fc86 	bl	8000d80 <HAL_GetTick>
 8003474:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003476:	4b39      	ldr	r3, [pc, #228]	@ (800355c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	015b      	lsls	r3, r3, #5
 800347c:	0d1b      	lsrs	r3, r3, #20
 800347e:	69fa      	ldr	r2, [r7, #28]
 8003480:	fb02 f303 	mul.w	r3, r2, r3
 8003484:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003486:	e054      	b.n	8003532 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800348e:	d050      	beq.n	8003532 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003490:	f7fd fc76 	bl	8000d80 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	69fa      	ldr	r2, [r7, #28]
 800349c:	429a      	cmp	r2, r3
 800349e:	d902      	bls.n	80034a6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d13d      	bne.n	8003522 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	685a      	ldr	r2, [r3, #4]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80034b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80034be:	d111      	bne.n	80034e4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034c8:	d004      	beq.n	80034d4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034d2:	d107      	bne.n	80034e4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034ec:	d10f      	bne.n	800350e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80034fc:	601a      	str	r2, [r3, #0]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800350c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2201      	movs	r2, #1
 8003512:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e017      	b.n	8003552 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d101      	bne.n	800352c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003528:	2300      	movs	r3, #0
 800352a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	3b01      	subs	r3, #1
 8003530:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	689a      	ldr	r2, [r3, #8]
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	4013      	ands	r3, r2
 800353c:	68ba      	ldr	r2, [r7, #8]
 800353e:	429a      	cmp	r2, r3
 8003540:	bf0c      	ite	eq
 8003542:	2301      	moveq	r3, #1
 8003544:	2300      	movne	r3, #0
 8003546:	b2db      	uxtb	r3, r3
 8003548:	461a      	mov	r2, r3
 800354a:	79fb      	ldrb	r3, [r7, #7]
 800354c:	429a      	cmp	r2, r3
 800354e:	d19b      	bne.n	8003488 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3720      	adds	r7, #32
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	20000000 	.word	0x20000000

08003560 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b08a      	sub	sp, #40	@ 0x28
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	607a      	str	r2, [r7, #4]
 800356c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800356e:	2300      	movs	r3, #0
 8003570:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003572:	f7fd fc05 	bl	8000d80 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800357a:	1a9b      	subs	r3, r3, r2
 800357c:	683a      	ldr	r2, [r7, #0]
 800357e:	4413      	add	r3, r2
 8003580:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003582:	f7fd fbfd 	bl	8000d80 <HAL_GetTick>
 8003586:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	330c      	adds	r3, #12
 800358e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003590:	4b3d      	ldr	r3, [pc, #244]	@ (8003688 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	4613      	mov	r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	4413      	add	r3, r2
 800359a:	00da      	lsls	r2, r3, #3
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	0d1b      	lsrs	r3, r3, #20
 80035a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035a2:	fb02 f303 	mul.w	r3, r2, r3
 80035a6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80035a8:	e060      	b.n	800366c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80035b0:	d107      	bne.n	80035c2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d104      	bne.n	80035c2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80035c0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c8:	d050      	beq.n	800366c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80035ca:	f7fd fbd9 	bl	8000d80 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	6a3b      	ldr	r3, [r7, #32]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d902      	bls.n	80035e0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80035da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d13d      	bne.n	800365c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	685a      	ldr	r2, [r3, #4]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80035ee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80035f8:	d111      	bne.n	800361e <SPI_WaitFifoStateUntilTimeout+0xbe>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003602:	d004      	beq.n	800360e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800360c:	d107      	bne.n	800361e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800361c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003622:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003626:	d10f      	bne.n	8003648 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003636:	601a      	str	r2, [r3, #0]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003646:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e010      	b.n	800367e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d101      	bne.n	8003666 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003662:	2300      	movs	r3, #0
 8003664:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	3b01      	subs	r3, #1
 800366a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	689a      	ldr	r2, [r3, #8]
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	4013      	ands	r3, r2
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	429a      	cmp	r2, r3
 800367a:	d196      	bne.n	80035aa <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3728      	adds	r7, #40	@ 0x28
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	20000000 	.word	0x20000000

0800368c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b086      	sub	sp, #24
 8003690:	af02      	add	r7, sp, #8
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80036a0:	d111      	bne.n	80036c6 <SPI_EndRxTransaction+0x3a>
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036aa:	d004      	beq.n	80036b6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036b4:	d107      	bne.n	80036c6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80036c4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	9300      	str	r3, [sp, #0]
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	2200      	movs	r2, #0
 80036ce:	2180      	movs	r1, #128	@ 0x80
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	f7ff febd 	bl	8003450 <SPI_WaitFlagStateUntilTimeout>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d007      	beq.n	80036ec <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036e0:	f043 0220 	orr.w	r2, r3, #32
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e023      	b.n	8003734 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80036f4:	d11d      	bne.n	8003732 <SPI_EndRxTransaction+0xa6>
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036fe:	d004      	beq.n	800370a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003708:	d113      	bne.n	8003732 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	9300      	str	r3, [sp, #0]
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	2200      	movs	r2, #0
 8003712:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f7ff ff22 	bl	8003560 <SPI_WaitFifoStateUntilTimeout>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d007      	beq.n	8003732 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003726:	f043 0220 	orr.w	r2, r3, #32
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e000      	b.n	8003734 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003732:	2300      	movs	r3, #0
}
 8003734:	4618      	mov	r0, r3
 8003736:	3710      	adds	r7, #16
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b086      	sub	sp, #24
 8003740:	af02      	add	r7, sp, #8
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	9300      	str	r3, [sp, #0]
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	2200      	movs	r2, #0
 8003750:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003754:	68f8      	ldr	r0, [r7, #12]
 8003756:	f7ff ff03 	bl	8003560 <SPI_WaitFifoStateUntilTimeout>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d007      	beq.n	8003770 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003764:	f043 0220 	orr.w	r2, r3, #32
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e027      	b.n	80037c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	9300      	str	r3, [sp, #0]
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	2200      	movs	r2, #0
 8003778:	2180      	movs	r1, #128	@ 0x80
 800377a:	68f8      	ldr	r0, [r7, #12]
 800377c:	f7ff fe68 	bl	8003450 <SPI_WaitFlagStateUntilTimeout>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d007      	beq.n	8003796 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800378a:	f043 0220 	orr.w	r2, r3, #32
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e014      	b.n	80037c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	9300      	str	r3, [sp, #0]
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	2200      	movs	r2, #0
 800379e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80037a2:	68f8      	ldr	r0, [r7, #12]
 80037a4:	f7ff fedc 	bl	8003560 <SPI_WaitFifoStateUntilTimeout>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d007      	beq.n	80037be <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037b2:	f043 0220 	orr.w	r2, r3, #32
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e000      	b.n	80037c0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80037be:	2300      	movs	r3, #0
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3710      	adds	r7, #16
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d101      	bne.n	80037da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e040      	b.n	800385c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d106      	bne.n	80037f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f7fd f8f6 	bl	80009dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2224      	movs	r2, #36	@ 0x24
 80037f4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f022 0201 	bic.w	r2, r2, #1
 8003804:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800380a:	2b00      	cmp	r3, #0
 800380c:	d002      	beq.n	8003814 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 fb6a 	bl	8003ee8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 f8af 	bl	8003978 <UART_SetConfig>
 800381a:	4603      	mov	r3, r0
 800381c:	2b01      	cmp	r3, #1
 800381e:	d101      	bne.n	8003824 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e01b      	b.n	800385c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	685a      	ldr	r2, [r3, #4]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003832:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	689a      	ldr	r2, [r3, #8]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003842:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f042 0201 	orr.w	r2, r2, #1
 8003852:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f000 fbe9 	bl	800402c <UART_CheckIdleState>
 800385a:	4603      	mov	r3, r0
}
 800385c:	4618      	mov	r0, r3
 800385e:	3708      	adds	r7, #8
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b08a      	sub	sp, #40	@ 0x28
 8003868:	af02      	add	r7, sp, #8
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	603b      	str	r3, [r7, #0]
 8003870:	4613      	mov	r3, r2
 8003872:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003878:	2b20      	cmp	r3, #32
 800387a:	d177      	bne.n	800396c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d002      	beq.n	8003888 <HAL_UART_Transmit+0x24>
 8003882:	88fb      	ldrh	r3, [r7, #6]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d101      	bne.n	800388c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e070      	b.n	800396e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2200      	movs	r2, #0
 8003890:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2221      	movs	r2, #33	@ 0x21
 8003898:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800389a:	f7fd fa71 	bl	8000d80 <HAL_GetTick>
 800389e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	88fa      	ldrh	r2, [r7, #6]
 80038a4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	88fa      	ldrh	r2, [r7, #6]
 80038ac:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038b8:	d108      	bne.n	80038cc <HAL_UART_Transmit+0x68>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d104      	bne.n	80038cc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80038c2:	2300      	movs	r3, #0
 80038c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	61bb      	str	r3, [r7, #24]
 80038ca:	e003      	b.n	80038d4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038d0:	2300      	movs	r3, #0
 80038d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80038d4:	e02f      	b.n	8003936 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	9300      	str	r3, [sp, #0]
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	2200      	movs	r2, #0
 80038de:	2180      	movs	r1, #128	@ 0x80
 80038e0:	68f8      	ldr	r0, [r7, #12]
 80038e2:	f000 fc4b 	bl	800417c <UART_WaitOnFlagUntilTimeout>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d004      	beq.n	80038f6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2220      	movs	r2, #32
 80038f0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e03b      	b.n	800396e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d10b      	bne.n	8003914 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	881a      	ldrh	r2, [r3, #0]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003908:	b292      	uxth	r2, r2
 800390a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	3302      	adds	r3, #2
 8003910:	61bb      	str	r3, [r7, #24]
 8003912:	e007      	b.n	8003924 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	781a      	ldrb	r2, [r3, #0]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	3301      	adds	r3, #1
 8003922:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800392a:	b29b      	uxth	r3, r3
 800392c:	3b01      	subs	r3, #1
 800392e:	b29a      	uxth	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800393c:	b29b      	uxth	r3, r3
 800393e:	2b00      	cmp	r3, #0
 8003940:	d1c9      	bne.n	80038d6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	9300      	str	r3, [sp, #0]
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	2200      	movs	r2, #0
 800394a:	2140      	movs	r1, #64	@ 0x40
 800394c:	68f8      	ldr	r0, [r7, #12]
 800394e:	f000 fc15 	bl	800417c <UART_WaitOnFlagUntilTimeout>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d004      	beq.n	8003962 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2220      	movs	r2, #32
 800395c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e005      	b.n	800396e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2220      	movs	r2, #32
 8003966:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003968:	2300      	movs	r3, #0
 800396a:	e000      	b.n	800396e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800396c:	2302      	movs	r3, #2
  }
}
 800396e:	4618      	mov	r0, r3
 8003970:	3720      	adds	r7, #32
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
	...

08003978 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003978:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800397c:	b08a      	sub	sp, #40	@ 0x28
 800397e:	af00      	add	r7, sp, #0
 8003980:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003982:	2300      	movs	r3, #0
 8003984:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	689a      	ldr	r2, [r3, #8]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	691b      	ldr	r3, [r3, #16]
 8003990:	431a      	orrs	r2, r3
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	431a      	orrs	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	69db      	ldr	r3, [r3, #28]
 800399c:	4313      	orrs	r3, r2
 800399e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	4ba4      	ldr	r3, [pc, #656]	@ (8003c38 <UART_SetConfig+0x2c0>)
 80039a8:	4013      	ands	r3, r2
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	6812      	ldr	r2, [r2, #0]
 80039ae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80039b0:	430b      	orrs	r3, r1
 80039b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	68da      	ldr	r2, [r3, #12]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	430a      	orrs	r2, r1
 80039c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a99      	ldr	r2, [pc, #612]	@ (8003c3c <UART_SetConfig+0x2c4>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d004      	beq.n	80039e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6a1b      	ldr	r3, [r3, #32]
 80039de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039e0:	4313      	orrs	r3, r2
 80039e2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039f4:	430a      	orrs	r2, r1
 80039f6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a90      	ldr	r2, [pc, #576]	@ (8003c40 <UART_SetConfig+0x2c8>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d126      	bne.n	8003a50 <UART_SetConfig+0xd8>
 8003a02:	4b90      	ldr	r3, [pc, #576]	@ (8003c44 <UART_SetConfig+0x2cc>)
 8003a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a08:	f003 0303 	and.w	r3, r3, #3
 8003a0c:	2b03      	cmp	r3, #3
 8003a0e:	d81b      	bhi.n	8003a48 <UART_SetConfig+0xd0>
 8003a10:	a201      	add	r2, pc, #4	@ (adr r2, 8003a18 <UART_SetConfig+0xa0>)
 8003a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a16:	bf00      	nop
 8003a18:	08003a29 	.word	0x08003a29
 8003a1c:	08003a39 	.word	0x08003a39
 8003a20:	08003a31 	.word	0x08003a31
 8003a24:	08003a41 	.word	0x08003a41
 8003a28:	2301      	movs	r3, #1
 8003a2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a2e:	e116      	b.n	8003c5e <UART_SetConfig+0x2e6>
 8003a30:	2302      	movs	r3, #2
 8003a32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a36:	e112      	b.n	8003c5e <UART_SetConfig+0x2e6>
 8003a38:	2304      	movs	r3, #4
 8003a3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a3e:	e10e      	b.n	8003c5e <UART_SetConfig+0x2e6>
 8003a40:	2308      	movs	r3, #8
 8003a42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a46:	e10a      	b.n	8003c5e <UART_SetConfig+0x2e6>
 8003a48:	2310      	movs	r3, #16
 8003a4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a4e:	e106      	b.n	8003c5e <UART_SetConfig+0x2e6>
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a7c      	ldr	r2, [pc, #496]	@ (8003c48 <UART_SetConfig+0x2d0>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d138      	bne.n	8003acc <UART_SetConfig+0x154>
 8003a5a:	4b7a      	ldr	r3, [pc, #488]	@ (8003c44 <UART_SetConfig+0x2cc>)
 8003a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a60:	f003 030c 	and.w	r3, r3, #12
 8003a64:	2b0c      	cmp	r3, #12
 8003a66:	d82d      	bhi.n	8003ac4 <UART_SetConfig+0x14c>
 8003a68:	a201      	add	r2, pc, #4	@ (adr r2, 8003a70 <UART_SetConfig+0xf8>)
 8003a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a6e:	bf00      	nop
 8003a70:	08003aa5 	.word	0x08003aa5
 8003a74:	08003ac5 	.word	0x08003ac5
 8003a78:	08003ac5 	.word	0x08003ac5
 8003a7c:	08003ac5 	.word	0x08003ac5
 8003a80:	08003ab5 	.word	0x08003ab5
 8003a84:	08003ac5 	.word	0x08003ac5
 8003a88:	08003ac5 	.word	0x08003ac5
 8003a8c:	08003ac5 	.word	0x08003ac5
 8003a90:	08003aad 	.word	0x08003aad
 8003a94:	08003ac5 	.word	0x08003ac5
 8003a98:	08003ac5 	.word	0x08003ac5
 8003a9c:	08003ac5 	.word	0x08003ac5
 8003aa0:	08003abd 	.word	0x08003abd
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003aaa:	e0d8      	b.n	8003c5e <UART_SetConfig+0x2e6>
 8003aac:	2302      	movs	r3, #2
 8003aae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ab2:	e0d4      	b.n	8003c5e <UART_SetConfig+0x2e6>
 8003ab4:	2304      	movs	r3, #4
 8003ab6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003aba:	e0d0      	b.n	8003c5e <UART_SetConfig+0x2e6>
 8003abc:	2308      	movs	r3, #8
 8003abe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ac2:	e0cc      	b.n	8003c5e <UART_SetConfig+0x2e6>
 8003ac4:	2310      	movs	r3, #16
 8003ac6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003aca:	e0c8      	b.n	8003c5e <UART_SetConfig+0x2e6>
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a5e      	ldr	r2, [pc, #376]	@ (8003c4c <UART_SetConfig+0x2d4>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d125      	bne.n	8003b22 <UART_SetConfig+0x1aa>
 8003ad6:	4b5b      	ldr	r3, [pc, #364]	@ (8003c44 <UART_SetConfig+0x2cc>)
 8003ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003adc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003ae0:	2b30      	cmp	r3, #48	@ 0x30
 8003ae2:	d016      	beq.n	8003b12 <UART_SetConfig+0x19a>
 8003ae4:	2b30      	cmp	r3, #48	@ 0x30
 8003ae6:	d818      	bhi.n	8003b1a <UART_SetConfig+0x1a2>
 8003ae8:	2b20      	cmp	r3, #32
 8003aea:	d00a      	beq.n	8003b02 <UART_SetConfig+0x18a>
 8003aec:	2b20      	cmp	r3, #32
 8003aee:	d814      	bhi.n	8003b1a <UART_SetConfig+0x1a2>
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d002      	beq.n	8003afa <UART_SetConfig+0x182>
 8003af4:	2b10      	cmp	r3, #16
 8003af6:	d008      	beq.n	8003b0a <UART_SetConfig+0x192>
 8003af8:	e00f      	b.n	8003b1a <UART_SetConfig+0x1a2>
 8003afa:	2300      	movs	r3, #0
 8003afc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b00:	e0ad      	b.n	8003c5e <UART_SetConfig+0x2e6>
 8003b02:	2302      	movs	r3, #2
 8003b04:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b08:	e0a9      	b.n	8003c5e <UART_SetConfig+0x2e6>
 8003b0a:	2304      	movs	r3, #4
 8003b0c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b10:	e0a5      	b.n	8003c5e <UART_SetConfig+0x2e6>
 8003b12:	2308      	movs	r3, #8
 8003b14:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b18:	e0a1      	b.n	8003c5e <UART_SetConfig+0x2e6>
 8003b1a:	2310      	movs	r3, #16
 8003b1c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b20:	e09d      	b.n	8003c5e <UART_SetConfig+0x2e6>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a4a      	ldr	r2, [pc, #296]	@ (8003c50 <UART_SetConfig+0x2d8>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d125      	bne.n	8003b78 <UART_SetConfig+0x200>
 8003b2c:	4b45      	ldr	r3, [pc, #276]	@ (8003c44 <UART_SetConfig+0x2cc>)
 8003b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b32:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003b36:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b38:	d016      	beq.n	8003b68 <UART_SetConfig+0x1f0>
 8003b3a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b3c:	d818      	bhi.n	8003b70 <UART_SetConfig+0x1f8>
 8003b3e:	2b80      	cmp	r3, #128	@ 0x80
 8003b40:	d00a      	beq.n	8003b58 <UART_SetConfig+0x1e0>
 8003b42:	2b80      	cmp	r3, #128	@ 0x80
 8003b44:	d814      	bhi.n	8003b70 <UART_SetConfig+0x1f8>
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d002      	beq.n	8003b50 <UART_SetConfig+0x1d8>
 8003b4a:	2b40      	cmp	r3, #64	@ 0x40
 8003b4c:	d008      	beq.n	8003b60 <UART_SetConfig+0x1e8>
 8003b4e:	e00f      	b.n	8003b70 <UART_SetConfig+0x1f8>
 8003b50:	2300      	movs	r3, #0
 8003b52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b56:	e082      	b.n	8003c5e <UART_SetConfig+0x2e6>
 8003b58:	2302      	movs	r3, #2
 8003b5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b5e:	e07e      	b.n	8003c5e <UART_SetConfig+0x2e6>
 8003b60:	2304      	movs	r3, #4
 8003b62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b66:	e07a      	b.n	8003c5e <UART_SetConfig+0x2e6>
 8003b68:	2308      	movs	r3, #8
 8003b6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b6e:	e076      	b.n	8003c5e <UART_SetConfig+0x2e6>
 8003b70:	2310      	movs	r3, #16
 8003b72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b76:	e072      	b.n	8003c5e <UART_SetConfig+0x2e6>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a35      	ldr	r2, [pc, #212]	@ (8003c54 <UART_SetConfig+0x2dc>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d12a      	bne.n	8003bd8 <UART_SetConfig+0x260>
 8003b82:	4b30      	ldr	r3, [pc, #192]	@ (8003c44 <UART_SetConfig+0x2cc>)
 8003b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b88:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b8c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b90:	d01a      	beq.n	8003bc8 <UART_SetConfig+0x250>
 8003b92:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b96:	d81b      	bhi.n	8003bd0 <UART_SetConfig+0x258>
 8003b98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b9c:	d00c      	beq.n	8003bb8 <UART_SetConfig+0x240>
 8003b9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ba2:	d815      	bhi.n	8003bd0 <UART_SetConfig+0x258>
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d003      	beq.n	8003bb0 <UART_SetConfig+0x238>
 8003ba8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bac:	d008      	beq.n	8003bc0 <UART_SetConfig+0x248>
 8003bae:	e00f      	b.n	8003bd0 <UART_SetConfig+0x258>
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bb6:	e052      	b.n	8003c5e <UART_SetConfig+0x2e6>
 8003bb8:	2302      	movs	r3, #2
 8003bba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bbe:	e04e      	b.n	8003c5e <UART_SetConfig+0x2e6>
 8003bc0:	2304      	movs	r3, #4
 8003bc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bc6:	e04a      	b.n	8003c5e <UART_SetConfig+0x2e6>
 8003bc8:	2308      	movs	r3, #8
 8003bca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bce:	e046      	b.n	8003c5e <UART_SetConfig+0x2e6>
 8003bd0:	2310      	movs	r3, #16
 8003bd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bd6:	e042      	b.n	8003c5e <UART_SetConfig+0x2e6>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a17      	ldr	r2, [pc, #92]	@ (8003c3c <UART_SetConfig+0x2c4>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d13a      	bne.n	8003c58 <UART_SetConfig+0x2e0>
 8003be2:	4b18      	ldr	r3, [pc, #96]	@ (8003c44 <UART_SetConfig+0x2cc>)
 8003be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003be8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003bec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003bf0:	d01a      	beq.n	8003c28 <UART_SetConfig+0x2b0>
 8003bf2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003bf6:	d81b      	bhi.n	8003c30 <UART_SetConfig+0x2b8>
 8003bf8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bfc:	d00c      	beq.n	8003c18 <UART_SetConfig+0x2a0>
 8003bfe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c02:	d815      	bhi.n	8003c30 <UART_SetConfig+0x2b8>
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d003      	beq.n	8003c10 <UART_SetConfig+0x298>
 8003c08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c0c:	d008      	beq.n	8003c20 <UART_SetConfig+0x2a8>
 8003c0e:	e00f      	b.n	8003c30 <UART_SetConfig+0x2b8>
 8003c10:	2300      	movs	r3, #0
 8003c12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c16:	e022      	b.n	8003c5e <UART_SetConfig+0x2e6>
 8003c18:	2302      	movs	r3, #2
 8003c1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c1e:	e01e      	b.n	8003c5e <UART_SetConfig+0x2e6>
 8003c20:	2304      	movs	r3, #4
 8003c22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c26:	e01a      	b.n	8003c5e <UART_SetConfig+0x2e6>
 8003c28:	2308      	movs	r3, #8
 8003c2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c2e:	e016      	b.n	8003c5e <UART_SetConfig+0x2e6>
 8003c30:	2310      	movs	r3, #16
 8003c32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c36:	e012      	b.n	8003c5e <UART_SetConfig+0x2e6>
 8003c38:	efff69f3 	.word	0xefff69f3
 8003c3c:	40008000 	.word	0x40008000
 8003c40:	40013800 	.word	0x40013800
 8003c44:	40021000 	.word	0x40021000
 8003c48:	40004400 	.word	0x40004400
 8003c4c:	40004800 	.word	0x40004800
 8003c50:	40004c00 	.word	0x40004c00
 8003c54:	40005000 	.word	0x40005000
 8003c58:	2310      	movs	r3, #16
 8003c5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a9f      	ldr	r2, [pc, #636]	@ (8003ee0 <UART_SetConfig+0x568>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d17a      	bne.n	8003d5e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003c68:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003c6c:	2b08      	cmp	r3, #8
 8003c6e:	d824      	bhi.n	8003cba <UART_SetConfig+0x342>
 8003c70:	a201      	add	r2, pc, #4	@ (adr r2, 8003c78 <UART_SetConfig+0x300>)
 8003c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c76:	bf00      	nop
 8003c78:	08003c9d 	.word	0x08003c9d
 8003c7c:	08003cbb 	.word	0x08003cbb
 8003c80:	08003ca5 	.word	0x08003ca5
 8003c84:	08003cbb 	.word	0x08003cbb
 8003c88:	08003cab 	.word	0x08003cab
 8003c8c:	08003cbb 	.word	0x08003cbb
 8003c90:	08003cbb 	.word	0x08003cbb
 8003c94:	08003cbb 	.word	0x08003cbb
 8003c98:	08003cb3 	.word	0x08003cb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c9c:	f7fe f920 	bl	8001ee0 <HAL_RCC_GetPCLK1Freq>
 8003ca0:	61f8      	str	r0, [r7, #28]
        break;
 8003ca2:	e010      	b.n	8003cc6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ca4:	4b8f      	ldr	r3, [pc, #572]	@ (8003ee4 <UART_SetConfig+0x56c>)
 8003ca6:	61fb      	str	r3, [r7, #28]
        break;
 8003ca8:	e00d      	b.n	8003cc6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003caa:	f7fe f881 	bl	8001db0 <HAL_RCC_GetSysClockFreq>
 8003cae:	61f8      	str	r0, [r7, #28]
        break;
 8003cb0:	e009      	b.n	8003cc6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003cb6:	61fb      	str	r3, [r7, #28]
        break;
 8003cb8:	e005      	b.n	8003cc6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003cc4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	f000 80fb 	beq.w	8003ec4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	685a      	ldr	r2, [r3, #4]
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	005b      	lsls	r3, r3, #1
 8003cd6:	4413      	add	r3, r2
 8003cd8:	69fa      	ldr	r2, [r7, #28]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d305      	bcc.n	8003cea <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003ce4:	69fa      	ldr	r2, [r7, #28]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d903      	bls.n	8003cf2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003cf0:	e0e8      	b.n	8003ec4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	461c      	mov	r4, r3
 8003cf8:	4615      	mov	r5, r2
 8003cfa:	f04f 0200 	mov.w	r2, #0
 8003cfe:	f04f 0300 	mov.w	r3, #0
 8003d02:	022b      	lsls	r3, r5, #8
 8003d04:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003d08:	0222      	lsls	r2, r4, #8
 8003d0a:	68f9      	ldr	r1, [r7, #12]
 8003d0c:	6849      	ldr	r1, [r1, #4]
 8003d0e:	0849      	lsrs	r1, r1, #1
 8003d10:	2000      	movs	r0, #0
 8003d12:	4688      	mov	r8, r1
 8003d14:	4681      	mov	r9, r0
 8003d16:	eb12 0a08 	adds.w	sl, r2, r8
 8003d1a:	eb43 0b09 	adc.w	fp, r3, r9
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	603b      	str	r3, [r7, #0]
 8003d26:	607a      	str	r2, [r7, #4]
 8003d28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d2c:	4650      	mov	r0, sl
 8003d2e:	4659      	mov	r1, fp
 8003d30:	f7fc fa9e 	bl	8000270 <__aeabi_uldivmod>
 8003d34:	4602      	mov	r2, r0
 8003d36:	460b      	mov	r3, r1
 8003d38:	4613      	mov	r3, r2
 8003d3a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d42:	d308      	bcc.n	8003d56 <UART_SetConfig+0x3de>
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d4a:	d204      	bcs.n	8003d56 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	60da      	str	r2, [r3, #12]
 8003d54:	e0b6      	b.n	8003ec4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003d5c:	e0b2      	b.n	8003ec4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	69db      	ldr	r3, [r3, #28]
 8003d62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d66:	d15e      	bne.n	8003e26 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003d68:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003d6c:	2b08      	cmp	r3, #8
 8003d6e:	d828      	bhi.n	8003dc2 <UART_SetConfig+0x44a>
 8003d70:	a201      	add	r2, pc, #4	@ (adr r2, 8003d78 <UART_SetConfig+0x400>)
 8003d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d76:	bf00      	nop
 8003d78:	08003d9d 	.word	0x08003d9d
 8003d7c:	08003da5 	.word	0x08003da5
 8003d80:	08003dad 	.word	0x08003dad
 8003d84:	08003dc3 	.word	0x08003dc3
 8003d88:	08003db3 	.word	0x08003db3
 8003d8c:	08003dc3 	.word	0x08003dc3
 8003d90:	08003dc3 	.word	0x08003dc3
 8003d94:	08003dc3 	.word	0x08003dc3
 8003d98:	08003dbb 	.word	0x08003dbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d9c:	f7fe f8a0 	bl	8001ee0 <HAL_RCC_GetPCLK1Freq>
 8003da0:	61f8      	str	r0, [r7, #28]
        break;
 8003da2:	e014      	b.n	8003dce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003da4:	f7fe f8b2 	bl	8001f0c <HAL_RCC_GetPCLK2Freq>
 8003da8:	61f8      	str	r0, [r7, #28]
        break;
 8003daa:	e010      	b.n	8003dce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dac:	4b4d      	ldr	r3, [pc, #308]	@ (8003ee4 <UART_SetConfig+0x56c>)
 8003dae:	61fb      	str	r3, [r7, #28]
        break;
 8003db0:	e00d      	b.n	8003dce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003db2:	f7fd fffd 	bl	8001db0 <HAL_RCC_GetSysClockFreq>
 8003db6:	61f8      	str	r0, [r7, #28]
        break;
 8003db8:	e009      	b.n	8003dce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003dbe:	61fb      	str	r3, [r7, #28]
        break;
 8003dc0:	e005      	b.n	8003dce <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003dcc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d077      	beq.n	8003ec4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	005a      	lsls	r2, r3, #1
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	085b      	lsrs	r3, r3, #1
 8003dde:	441a      	add	r2, r3
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003de8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	2b0f      	cmp	r3, #15
 8003dee:	d916      	bls.n	8003e1e <UART_SetConfig+0x4a6>
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003df6:	d212      	bcs.n	8003e1e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	f023 030f 	bic.w	r3, r3, #15
 8003e00:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	085b      	lsrs	r3, r3, #1
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	f003 0307 	and.w	r3, r3, #7
 8003e0c:	b29a      	uxth	r2, r3
 8003e0e:	8afb      	ldrh	r3, [r7, #22]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	8afa      	ldrh	r2, [r7, #22]
 8003e1a:	60da      	str	r2, [r3, #12]
 8003e1c:	e052      	b.n	8003ec4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003e24:	e04e      	b.n	8003ec4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e26:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003e2a:	2b08      	cmp	r3, #8
 8003e2c:	d827      	bhi.n	8003e7e <UART_SetConfig+0x506>
 8003e2e:	a201      	add	r2, pc, #4	@ (adr r2, 8003e34 <UART_SetConfig+0x4bc>)
 8003e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e34:	08003e59 	.word	0x08003e59
 8003e38:	08003e61 	.word	0x08003e61
 8003e3c:	08003e69 	.word	0x08003e69
 8003e40:	08003e7f 	.word	0x08003e7f
 8003e44:	08003e6f 	.word	0x08003e6f
 8003e48:	08003e7f 	.word	0x08003e7f
 8003e4c:	08003e7f 	.word	0x08003e7f
 8003e50:	08003e7f 	.word	0x08003e7f
 8003e54:	08003e77 	.word	0x08003e77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e58:	f7fe f842 	bl	8001ee0 <HAL_RCC_GetPCLK1Freq>
 8003e5c:	61f8      	str	r0, [r7, #28]
        break;
 8003e5e:	e014      	b.n	8003e8a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e60:	f7fe f854 	bl	8001f0c <HAL_RCC_GetPCLK2Freq>
 8003e64:	61f8      	str	r0, [r7, #28]
        break;
 8003e66:	e010      	b.n	8003e8a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e68:	4b1e      	ldr	r3, [pc, #120]	@ (8003ee4 <UART_SetConfig+0x56c>)
 8003e6a:	61fb      	str	r3, [r7, #28]
        break;
 8003e6c:	e00d      	b.n	8003e8a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e6e:	f7fd ff9f 	bl	8001db0 <HAL_RCC_GetSysClockFreq>
 8003e72:	61f8      	str	r0, [r7, #28]
        break;
 8003e74:	e009      	b.n	8003e8a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e7a:	61fb      	str	r3, [r7, #28]
        break;
 8003e7c:	e005      	b.n	8003e8a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003e88:	bf00      	nop
    }

    if (pclk != 0U)
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d019      	beq.n	8003ec4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	085a      	lsrs	r2, r3, #1
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	441a      	add	r2, r3
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	2b0f      	cmp	r3, #15
 8003ea8:	d909      	bls.n	8003ebe <UART_SetConfig+0x546>
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003eb0:	d205      	bcs.n	8003ebe <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	b29a      	uxth	r2, r3
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	60da      	str	r2, [r3, #12]
 8003ebc:	e002      	b.n	8003ec4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003ed0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3728      	adds	r7, #40	@ 0x28
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ede:	bf00      	nop
 8003ee0:	40008000 	.word	0x40008000
 8003ee4:	00f42400 	.word	0x00f42400

08003ee8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef4:	f003 0308 	and.w	r3, r3, #8
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d00a      	beq.n	8003f12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	430a      	orrs	r2, r1
 8003f10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f16:	f003 0301 	and.w	r3, r3, #1
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00a      	beq.n	8003f34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	430a      	orrs	r2, r1
 8003f32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f38:	f003 0302 	and.w	r3, r3, #2
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d00a      	beq.n	8003f56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	430a      	orrs	r2, r1
 8003f54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f5a:	f003 0304 	and.w	r3, r3, #4
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00a      	beq.n	8003f78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	430a      	orrs	r2, r1
 8003f76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f7c:	f003 0310 	and.w	r3, r3, #16
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d00a      	beq.n	8003f9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	430a      	orrs	r2, r1
 8003f98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f9e:	f003 0320 	and.w	r3, r3, #32
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00a      	beq.n	8003fbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	430a      	orrs	r2, r1
 8003fba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d01a      	beq.n	8003ffe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003fe6:	d10a      	bne.n	8003ffe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	430a      	orrs	r2, r1
 8003ffc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004002:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00a      	beq.n	8004020 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	430a      	orrs	r2, r1
 800401e:	605a      	str	r2, [r3, #4]
  }
}
 8004020:	bf00      	nop
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b098      	sub	sp, #96	@ 0x60
 8004030:	af02      	add	r7, sp, #8
 8004032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800403c:	f7fc fea0 	bl	8000d80 <HAL_GetTick>
 8004040:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0308 	and.w	r3, r3, #8
 800404c:	2b08      	cmp	r3, #8
 800404e:	d12e      	bne.n	80040ae <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004050:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004054:	9300      	str	r3, [sp, #0]
 8004056:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004058:	2200      	movs	r2, #0
 800405a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 f88c 	bl	800417c <UART_WaitOnFlagUntilTimeout>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d021      	beq.n	80040ae <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004072:	e853 3f00 	ldrex	r3, [r3]
 8004076:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004078:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800407a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800407e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	461a      	mov	r2, r3
 8004086:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004088:	647b      	str	r3, [r7, #68]	@ 0x44
 800408a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800408c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800408e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004090:	e841 2300 	strex	r3, r2, [r1]
 8004094:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004096:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004098:	2b00      	cmp	r3, #0
 800409a:	d1e6      	bne.n	800406a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2220      	movs	r2, #32
 80040a0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e062      	b.n	8004174 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0304 	and.w	r3, r3, #4
 80040b8:	2b04      	cmp	r3, #4
 80040ba:	d149      	bne.n	8004150 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80040c0:	9300      	str	r3, [sp, #0]
 80040c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040c4:	2200      	movs	r2, #0
 80040c6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 f856 	bl	800417c <UART_WaitOnFlagUntilTimeout>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d03c      	beq.n	8004150 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040de:	e853 3f00 	ldrex	r3, [r3]
 80040e2:	623b      	str	r3, [r7, #32]
   return(result);
 80040e4:	6a3b      	ldr	r3, [r7, #32]
 80040e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80040ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	461a      	mov	r2, r3
 80040f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80040f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80040fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040fc:	e841 2300 	strex	r3, r2, [r1]
 8004100:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004104:	2b00      	cmp	r3, #0
 8004106:	d1e6      	bne.n	80040d6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	3308      	adds	r3, #8
 800410e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	e853 3f00 	ldrex	r3, [r3]
 8004116:	60fb      	str	r3, [r7, #12]
   return(result);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f023 0301 	bic.w	r3, r3, #1
 800411e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	3308      	adds	r3, #8
 8004126:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004128:	61fa      	str	r2, [r7, #28]
 800412a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800412c:	69b9      	ldr	r1, [r7, #24]
 800412e:	69fa      	ldr	r2, [r7, #28]
 8004130:	e841 2300 	strex	r3, r2, [r1]
 8004134:	617b      	str	r3, [r7, #20]
   return(result);
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d1e5      	bne.n	8004108 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2220      	movs	r2, #32
 8004140:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e011      	b.n	8004174 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2220      	movs	r2, #32
 8004154:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2220      	movs	r2, #32
 800415a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004172:	2300      	movs	r3, #0
}
 8004174:	4618      	mov	r0, r3
 8004176:	3758      	adds	r7, #88	@ 0x58
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	603b      	str	r3, [r7, #0]
 8004188:	4613      	mov	r3, r2
 800418a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800418c:	e04f      	b.n	800422e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004194:	d04b      	beq.n	800422e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004196:	f7fc fdf3 	bl	8000d80 <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	69ba      	ldr	r2, [r7, #24]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d302      	bcc.n	80041ac <UART_WaitOnFlagUntilTimeout+0x30>
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d101      	bne.n	80041b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80041ac:	2303      	movs	r3, #3
 80041ae:	e04e      	b.n	800424e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0304 	and.w	r3, r3, #4
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d037      	beq.n	800422e <UART_WaitOnFlagUntilTimeout+0xb2>
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	2b80      	cmp	r3, #128	@ 0x80
 80041c2:	d034      	beq.n	800422e <UART_WaitOnFlagUntilTimeout+0xb2>
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	2b40      	cmp	r3, #64	@ 0x40
 80041c8:	d031      	beq.n	800422e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	69db      	ldr	r3, [r3, #28]
 80041d0:	f003 0308 	and.w	r3, r3, #8
 80041d4:	2b08      	cmp	r3, #8
 80041d6:	d110      	bne.n	80041fa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2208      	movs	r2, #8
 80041de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041e0:	68f8      	ldr	r0, [r7, #12]
 80041e2:	f000 f838 	bl	8004256 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2208      	movs	r2, #8
 80041ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e029      	b.n	800424e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	69db      	ldr	r3, [r3, #28]
 8004200:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004204:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004208:	d111      	bne.n	800422e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004212:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004214:	68f8      	ldr	r0, [r7, #12]
 8004216:	f000 f81e 	bl	8004256 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2220      	movs	r2, #32
 800421e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2200      	movs	r2, #0
 8004226:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e00f      	b.n	800424e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	69da      	ldr	r2, [r3, #28]
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	4013      	ands	r3, r2
 8004238:	68ba      	ldr	r2, [r7, #8]
 800423a:	429a      	cmp	r2, r3
 800423c:	bf0c      	ite	eq
 800423e:	2301      	moveq	r3, #1
 8004240:	2300      	movne	r3, #0
 8004242:	b2db      	uxtb	r3, r3
 8004244:	461a      	mov	r2, r3
 8004246:	79fb      	ldrb	r3, [r7, #7]
 8004248:	429a      	cmp	r2, r3
 800424a:	d0a0      	beq.n	800418e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3710      	adds	r7, #16
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}

08004256 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004256:	b480      	push	{r7}
 8004258:	b095      	sub	sp, #84	@ 0x54
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004264:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004266:	e853 3f00 	ldrex	r3, [r3]
 800426a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800426c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800426e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004272:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	461a      	mov	r2, r3
 800427a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800427c:	643b      	str	r3, [r7, #64]	@ 0x40
 800427e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004280:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004282:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004284:	e841 2300 	strex	r3, r2, [r1]
 8004288:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800428a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800428c:	2b00      	cmp	r3, #0
 800428e:	d1e6      	bne.n	800425e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	3308      	adds	r3, #8
 8004296:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004298:	6a3b      	ldr	r3, [r7, #32]
 800429a:	e853 3f00 	ldrex	r3, [r3]
 800429e:	61fb      	str	r3, [r7, #28]
   return(result);
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	f023 0301 	bic.w	r3, r3, #1
 80042a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	3308      	adds	r3, #8
 80042ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042b8:	e841 2300 	strex	r3, r2, [r1]
 80042bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80042be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d1e5      	bne.n	8004290 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d118      	bne.n	80042fe <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	e853 3f00 	ldrex	r3, [r3]
 80042d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	f023 0310 	bic.w	r3, r3, #16
 80042e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	461a      	mov	r2, r3
 80042e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042ea:	61bb      	str	r3, [r7, #24]
 80042ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ee:	6979      	ldr	r1, [r7, #20]
 80042f0:	69ba      	ldr	r2, [r7, #24]
 80042f2:	e841 2300 	strex	r3, r2, [r1]
 80042f6:	613b      	str	r3, [r7, #16]
   return(result);
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d1e6      	bne.n	80042cc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2220      	movs	r2, #32
 8004302:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004312:	bf00      	nop
 8004314:	3754      	adds	r7, #84	@ 0x54
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
	...

08004320 <std>:
 8004320:	2300      	movs	r3, #0
 8004322:	b510      	push	{r4, lr}
 8004324:	4604      	mov	r4, r0
 8004326:	e9c0 3300 	strd	r3, r3, [r0]
 800432a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800432e:	6083      	str	r3, [r0, #8]
 8004330:	8181      	strh	r1, [r0, #12]
 8004332:	6643      	str	r3, [r0, #100]	@ 0x64
 8004334:	81c2      	strh	r2, [r0, #14]
 8004336:	6183      	str	r3, [r0, #24]
 8004338:	4619      	mov	r1, r3
 800433a:	2208      	movs	r2, #8
 800433c:	305c      	adds	r0, #92	@ 0x5c
 800433e:	f000 f906 	bl	800454e <memset>
 8004342:	4b0d      	ldr	r3, [pc, #52]	@ (8004378 <std+0x58>)
 8004344:	6263      	str	r3, [r4, #36]	@ 0x24
 8004346:	4b0d      	ldr	r3, [pc, #52]	@ (800437c <std+0x5c>)
 8004348:	62a3      	str	r3, [r4, #40]	@ 0x28
 800434a:	4b0d      	ldr	r3, [pc, #52]	@ (8004380 <std+0x60>)
 800434c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800434e:	4b0d      	ldr	r3, [pc, #52]	@ (8004384 <std+0x64>)
 8004350:	6323      	str	r3, [r4, #48]	@ 0x30
 8004352:	4b0d      	ldr	r3, [pc, #52]	@ (8004388 <std+0x68>)
 8004354:	6224      	str	r4, [r4, #32]
 8004356:	429c      	cmp	r4, r3
 8004358:	d006      	beq.n	8004368 <std+0x48>
 800435a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800435e:	4294      	cmp	r4, r2
 8004360:	d002      	beq.n	8004368 <std+0x48>
 8004362:	33d0      	adds	r3, #208	@ 0xd0
 8004364:	429c      	cmp	r4, r3
 8004366:	d105      	bne.n	8004374 <std+0x54>
 8004368:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800436c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004370:	f000 b966 	b.w	8004640 <__retarget_lock_init_recursive>
 8004374:	bd10      	pop	{r4, pc}
 8004376:	bf00      	nop
 8004378:	080044c9 	.word	0x080044c9
 800437c:	080044eb 	.word	0x080044eb
 8004380:	08004523 	.word	0x08004523
 8004384:	08004547 	.word	0x08004547
 8004388:	20000178 	.word	0x20000178

0800438c <stdio_exit_handler>:
 800438c:	4a02      	ldr	r2, [pc, #8]	@ (8004398 <stdio_exit_handler+0xc>)
 800438e:	4903      	ldr	r1, [pc, #12]	@ (800439c <stdio_exit_handler+0x10>)
 8004390:	4803      	ldr	r0, [pc, #12]	@ (80043a0 <stdio_exit_handler+0x14>)
 8004392:	f000 b869 	b.w	8004468 <_fwalk_sglue>
 8004396:	bf00      	nop
 8004398:	2000000c 	.word	0x2000000c
 800439c:	08004ee1 	.word	0x08004ee1
 80043a0:	2000001c 	.word	0x2000001c

080043a4 <cleanup_stdio>:
 80043a4:	6841      	ldr	r1, [r0, #4]
 80043a6:	4b0c      	ldr	r3, [pc, #48]	@ (80043d8 <cleanup_stdio+0x34>)
 80043a8:	4299      	cmp	r1, r3
 80043aa:	b510      	push	{r4, lr}
 80043ac:	4604      	mov	r4, r0
 80043ae:	d001      	beq.n	80043b4 <cleanup_stdio+0x10>
 80043b0:	f000 fd96 	bl	8004ee0 <_fflush_r>
 80043b4:	68a1      	ldr	r1, [r4, #8]
 80043b6:	4b09      	ldr	r3, [pc, #36]	@ (80043dc <cleanup_stdio+0x38>)
 80043b8:	4299      	cmp	r1, r3
 80043ba:	d002      	beq.n	80043c2 <cleanup_stdio+0x1e>
 80043bc:	4620      	mov	r0, r4
 80043be:	f000 fd8f 	bl	8004ee0 <_fflush_r>
 80043c2:	68e1      	ldr	r1, [r4, #12]
 80043c4:	4b06      	ldr	r3, [pc, #24]	@ (80043e0 <cleanup_stdio+0x3c>)
 80043c6:	4299      	cmp	r1, r3
 80043c8:	d004      	beq.n	80043d4 <cleanup_stdio+0x30>
 80043ca:	4620      	mov	r0, r4
 80043cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043d0:	f000 bd86 	b.w	8004ee0 <_fflush_r>
 80043d4:	bd10      	pop	{r4, pc}
 80043d6:	bf00      	nop
 80043d8:	20000178 	.word	0x20000178
 80043dc:	200001e0 	.word	0x200001e0
 80043e0:	20000248 	.word	0x20000248

080043e4 <global_stdio_init.part.0>:
 80043e4:	b510      	push	{r4, lr}
 80043e6:	4b0b      	ldr	r3, [pc, #44]	@ (8004414 <global_stdio_init.part.0+0x30>)
 80043e8:	4c0b      	ldr	r4, [pc, #44]	@ (8004418 <global_stdio_init.part.0+0x34>)
 80043ea:	4a0c      	ldr	r2, [pc, #48]	@ (800441c <global_stdio_init.part.0+0x38>)
 80043ec:	601a      	str	r2, [r3, #0]
 80043ee:	4620      	mov	r0, r4
 80043f0:	2200      	movs	r2, #0
 80043f2:	2104      	movs	r1, #4
 80043f4:	f7ff ff94 	bl	8004320 <std>
 80043f8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80043fc:	2201      	movs	r2, #1
 80043fe:	2109      	movs	r1, #9
 8004400:	f7ff ff8e 	bl	8004320 <std>
 8004404:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004408:	2202      	movs	r2, #2
 800440a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800440e:	2112      	movs	r1, #18
 8004410:	f7ff bf86 	b.w	8004320 <std>
 8004414:	200002b0 	.word	0x200002b0
 8004418:	20000178 	.word	0x20000178
 800441c:	0800438d 	.word	0x0800438d

08004420 <__sfp_lock_acquire>:
 8004420:	4801      	ldr	r0, [pc, #4]	@ (8004428 <__sfp_lock_acquire+0x8>)
 8004422:	f000 b90e 	b.w	8004642 <__retarget_lock_acquire_recursive>
 8004426:	bf00      	nop
 8004428:	200002b9 	.word	0x200002b9

0800442c <__sfp_lock_release>:
 800442c:	4801      	ldr	r0, [pc, #4]	@ (8004434 <__sfp_lock_release+0x8>)
 800442e:	f000 b909 	b.w	8004644 <__retarget_lock_release_recursive>
 8004432:	bf00      	nop
 8004434:	200002b9 	.word	0x200002b9

08004438 <__sinit>:
 8004438:	b510      	push	{r4, lr}
 800443a:	4604      	mov	r4, r0
 800443c:	f7ff fff0 	bl	8004420 <__sfp_lock_acquire>
 8004440:	6a23      	ldr	r3, [r4, #32]
 8004442:	b11b      	cbz	r3, 800444c <__sinit+0x14>
 8004444:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004448:	f7ff bff0 	b.w	800442c <__sfp_lock_release>
 800444c:	4b04      	ldr	r3, [pc, #16]	@ (8004460 <__sinit+0x28>)
 800444e:	6223      	str	r3, [r4, #32]
 8004450:	4b04      	ldr	r3, [pc, #16]	@ (8004464 <__sinit+0x2c>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d1f5      	bne.n	8004444 <__sinit+0xc>
 8004458:	f7ff ffc4 	bl	80043e4 <global_stdio_init.part.0>
 800445c:	e7f2      	b.n	8004444 <__sinit+0xc>
 800445e:	bf00      	nop
 8004460:	080043a5 	.word	0x080043a5
 8004464:	200002b0 	.word	0x200002b0

08004468 <_fwalk_sglue>:
 8004468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800446c:	4607      	mov	r7, r0
 800446e:	4688      	mov	r8, r1
 8004470:	4614      	mov	r4, r2
 8004472:	2600      	movs	r6, #0
 8004474:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004478:	f1b9 0901 	subs.w	r9, r9, #1
 800447c:	d505      	bpl.n	800448a <_fwalk_sglue+0x22>
 800447e:	6824      	ldr	r4, [r4, #0]
 8004480:	2c00      	cmp	r4, #0
 8004482:	d1f7      	bne.n	8004474 <_fwalk_sglue+0xc>
 8004484:	4630      	mov	r0, r6
 8004486:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800448a:	89ab      	ldrh	r3, [r5, #12]
 800448c:	2b01      	cmp	r3, #1
 800448e:	d907      	bls.n	80044a0 <_fwalk_sglue+0x38>
 8004490:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004494:	3301      	adds	r3, #1
 8004496:	d003      	beq.n	80044a0 <_fwalk_sglue+0x38>
 8004498:	4629      	mov	r1, r5
 800449a:	4638      	mov	r0, r7
 800449c:	47c0      	blx	r8
 800449e:	4306      	orrs	r6, r0
 80044a0:	3568      	adds	r5, #104	@ 0x68
 80044a2:	e7e9      	b.n	8004478 <_fwalk_sglue+0x10>

080044a4 <iprintf>:
 80044a4:	b40f      	push	{r0, r1, r2, r3}
 80044a6:	b507      	push	{r0, r1, r2, lr}
 80044a8:	4906      	ldr	r1, [pc, #24]	@ (80044c4 <iprintf+0x20>)
 80044aa:	ab04      	add	r3, sp, #16
 80044ac:	6808      	ldr	r0, [r1, #0]
 80044ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80044b2:	6881      	ldr	r1, [r0, #8]
 80044b4:	9301      	str	r3, [sp, #4]
 80044b6:	f000 f9e9 	bl	800488c <_vfiprintf_r>
 80044ba:	b003      	add	sp, #12
 80044bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80044c0:	b004      	add	sp, #16
 80044c2:	4770      	bx	lr
 80044c4:	20000018 	.word	0x20000018

080044c8 <__sread>:
 80044c8:	b510      	push	{r4, lr}
 80044ca:	460c      	mov	r4, r1
 80044cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044d0:	f000 f868 	bl	80045a4 <_read_r>
 80044d4:	2800      	cmp	r0, #0
 80044d6:	bfab      	itete	ge
 80044d8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80044da:	89a3      	ldrhlt	r3, [r4, #12]
 80044dc:	181b      	addge	r3, r3, r0
 80044de:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80044e2:	bfac      	ite	ge
 80044e4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80044e6:	81a3      	strhlt	r3, [r4, #12]
 80044e8:	bd10      	pop	{r4, pc}

080044ea <__swrite>:
 80044ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044ee:	461f      	mov	r7, r3
 80044f0:	898b      	ldrh	r3, [r1, #12]
 80044f2:	05db      	lsls	r3, r3, #23
 80044f4:	4605      	mov	r5, r0
 80044f6:	460c      	mov	r4, r1
 80044f8:	4616      	mov	r6, r2
 80044fa:	d505      	bpl.n	8004508 <__swrite+0x1e>
 80044fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004500:	2302      	movs	r3, #2
 8004502:	2200      	movs	r2, #0
 8004504:	f000 f83c 	bl	8004580 <_lseek_r>
 8004508:	89a3      	ldrh	r3, [r4, #12]
 800450a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800450e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004512:	81a3      	strh	r3, [r4, #12]
 8004514:	4632      	mov	r2, r6
 8004516:	463b      	mov	r3, r7
 8004518:	4628      	mov	r0, r5
 800451a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800451e:	f000 b853 	b.w	80045c8 <_write_r>

08004522 <__sseek>:
 8004522:	b510      	push	{r4, lr}
 8004524:	460c      	mov	r4, r1
 8004526:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800452a:	f000 f829 	bl	8004580 <_lseek_r>
 800452e:	1c43      	adds	r3, r0, #1
 8004530:	89a3      	ldrh	r3, [r4, #12]
 8004532:	bf15      	itete	ne
 8004534:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004536:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800453a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800453e:	81a3      	strheq	r3, [r4, #12]
 8004540:	bf18      	it	ne
 8004542:	81a3      	strhne	r3, [r4, #12]
 8004544:	bd10      	pop	{r4, pc}

08004546 <__sclose>:
 8004546:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800454a:	f000 b809 	b.w	8004560 <_close_r>

0800454e <memset>:
 800454e:	4402      	add	r2, r0
 8004550:	4603      	mov	r3, r0
 8004552:	4293      	cmp	r3, r2
 8004554:	d100      	bne.n	8004558 <memset+0xa>
 8004556:	4770      	bx	lr
 8004558:	f803 1b01 	strb.w	r1, [r3], #1
 800455c:	e7f9      	b.n	8004552 <memset+0x4>
	...

08004560 <_close_r>:
 8004560:	b538      	push	{r3, r4, r5, lr}
 8004562:	4d06      	ldr	r5, [pc, #24]	@ (800457c <_close_r+0x1c>)
 8004564:	2300      	movs	r3, #0
 8004566:	4604      	mov	r4, r0
 8004568:	4608      	mov	r0, r1
 800456a:	602b      	str	r3, [r5, #0]
 800456c:	f7fc fafa 	bl	8000b64 <_close>
 8004570:	1c43      	adds	r3, r0, #1
 8004572:	d102      	bne.n	800457a <_close_r+0x1a>
 8004574:	682b      	ldr	r3, [r5, #0]
 8004576:	b103      	cbz	r3, 800457a <_close_r+0x1a>
 8004578:	6023      	str	r3, [r4, #0]
 800457a:	bd38      	pop	{r3, r4, r5, pc}
 800457c:	200002b4 	.word	0x200002b4

08004580 <_lseek_r>:
 8004580:	b538      	push	{r3, r4, r5, lr}
 8004582:	4d07      	ldr	r5, [pc, #28]	@ (80045a0 <_lseek_r+0x20>)
 8004584:	4604      	mov	r4, r0
 8004586:	4608      	mov	r0, r1
 8004588:	4611      	mov	r1, r2
 800458a:	2200      	movs	r2, #0
 800458c:	602a      	str	r2, [r5, #0]
 800458e:	461a      	mov	r2, r3
 8004590:	f7fc fb0f 	bl	8000bb2 <_lseek>
 8004594:	1c43      	adds	r3, r0, #1
 8004596:	d102      	bne.n	800459e <_lseek_r+0x1e>
 8004598:	682b      	ldr	r3, [r5, #0]
 800459a:	b103      	cbz	r3, 800459e <_lseek_r+0x1e>
 800459c:	6023      	str	r3, [r4, #0]
 800459e:	bd38      	pop	{r3, r4, r5, pc}
 80045a0:	200002b4 	.word	0x200002b4

080045a4 <_read_r>:
 80045a4:	b538      	push	{r3, r4, r5, lr}
 80045a6:	4d07      	ldr	r5, [pc, #28]	@ (80045c4 <_read_r+0x20>)
 80045a8:	4604      	mov	r4, r0
 80045aa:	4608      	mov	r0, r1
 80045ac:	4611      	mov	r1, r2
 80045ae:	2200      	movs	r2, #0
 80045b0:	602a      	str	r2, [r5, #0]
 80045b2:	461a      	mov	r2, r3
 80045b4:	f7fc fa9d 	bl	8000af2 <_read>
 80045b8:	1c43      	adds	r3, r0, #1
 80045ba:	d102      	bne.n	80045c2 <_read_r+0x1e>
 80045bc:	682b      	ldr	r3, [r5, #0]
 80045be:	b103      	cbz	r3, 80045c2 <_read_r+0x1e>
 80045c0:	6023      	str	r3, [r4, #0]
 80045c2:	bd38      	pop	{r3, r4, r5, pc}
 80045c4:	200002b4 	.word	0x200002b4

080045c8 <_write_r>:
 80045c8:	b538      	push	{r3, r4, r5, lr}
 80045ca:	4d07      	ldr	r5, [pc, #28]	@ (80045e8 <_write_r+0x20>)
 80045cc:	4604      	mov	r4, r0
 80045ce:	4608      	mov	r0, r1
 80045d0:	4611      	mov	r1, r2
 80045d2:	2200      	movs	r2, #0
 80045d4:	602a      	str	r2, [r5, #0]
 80045d6:	461a      	mov	r2, r3
 80045d8:	f7fc faa8 	bl	8000b2c <_write>
 80045dc:	1c43      	adds	r3, r0, #1
 80045de:	d102      	bne.n	80045e6 <_write_r+0x1e>
 80045e0:	682b      	ldr	r3, [r5, #0]
 80045e2:	b103      	cbz	r3, 80045e6 <_write_r+0x1e>
 80045e4:	6023      	str	r3, [r4, #0]
 80045e6:	bd38      	pop	{r3, r4, r5, pc}
 80045e8:	200002b4 	.word	0x200002b4

080045ec <__errno>:
 80045ec:	4b01      	ldr	r3, [pc, #4]	@ (80045f4 <__errno+0x8>)
 80045ee:	6818      	ldr	r0, [r3, #0]
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	20000018 	.word	0x20000018

080045f8 <__libc_init_array>:
 80045f8:	b570      	push	{r4, r5, r6, lr}
 80045fa:	4d0d      	ldr	r5, [pc, #52]	@ (8004630 <__libc_init_array+0x38>)
 80045fc:	4c0d      	ldr	r4, [pc, #52]	@ (8004634 <__libc_init_array+0x3c>)
 80045fe:	1b64      	subs	r4, r4, r5
 8004600:	10a4      	asrs	r4, r4, #2
 8004602:	2600      	movs	r6, #0
 8004604:	42a6      	cmp	r6, r4
 8004606:	d109      	bne.n	800461c <__libc_init_array+0x24>
 8004608:	4d0b      	ldr	r5, [pc, #44]	@ (8004638 <__libc_init_array+0x40>)
 800460a:	4c0c      	ldr	r4, [pc, #48]	@ (800463c <__libc_init_array+0x44>)
 800460c:	f000 fdb8 	bl	8005180 <_init>
 8004610:	1b64      	subs	r4, r4, r5
 8004612:	10a4      	asrs	r4, r4, #2
 8004614:	2600      	movs	r6, #0
 8004616:	42a6      	cmp	r6, r4
 8004618:	d105      	bne.n	8004626 <__libc_init_array+0x2e>
 800461a:	bd70      	pop	{r4, r5, r6, pc}
 800461c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004620:	4798      	blx	r3
 8004622:	3601      	adds	r6, #1
 8004624:	e7ee      	b.n	8004604 <__libc_init_array+0xc>
 8004626:	f855 3b04 	ldr.w	r3, [r5], #4
 800462a:	4798      	blx	r3
 800462c:	3601      	adds	r6, #1
 800462e:	e7f2      	b.n	8004616 <__libc_init_array+0x1e>
 8004630:	08005228 	.word	0x08005228
 8004634:	08005228 	.word	0x08005228
 8004638:	08005228 	.word	0x08005228
 800463c:	0800522c 	.word	0x0800522c

08004640 <__retarget_lock_init_recursive>:
 8004640:	4770      	bx	lr

08004642 <__retarget_lock_acquire_recursive>:
 8004642:	4770      	bx	lr

08004644 <__retarget_lock_release_recursive>:
 8004644:	4770      	bx	lr
	...

08004648 <_free_r>:
 8004648:	b538      	push	{r3, r4, r5, lr}
 800464a:	4605      	mov	r5, r0
 800464c:	2900      	cmp	r1, #0
 800464e:	d041      	beq.n	80046d4 <_free_r+0x8c>
 8004650:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004654:	1f0c      	subs	r4, r1, #4
 8004656:	2b00      	cmp	r3, #0
 8004658:	bfb8      	it	lt
 800465a:	18e4      	addlt	r4, r4, r3
 800465c:	f000 f8e0 	bl	8004820 <__malloc_lock>
 8004660:	4a1d      	ldr	r2, [pc, #116]	@ (80046d8 <_free_r+0x90>)
 8004662:	6813      	ldr	r3, [r2, #0]
 8004664:	b933      	cbnz	r3, 8004674 <_free_r+0x2c>
 8004666:	6063      	str	r3, [r4, #4]
 8004668:	6014      	str	r4, [r2, #0]
 800466a:	4628      	mov	r0, r5
 800466c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004670:	f000 b8dc 	b.w	800482c <__malloc_unlock>
 8004674:	42a3      	cmp	r3, r4
 8004676:	d908      	bls.n	800468a <_free_r+0x42>
 8004678:	6820      	ldr	r0, [r4, #0]
 800467a:	1821      	adds	r1, r4, r0
 800467c:	428b      	cmp	r3, r1
 800467e:	bf01      	itttt	eq
 8004680:	6819      	ldreq	r1, [r3, #0]
 8004682:	685b      	ldreq	r3, [r3, #4]
 8004684:	1809      	addeq	r1, r1, r0
 8004686:	6021      	streq	r1, [r4, #0]
 8004688:	e7ed      	b.n	8004666 <_free_r+0x1e>
 800468a:	461a      	mov	r2, r3
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	b10b      	cbz	r3, 8004694 <_free_r+0x4c>
 8004690:	42a3      	cmp	r3, r4
 8004692:	d9fa      	bls.n	800468a <_free_r+0x42>
 8004694:	6811      	ldr	r1, [r2, #0]
 8004696:	1850      	adds	r0, r2, r1
 8004698:	42a0      	cmp	r0, r4
 800469a:	d10b      	bne.n	80046b4 <_free_r+0x6c>
 800469c:	6820      	ldr	r0, [r4, #0]
 800469e:	4401      	add	r1, r0
 80046a0:	1850      	adds	r0, r2, r1
 80046a2:	4283      	cmp	r3, r0
 80046a4:	6011      	str	r1, [r2, #0]
 80046a6:	d1e0      	bne.n	800466a <_free_r+0x22>
 80046a8:	6818      	ldr	r0, [r3, #0]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	6053      	str	r3, [r2, #4]
 80046ae:	4408      	add	r0, r1
 80046b0:	6010      	str	r0, [r2, #0]
 80046b2:	e7da      	b.n	800466a <_free_r+0x22>
 80046b4:	d902      	bls.n	80046bc <_free_r+0x74>
 80046b6:	230c      	movs	r3, #12
 80046b8:	602b      	str	r3, [r5, #0]
 80046ba:	e7d6      	b.n	800466a <_free_r+0x22>
 80046bc:	6820      	ldr	r0, [r4, #0]
 80046be:	1821      	adds	r1, r4, r0
 80046c0:	428b      	cmp	r3, r1
 80046c2:	bf04      	itt	eq
 80046c4:	6819      	ldreq	r1, [r3, #0]
 80046c6:	685b      	ldreq	r3, [r3, #4]
 80046c8:	6063      	str	r3, [r4, #4]
 80046ca:	bf04      	itt	eq
 80046cc:	1809      	addeq	r1, r1, r0
 80046ce:	6021      	streq	r1, [r4, #0]
 80046d0:	6054      	str	r4, [r2, #4]
 80046d2:	e7ca      	b.n	800466a <_free_r+0x22>
 80046d4:	bd38      	pop	{r3, r4, r5, pc}
 80046d6:	bf00      	nop
 80046d8:	200002c0 	.word	0x200002c0

080046dc <sbrk_aligned>:
 80046dc:	b570      	push	{r4, r5, r6, lr}
 80046de:	4e0f      	ldr	r6, [pc, #60]	@ (800471c <sbrk_aligned+0x40>)
 80046e0:	460c      	mov	r4, r1
 80046e2:	6831      	ldr	r1, [r6, #0]
 80046e4:	4605      	mov	r5, r0
 80046e6:	b911      	cbnz	r1, 80046ee <sbrk_aligned+0x12>
 80046e8:	f000 fcb6 	bl	8005058 <_sbrk_r>
 80046ec:	6030      	str	r0, [r6, #0]
 80046ee:	4621      	mov	r1, r4
 80046f0:	4628      	mov	r0, r5
 80046f2:	f000 fcb1 	bl	8005058 <_sbrk_r>
 80046f6:	1c43      	adds	r3, r0, #1
 80046f8:	d103      	bne.n	8004702 <sbrk_aligned+0x26>
 80046fa:	f04f 34ff 	mov.w	r4, #4294967295
 80046fe:	4620      	mov	r0, r4
 8004700:	bd70      	pop	{r4, r5, r6, pc}
 8004702:	1cc4      	adds	r4, r0, #3
 8004704:	f024 0403 	bic.w	r4, r4, #3
 8004708:	42a0      	cmp	r0, r4
 800470a:	d0f8      	beq.n	80046fe <sbrk_aligned+0x22>
 800470c:	1a21      	subs	r1, r4, r0
 800470e:	4628      	mov	r0, r5
 8004710:	f000 fca2 	bl	8005058 <_sbrk_r>
 8004714:	3001      	adds	r0, #1
 8004716:	d1f2      	bne.n	80046fe <sbrk_aligned+0x22>
 8004718:	e7ef      	b.n	80046fa <sbrk_aligned+0x1e>
 800471a:	bf00      	nop
 800471c:	200002bc 	.word	0x200002bc

08004720 <_malloc_r>:
 8004720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004724:	1ccd      	adds	r5, r1, #3
 8004726:	f025 0503 	bic.w	r5, r5, #3
 800472a:	3508      	adds	r5, #8
 800472c:	2d0c      	cmp	r5, #12
 800472e:	bf38      	it	cc
 8004730:	250c      	movcc	r5, #12
 8004732:	2d00      	cmp	r5, #0
 8004734:	4606      	mov	r6, r0
 8004736:	db01      	blt.n	800473c <_malloc_r+0x1c>
 8004738:	42a9      	cmp	r1, r5
 800473a:	d904      	bls.n	8004746 <_malloc_r+0x26>
 800473c:	230c      	movs	r3, #12
 800473e:	6033      	str	r3, [r6, #0]
 8004740:	2000      	movs	r0, #0
 8004742:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004746:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800481c <_malloc_r+0xfc>
 800474a:	f000 f869 	bl	8004820 <__malloc_lock>
 800474e:	f8d8 3000 	ldr.w	r3, [r8]
 8004752:	461c      	mov	r4, r3
 8004754:	bb44      	cbnz	r4, 80047a8 <_malloc_r+0x88>
 8004756:	4629      	mov	r1, r5
 8004758:	4630      	mov	r0, r6
 800475a:	f7ff ffbf 	bl	80046dc <sbrk_aligned>
 800475e:	1c43      	adds	r3, r0, #1
 8004760:	4604      	mov	r4, r0
 8004762:	d158      	bne.n	8004816 <_malloc_r+0xf6>
 8004764:	f8d8 4000 	ldr.w	r4, [r8]
 8004768:	4627      	mov	r7, r4
 800476a:	2f00      	cmp	r7, #0
 800476c:	d143      	bne.n	80047f6 <_malloc_r+0xd6>
 800476e:	2c00      	cmp	r4, #0
 8004770:	d04b      	beq.n	800480a <_malloc_r+0xea>
 8004772:	6823      	ldr	r3, [r4, #0]
 8004774:	4639      	mov	r1, r7
 8004776:	4630      	mov	r0, r6
 8004778:	eb04 0903 	add.w	r9, r4, r3
 800477c:	f000 fc6c 	bl	8005058 <_sbrk_r>
 8004780:	4581      	cmp	r9, r0
 8004782:	d142      	bne.n	800480a <_malloc_r+0xea>
 8004784:	6821      	ldr	r1, [r4, #0]
 8004786:	1a6d      	subs	r5, r5, r1
 8004788:	4629      	mov	r1, r5
 800478a:	4630      	mov	r0, r6
 800478c:	f7ff ffa6 	bl	80046dc <sbrk_aligned>
 8004790:	3001      	adds	r0, #1
 8004792:	d03a      	beq.n	800480a <_malloc_r+0xea>
 8004794:	6823      	ldr	r3, [r4, #0]
 8004796:	442b      	add	r3, r5
 8004798:	6023      	str	r3, [r4, #0]
 800479a:	f8d8 3000 	ldr.w	r3, [r8]
 800479e:	685a      	ldr	r2, [r3, #4]
 80047a0:	bb62      	cbnz	r2, 80047fc <_malloc_r+0xdc>
 80047a2:	f8c8 7000 	str.w	r7, [r8]
 80047a6:	e00f      	b.n	80047c8 <_malloc_r+0xa8>
 80047a8:	6822      	ldr	r2, [r4, #0]
 80047aa:	1b52      	subs	r2, r2, r5
 80047ac:	d420      	bmi.n	80047f0 <_malloc_r+0xd0>
 80047ae:	2a0b      	cmp	r2, #11
 80047b0:	d917      	bls.n	80047e2 <_malloc_r+0xc2>
 80047b2:	1961      	adds	r1, r4, r5
 80047b4:	42a3      	cmp	r3, r4
 80047b6:	6025      	str	r5, [r4, #0]
 80047b8:	bf18      	it	ne
 80047ba:	6059      	strne	r1, [r3, #4]
 80047bc:	6863      	ldr	r3, [r4, #4]
 80047be:	bf08      	it	eq
 80047c0:	f8c8 1000 	streq.w	r1, [r8]
 80047c4:	5162      	str	r2, [r4, r5]
 80047c6:	604b      	str	r3, [r1, #4]
 80047c8:	4630      	mov	r0, r6
 80047ca:	f000 f82f 	bl	800482c <__malloc_unlock>
 80047ce:	f104 000b 	add.w	r0, r4, #11
 80047d2:	1d23      	adds	r3, r4, #4
 80047d4:	f020 0007 	bic.w	r0, r0, #7
 80047d8:	1ac2      	subs	r2, r0, r3
 80047da:	bf1c      	itt	ne
 80047dc:	1a1b      	subne	r3, r3, r0
 80047de:	50a3      	strne	r3, [r4, r2]
 80047e0:	e7af      	b.n	8004742 <_malloc_r+0x22>
 80047e2:	6862      	ldr	r2, [r4, #4]
 80047e4:	42a3      	cmp	r3, r4
 80047e6:	bf0c      	ite	eq
 80047e8:	f8c8 2000 	streq.w	r2, [r8]
 80047ec:	605a      	strne	r2, [r3, #4]
 80047ee:	e7eb      	b.n	80047c8 <_malloc_r+0xa8>
 80047f0:	4623      	mov	r3, r4
 80047f2:	6864      	ldr	r4, [r4, #4]
 80047f4:	e7ae      	b.n	8004754 <_malloc_r+0x34>
 80047f6:	463c      	mov	r4, r7
 80047f8:	687f      	ldr	r7, [r7, #4]
 80047fa:	e7b6      	b.n	800476a <_malloc_r+0x4a>
 80047fc:	461a      	mov	r2, r3
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	42a3      	cmp	r3, r4
 8004802:	d1fb      	bne.n	80047fc <_malloc_r+0xdc>
 8004804:	2300      	movs	r3, #0
 8004806:	6053      	str	r3, [r2, #4]
 8004808:	e7de      	b.n	80047c8 <_malloc_r+0xa8>
 800480a:	230c      	movs	r3, #12
 800480c:	6033      	str	r3, [r6, #0]
 800480e:	4630      	mov	r0, r6
 8004810:	f000 f80c 	bl	800482c <__malloc_unlock>
 8004814:	e794      	b.n	8004740 <_malloc_r+0x20>
 8004816:	6005      	str	r5, [r0, #0]
 8004818:	e7d6      	b.n	80047c8 <_malloc_r+0xa8>
 800481a:	bf00      	nop
 800481c:	200002c0 	.word	0x200002c0

08004820 <__malloc_lock>:
 8004820:	4801      	ldr	r0, [pc, #4]	@ (8004828 <__malloc_lock+0x8>)
 8004822:	f7ff bf0e 	b.w	8004642 <__retarget_lock_acquire_recursive>
 8004826:	bf00      	nop
 8004828:	200002b8 	.word	0x200002b8

0800482c <__malloc_unlock>:
 800482c:	4801      	ldr	r0, [pc, #4]	@ (8004834 <__malloc_unlock+0x8>)
 800482e:	f7ff bf09 	b.w	8004644 <__retarget_lock_release_recursive>
 8004832:	bf00      	nop
 8004834:	200002b8 	.word	0x200002b8

08004838 <__sfputc_r>:
 8004838:	6893      	ldr	r3, [r2, #8]
 800483a:	3b01      	subs	r3, #1
 800483c:	2b00      	cmp	r3, #0
 800483e:	b410      	push	{r4}
 8004840:	6093      	str	r3, [r2, #8]
 8004842:	da08      	bge.n	8004856 <__sfputc_r+0x1e>
 8004844:	6994      	ldr	r4, [r2, #24]
 8004846:	42a3      	cmp	r3, r4
 8004848:	db01      	blt.n	800484e <__sfputc_r+0x16>
 800484a:	290a      	cmp	r1, #10
 800484c:	d103      	bne.n	8004856 <__sfputc_r+0x1e>
 800484e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004852:	f000 bb6d 	b.w	8004f30 <__swbuf_r>
 8004856:	6813      	ldr	r3, [r2, #0]
 8004858:	1c58      	adds	r0, r3, #1
 800485a:	6010      	str	r0, [r2, #0]
 800485c:	7019      	strb	r1, [r3, #0]
 800485e:	4608      	mov	r0, r1
 8004860:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004864:	4770      	bx	lr

08004866 <__sfputs_r>:
 8004866:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004868:	4606      	mov	r6, r0
 800486a:	460f      	mov	r7, r1
 800486c:	4614      	mov	r4, r2
 800486e:	18d5      	adds	r5, r2, r3
 8004870:	42ac      	cmp	r4, r5
 8004872:	d101      	bne.n	8004878 <__sfputs_r+0x12>
 8004874:	2000      	movs	r0, #0
 8004876:	e007      	b.n	8004888 <__sfputs_r+0x22>
 8004878:	f814 1b01 	ldrb.w	r1, [r4], #1
 800487c:	463a      	mov	r2, r7
 800487e:	4630      	mov	r0, r6
 8004880:	f7ff ffda 	bl	8004838 <__sfputc_r>
 8004884:	1c43      	adds	r3, r0, #1
 8004886:	d1f3      	bne.n	8004870 <__sfputs_r+0xa>
 8004888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800488c <_vfiprintf_r>:
 800488c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004890:	460d      	mov	r5, r1
 8004892:	b09d      	sub	sp, #116	@ 0x74
 8004894:	4614      	mov	r4, r2
 8004896:	4698      	mov	r8, r3
 8004898:	4606      	mov	r6, r0
 800489a:	b118      	cbz	r0, 80048a4 <_vfiprintf_r+0x18>
 800489c:	6a03      	ldr	r3, [r0, #32]
 800489e:	b90b      	cbnz	r3, 80048a4 <_vfiprintf_r+0x18>
 80048a0:	f7ff fdca 	bl	8004438 <__sinit>
 80048a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80048a6:	07d9      	lsls	r1, r3, #31
 80048a8:	d405      	bmi.n	80048b6 <_vfiprintf_r+0x2a>
 80048aa:	89ab      	ldrh	r3, [r5, #12]
 80048ac:	059a      	lsls	r2, r3, #22
 80048ae:	d402      	bmi.n	80048b6 <_vfiprintf_r+0x2a>
 80048b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80048b2:	f7ff fec6 	bl	8004642 <__retarget_lock_acquire_recursive>
 80048b6:	89ab      	ldrh	r3, [r5, #12]
 80048b8:	071b      	lsls	r3, r3, #28
 80048ba:	d501      	bpl.n	80048c0 <_vfiprintf_r+0x34>
 80048bc:	692b      	ldr	r3, [r5, #16]
 80048be:	b99b      	cbnz	r3, 80048e8 <_vfiprintf_r+0x5c>
 80048c0:	4629      	mov	r1, r5
 80048c2:	4630      	mov	r0, r6
 80048c4:	f000 fb72 	bl	8004fac <__swsetup_r>
 80048c8:	b170      	cbz	r0, 80048e8 <_vfiprintf_r+0x5c>
 80048ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80048cc:	07dc      	lsls	r4, r3, #31
 80048ce:	d504      	bpl.n	80048da <_vfiprintf_r+0x4e>
 80048d0:	f04f 30ff 	mov.w	r0, #4294967295
 80048d4:	b01d      	add	sp, #116	@ 0x74
 80048d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048da:	89ab      	ldrh	r3, [r5, #12]
 80048dc:	0598      	lsls	r0, r3, #22
 80048de:	d4f7      	bmi.n	80048d0 <_vfiprintf_r+0x44>
 80048e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80048e2:	f7ff feaf 	bl	8004644 <__retarget_lock_release_recursive>
 80048e6:	e7f3      	b.n	80048d0 <_vfiprintf_r+0x44>
 80048e8:	2300      	movs	r3, #0
 80048ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80048ec:	2320      	movs	r3, #32
 80048ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80048f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80048f6:	2330      	movs	r3, #48	@ 0x30
 80048f8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004aa8 <_vfiprintf_r+0x21c>
 80048fc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004900:	f04f 0901 	mov.w	r9, #1
 8004904:	4623      	mov	r3, r4
 8004906:	469a      	mov	sl, r3
 8004908:	f813 2b01 	ldrb.w	r2, [r3], #1
 800490c:	b10a      	cbz	r2, 8004912 <_vfiprintf_r+0x86>
 800490e:	2a25      	cmp	r2, #37	@ 0x25
 8004910:	d1f9      	bne.n	8004906 <_vfiprintf_r+0x7a>
 8004912:	ebba 0b04 	subs.w	fp, sl, r4
 8004916:	d00b      	beq.n	8004930 <_vfiprintf_r+0xa4>
 8004918:	465b      	mov	r3, fp
 800491a:	4622      	mov	r2, r4
 800491c:	4629      	mov	r1, r5
 800491e:	4630      	mov	r0, r6
 8004920:	f7ff ffa1 	bl	8004866 <__sfputs_r>
 8004924:	3001      	adds	r0, #1
 8004926:	f000 80a7 	beq.w	8004a78 <_vfiprintf_r+0x1ec>
 800492a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800492c:	445a      	add	r2, fp
 800492e:	9209      	str	r2, [sp, #36]	@ 0x24
 8004930:	f89a 3000 	ldrb.w	r3, [sl]
 8004934:	2b00      	cmp	r3, #0
 8004936:	f000 809f 	beq.w	8004a78 <_vfiprintf_r+0x1ec>
 800493a:	2300      	movs	r3, #0
 800493c:	f04f 32ff 	mov.w	r2, #4294967295
 8004940:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004944:	f10a 0a01 	add.w	sl, sl, #1
 8004948:	9304      	str	r3, [sp, #16]
 800494a:	9307      	str	r3, [sp, #28]
 800494c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004950:	931a      	str	r3, [sp, #104]	@ 0x68
 8004952:	4654      	mov	r4, sl
 8004954:	2205      	movs	r2, #5
 8004956:	f814 1b01 	ldrb.w	r1, [r4], #1
 800495a:	4853      	ldr	r0, [pc, #332]	@ (8004aa8 <_vfiprintf_r+0x21c>)
 800495c:	f7fb fc38 	bl	80001d0 <memchr>
 8004960:	9a04      	ldr	r2, [sp, #16]
 8004962:	b9d8      	cbnz	r0, 800499c <_vfiprintf_r+0x110>
 8004964:	06d1      	lsls	r1, r2, #27
 8004966:	bf44      	itt	mi
 8004968:	2320      	movmi	r3, #32
 800496a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800496e:	0713      	lsls	r3, r2, #28
 8004970:	bf44      	itt	mi
 8004972:	232b      	movmi	r3, #43	@ 0x2b
 8004974:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004978:	f89a 3000 	ldrb.w	r3, [sl]
 800497c:	2b2a      	cmp	r3, #42	@ 0x2a
 800497e:	d015      	beq.n	80049ac <_vfiprintf_r+0x120>
 8004980:	9a07      	ldr	r2, [sp, #28]
 8004982:	4654      	mov	r4, sl
 8004984:	2000      	movs	r0, #0
 8004986:	f04f 0c0a 	mov.w	ip, #10
 800498a:	4621      	mov	r1, r4
 800498c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004990:	3b30      	subs	r3, #48	@ 0x30
 8004992:	2b09      	cmp	r3, #9
 8004994:	d94b      	bls.n	8004a2e <_vfiprintf_r+0x1a2>
 8004996:	b1b0      	cbz	r0, 80049c6 <_vfiprintf_r+0x13a>
 8004998:	9207      	str	r2, [sp, #28]
 800499a:	e014      	b.n	80049c6 <_vfiprintf_r+0x13a>
 800499c:	eba0 0308 	sub.w	r3, r0, r8
 80049a0:	fa09 f303 	lsl.w	r3, r9, r3
 80049a4:	4313      	orrs	r3, r2
 80049a6:	9304      	str	r3, [sp, #16]
 80049a8:	46a2      	mov	sl, r4
 80049aa:	e7d2      	b.n	8004952 <_vfiprintf_r+0xc6>
 80049ac:	9b03      	ldr	r3, [sp, #12]
 80049ae:	1d19      	adds	r1, r3, #4
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	9103      	str	r1, [sp, #12]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	bfbb      	ittet	lt
 80049b8:	425b      	neglt	r3, r3
 80049ba:	f042 0202 	orrlt.w	r2, r2, #2
 80049be:	9307      	strge	r3, [sp, #28]
 80049c0:	9307      	strlt	r3, [sp, #28]
 80049c2:	bfb8      	it	lt
 80049c4:	9204      	strlt	r2, [sp, #16]
 80049c6:	7823      	ldrb	r3, [r4, #0]
 80049c8:	2b2e      	cmp	r3, #46	@ 0x2e
 80049ca:	d10a      	bne.n	80049e2 <_vfiprintf_r+0x156>
 80049cc:	7863      	ldrb	r3, [r4, #1]
 80049ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80049d0:	d132      	bne.n	8004a38 <_vfiprintf_r+0x1ac>
 80049d2:	9b03      	ldr	r3, [sp, #12]
 80049d4:	1d1a      	adds	r2, r3, #4
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	9203      	str	r2, [sp, #12]
 80049da:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80049de:	3402      	adds	r4, #2
 80049e0:	9305      	str	r3, [sp, #20]
 80049e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004ab8 <_vfiprintf_r+0x22c>
 80049e6:	7821      	ldrb	r1, [r4, #0]
 80049e8:	2203      	movs	r2, #3
 80049ea:	4650      	mov	r0, sl
 80049ec:	f7fb fbf0 	bl	80001d0 <memchr>
 80049f0:	b138      	cbz	r0, 8004a02 <_vfiprintf_r+0x176>
 80049f2:	9b04      	ldr	r3, [sp, #16]
 80049f4:	eba0 000a 	sub.w	r0, r0, sl
 80049f8:	2240      	movs	r2, #64	@ 0x40
 80049fa:	4082      	lsls	r2, r0
 80049fc:	4313      	orrs	r3, r2
 80049fe:	3401      	adds	r4, #1
 8004a00:	9304      	str	r3, [sp, #16]
 8004a02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a06:	4829      	ldr	r0, [pc, #164]	@ (8004aac <_vfiprintf_r+0x220>)
 8004a08:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004a0c:	2206      	movs	r2, #6
 8004a0e:	f7fb fbdf 	bl	80001d0 <memchr>
 8004a12:	2800      	cmp	r0, #0
 8004a14:	d03f      	beq.n	8004a96 <_vfiprintf_r+0x20a>
 8004a16:	4b26      	ldr	r3, [pc, #152]	@ (8004ab0 <_vfiprintf_r+0x224>)
 8004a18:	bb1b      	cbnz	r3, 8004a62 <_vfiprintf_r+0x1d6>
 8004a1a:	9b03      	ldr	r3, [sp, #12]
 8004a1c:	3307      	adds	r3, #7
 8004a1e:	f023 0307 	bic.w	r3, r3, #7
 8004a22:	3308      	adds	r3, #8
 8004a24:	9303      	str	r3, [sp, #12]
 8004a26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a28:	443b      	add	r3, r7
 8004a2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a2c:	e76a      	b.n	8004904 <_vfiprintf_r+0x78>
 8004a2e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a32:	460c      	mov	r4, r1
 8004a34:	2001      	movs	r0, #1
 8004a36:	e7a8      	b.n	800498a <_vfiprintf_r+0xfe>
 8004a38:	2300      	movs	r3, #0
 8004a3a:	3401      	adds	r4, #1
 8004a3c:	9305      	str	r3, [sp, #20]
 8004a3e:	4619      	mov	r1, r3
 8004a40:	f04f 0c0a 	mov.w	ip, #10
 8004a44:	4620      	mov	r0, r4
 8004a46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a4a:	3a30      	subs	r2, #48	@ 0x30
 8004a4c:	2a09      	cmp	r2, #9
 8004a4e:	d903      	bls.n	8004a58 <_vfiprintf_r+0x1cc>
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d0c6      	beq.n	80049e2 <_vfiprintf_r+0x156>
 8004a54:	9105      	str	r1, [sp, #20]
 8004a56:	e7c4      	b.n	80049e2 <_vfiprintf_r+0x156>
 8004a58:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a5c:	4604      	mov	r4, r0
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e7f0      	b.n	8004a44 <_vfiprintf_r+0x1b8>
 8004a62:	ab03      	add	r3, sp, #12
 8004a64:	9300      	str	r3, [sp, #0]
 8004a66:	462a      	mov	r2, r5
 8004a68:	4b12      	ldr	r3, [pc, #72]	@ (8004ab4 <_vfiprintf_r+0x228>)
 8004a6a:	a904      	add	r1, sp, #16
 8004a6c:	4630      	mov	r0, r6
 8004a6e:	f3af 8000 	nop.w
 8004a72:	4607      	mov	r7, r0
 8004a74:	1c78      	adds	r0, r7, #1
 8004a76:	d1d6      	bne.n	8004a26 <_vfiprintf_r+0x19a>
 8004a78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004a7a:	07d9      	lsls	r1, r3, #31
 8004a7c:	d405      	bmi.n	8004a8a <_vfiprintf_r+0x1fe>
 8004a7e:	89ab      	ldrh	r3, [r5, #12]
 8004a80:	059a      	lsls	r2, r3, #22
 8004a82:	d402      	bmi.n	8004a8a <_vfiprintf_r+0x1fe>
 8004a84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004a86:	f7ff fddd 	bl	8004644 <__retarget_lock_release_recursive>
 8004a8a:	89ab      	ldrh	r3, [r5, #12]
 8004a8c:	065b      	lsls	r3, r3, #25
 8004a8e:	f53f af1f 	bmi.w	80048d0 <_vfiprintf_r+0x44>
 8004a92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004a94:	e71e      	b.n	80048d4 <_vfiprintf_r+0x48>
 8004a96:	ab03      	add	r3, sp, #12
 8004a98:	9300      	str	r3, [sp, #0]
 8004a9a:	462a      	mov	r2, r5
 8004a9c:	4b05      	ldr	r3, [pc, #20]	@ (8004ab4 <_vfiprintf_r+0x228>)
 8004a9e:	a904      	add	r1, sp, #16
 8004aa0:	4630      	mov	r0, r6
 8004aa2:	f000 f879 	bl	8004b98 <_printf_i>
 8004aa6:	e7e4      	b.n	8004a72 <_vfiprintf_r+0x1e6>
 8004aa8:	080051ec 	.word	0x080051ec
 8004aac:	080051f6 	.word	0x080051f6
 8004ab0:	00000000 	.word	0x00000000
 8004ab4:	08004867 	.word	0x08004867
 8004ab8:	080051f2 	.word	0x080051f2

08004abc <_printf_common>:
 8004abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ac0:	4616      	mov	r6, r2
 8004ac2:	4698      	mov	r8, r3
 8004ac4:	688a      	ldr	r2, [r1, #8]
 8004ac6:	690b      	ldr	r3, [r1, #16]
 8004ac8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004acc:	4293      	cmp	r3, r2
 8004ace:	bfb8      	it	lt
 8004ad0:	4613      	movlt	r3, r2
 8004ad2:	6033      	str	r3, [r6, #0]
 8004ad4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004ad8:	4607      	mov	r7, r0
 8004ada:	460c      	mov	r4, r1
 8004adc:	b10a      	cbz	r2, 8004ae2 <_printf_common+0x26>
 8004ade:	3301      	adds	r3, #1
 8004ae0:	6033      	str	r3, [r6, #0]
 8004ae2:	6823      	ldr	r3, [r4, #0]
 8004ae4:	0699      	lsls	r1, r3, #26
 8004ae6:	bf42      	ittt	mi
 8004ae8:	6833      	ldrmi	r3, [r6, #0]
 8004aea:	3302      	addmi	r3, #2
 8004aec:	6033      	strmi	r3, [r6, #0]
 8004aee:	6825      	ldr	r5, [r4, #0]
 8004af0:	f015 0506 	ands.w	r5, r5, #6
 8004af4:	d106      	bne.n	8004b04 <_printf_common+0x48>
 8004af6:	f104 0a19 	add.w	sl, r4, #25
 8004afa:	68e3      	ldr	r3, [r4, #12]
 8004afc:	6832      	ldr	r2, [r6, #0]
 8004afe:	1a9b      	subs	r3, r3, r2
 8004b00:	42ab      	cmp	r3, r5
 8004b02:	dc26      	bgt.n	8004b52 <_printf_common+0x96>
 8004b04:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004b08:	6822      	ldr	r2, [r4, #0]
 8004b0a:	3b00      	subs	r3, #0
 8004b0c:	bf18      	it	ne
 8004b0e:	2301      	movne	r3, #1
 8004b10:	0692      	lsls	r2, r2, #26
 8004b12:	d42b      	bmi.n	8004b6c <_printf_common+0xb0>
 8004b14:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004b18:	4641      	mov	r1, r8
 8004b1a:	4638      	mov	r0, r7
 8004b1c:	47c8      	blx	r9
 8004b1e:	3001      	adds	r0, #1
 8004b20:	d01e      	beq.n	8004b60 <_printf_common+0xa4>
 8004b22:	6823      	ldr	r3, [r4, #0]
 8004b24:	6922      	ldr	r2, [r4, #16]
 8004b26:	f003 0306 	and.w	r3, r3, #6
 8004b2a:	2b04      	cmp	r3, #4
 8004b2c:	bf02      	ittt	eq
 8004b2e:	68e5      	ldreq	r5, [r4, #12]
 8004b30:	6833      	ldreq	r3, [r6, #0]
 8004b32:	1aed      	subeq	r5, r5, r3
 8004b34:	68a3      	ldr	r3, [r4, #8]
 8004b36:	bf0c      	ite	eq
 8004b38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b3c:	2500      	movne	r5, #0
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	bfc4      	itt	gt
 8004b42:	1a9b      	subgt	r3, r3, r2
 8004b44:	18ed      	addgt	r5, r5, r3
 8004b46:	2600      	movs	r6, #0
 8004b48:	341a      	adds	r4, #26
 8004b4a:	42b5      	cmp	r5, r6
 8004b4c:	d11a      	bne.n	8004b84 <_printf_common+0xc8>
 8004b4e:	2000      	movs	r0, #0
 8004b50:	e008      	b.n	8004b64 <_printf_common+0xa8>
 8004b52:	2301      	movs	r3, #1
 8004b54:	4652      	mov	r2, sl
 8004b56:	4641      	mov	r1, r8
 8004b58:	4638      	mov	r0, r7
 8004b5a:	47c8      	blx	r9
 8004b5c:	3001      	adds	r0, #1
 8004b5e:	d103      	bne.n	8004b68 <_printf_common+0xac>
 8004b60:	f04f 30ff 	mov.w	r0, #4294967295
 8004b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b68:	3501      	adds	r5, #1
 8004b6a:	e7c6      	b.n	8004afa <_printf_common+0x3e>
 8004b6c:	18e1      	adds	r1, r4, r3
 8004b6e:	1c5a      	adds	r2, r3, #1
 8004b70:	2030      	movs	r0, #48	@ 0x30
 8004b72:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004b76:	4422      	add	r2, r4
 8004b78:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004b7c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004b80:	3302      	adds	r3, #2
 8004b82:	e7c7      	b.n	8004b14 <_printf_common+0x58>
 8004b84:	2301      	movs	r3, #1
 8004b86:	4622      	mov	r2, r4
 8004b88:	4641      	mov	r1, r8
 8004b8a:	4638      	mov	r0, r7
 8004b8c:	47c8      	blx	r9
 8004b8e:	3001      	adds	r0, #1
 8004b90:	d0e6      	beq.n	8004b60 <_printf_common+0xa4>
 8004b92:	3601      	adds	r6, #1
 8004b94:	e7d9      	b.n	8004b4a <_printf_common+0x8e>
	...

08004b98 <_printf_i>:
 8004b98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b9c:	7e0f      	ldrb	r7, [r1, #24]
 8004b9e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004ba0:	2f78      	cmp	r7, #120	@ 0x78
 8004ba2:	4691      	mov	r9, r2
 8004ba4:	4680      	mov	r8, r0
 8004ba6:	460c      	mov	r4, r1
 8004ba8:	469a      	mov	sl, r3
 8004baa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004bae:	d807      	bhi.n	8004bc0 <_printf_i+0x28>
 8004bb0:	2f62      	cmp	r7, #98	@ 0x62
 8004bb2:	d80a      	bhi.n	8004bca <_printf_i+0x32>
 8004bb4:	2f00      	cmp	r7, #0
 8004bb6:	f000 80d2 	beq.w	8004d5e <_printf_i+0x1c6>
 8004bba:	2f58      	cmp	r7, #88	@ 0x58
 8004bbc:	f000 80b9 	beq.w	8004d32 <_printf_i+0x19a>
 8004bc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004bc4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004bc8:	e03a      	b.n	8004c40 <_printf_i+0xa8>
 8004bca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004bce:	2b15      	cmp	r3, #21
 8004bd0:	d8f6      	bhi.n	8004bc0 <_printf_i+0x28>
 8004bd2:	a101      	add	r1, pc, #4	@ (adr r1, 8004bd8 <_printf_i+0x40>)
 8004bd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004bd8:	08004c31 	.word	0x08004c31
 8004bdc:	08004c45 	.word	0x08004c45
 8004be0:	08004bc1 	.word	0x08004bc1
 8004be4:	08004bc1 	.word	0x08004bc1
 8004be8:	08004bc1 	.word	0x08004bc1
 8004bec:	08004bc1 	.word	0x08004bc1
 8004bf0:	08004c45 	.word	0x08004c45
 8004bf4:	08004bc1 	.word	0x08004bc1
 8004bf8:	08004bc1 	.word	0x08004bc1
 8004bfc:	08004bc1 	.word	0x08004bc1
 8004c00:	08004bc1 	.word	0x08004bc1
 8004c04:	08004d45 	.word	0x08004d45
 8004c08:	08004c6f 	.word	0x08004c6f
 8004c0c:	08004cff 	.word	0x08004cff
 8004c10:	08004bc1 	.word	0x08004bc1
 8004c14:	08004bc1 	.word	0x08004bc1
 8004c18:	08004d67 	.word	0x08004d67
 8004c1c:	08004bc1 	.word	0x08004bc1
 8004c20:	08004c6f 	.word	0x08004c6f
 8004c24:	08004bc1 	.word	0x08004bc1
 8004c28:	08004bc1 	.word	0x08004bc1
 8004c2c:	08004d07 	.word	0x08004d07
 8004c30:	6833      	ldr	r3, [r6, #0]
 8004c32:	1d1a      	adds	r2, r3, #4
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	6032      	str	r2, [r6, #0]
 8004c38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c3c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004c40:	2301      	movs	r3, #1
 8004c42:	e09d      	b.n	8004d80 <_printf_i+0x1e8>
 8004c44:	6833      	ldr	r3, [r6, #0]
 8004c46:	6820      	ldr	r0, [r4, #0]
 8004c48:	1d19      	adds	r1, r3, #4
 8004c4a:	6031      	str	r1, [r6, #0]
 8004c4c:	0606      	lsls	r6, r0, #24
 8004c4e:	d501      	bpl.n	8004c54 <_printf_i+0xbc>
 8004c50:	681d      	ldr	r5, [r3, #0]
 8004c52:	e003      	b.n	8004c5c <_printf_i+0xc4>
 8004c54:	0645      	lsls	r5, r0, #25
 8004c56:	d5fb      	bpl.n	8004c50 <_printf_i+0xb8>
 8004c58:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004c5c:	2d00      	cmp	r5, #0
 8004c5e:	da03      	bge.n	8004c68 <_printf_i+0xd0>
 8004c60:	232d      	movs	r3, #45	@ 0x2d
 8004c62:	426d      	negs	r5, r5
 8004c64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c68:	4859      	ldr	r0, [pc, #356]	@ (8004dd0 <_printf_i+0x238>)
 8004c6a:	230a      	movs	r3, #10
 8004c6c:	e011      	b.n	8004c92 <_printf_i+0xfa>
 8004c6e:	6821      	ldr	r1, [r4, #0]
 8004c70:	6833      	ldr	r3, [r6, #0]
 8004c72:	0608      	lsls	r0, r1, #24
 8004c74:	f853 5b04 	ldr.w	r5, [r3], #4
 8004c78:	d402      	bmi.n	8004c80 <_printf_i+0xe8>
 8004c7a:	0649      	lsls	r1, r1, #25
 8004c7c:	bf48      	it	mi
 8004c7e:	b2ad      	uxthmi	r5, r5
 8004c80:	2f6f      	cmp	r7, #111	@ 0x6f
 8004c82:	4853      	ldr	r0, [pc, #332]	@ (8004dd0 <_printf_i+0x238>)
 8004c84:	6033      	str	r3, [r6, #0]
 8004c86:	bf14      	ite	ne
 8004c88:	230a      	movne	r3, #10
 8004c8a:	2308      	moveq	r3, #8
 8004c8c:	2100      	movs	r1, #0
 8004c8e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004c92:	6866      	ldr	r6, [r4, #4]
 8004c94:	60a6      	str	r6, [r4, #8]
 8004c96:	2e00      	cmp	r6, #0
 8004c98:	bfa2      	ittt	ge
 8004c9a:	6821      	ldrge	r1, [r4, #0]
 8004c9c:	f021 0104 	bicge.w	r1, r1, #4
 8004ca0:	6021      	strge	r1, [r4, #0]
 8004ca2:	b90d      	cbnz	r5, 8004ca8 <_printf_i+0x110>
 8004ca4:	2e00      	cmp	r6, #0
 8004ca6:	d04b      	beq.n	8004d40 <_printf_i+0x1a8>
 8004ca8:	4616      	mov	r6, r2
 8004caa:	fbb5 f1f3 	udiv	r1, r5, r3
 8004cae:	fb03 5711 	mls	r7, r3, r1, r5
 8004cb2:	5dc7      	ldrb	r7, [r0, r7]
 8004cb4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004cb8:	462f      	mov	r7, r5
 8004cba:	42bb      	cmp	r3, r7
 8004cbc:	460d      	mov	r5, r1
 8004cbe:	d9f4      	bls.n	8004caa <_printf_i+0x112>
 8004cc0:	2b08      	cmp	r3, #8
 8004cc2:	d10b      	bne.n	8004cdc <_printf_i+0x144>
 8004cc4:	6823      	ldr	r3, [r4, #0]
 8004cc6:	07df      	lsls	r7, r3, #31
 8004cc8:	d508      	bpl.n	8004cdc <_printf_i+0x144>
 8004cca:	6923      	ldr	r3, [r4, #16]
 8004ccc:	6861      	ldr	r1, [r4, #4]
 8004cce:	4299      	cmp	r1, r3
 8004cd0:	bfde      	ittt	le
 8004cd2:	2330      	movle	r3, #48	@ 0x30
 8004cd4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004cd8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004cdc:	1b92      	subs	r2, r2, r6
 8004cde:	6122      	str	r2, [r4, #16]
 8004ce0:	f8cd a000 	str.w	sl, [sp]
 8004ce4:	464b      	mov	r3, r9
 8004ce6:	aa03      	add	r2, sp, #12
 8004ce8:	4621      	mov	r1, r4
 8004cea:	4640      	mov	r0, r8
 8004cec:	f7ff fee6 	bl	8004abc <_printf_common>
 8004cf0:	3001      	adds	r0, #1
 8004cf2:	d14a      	bne.n	8004d8a <_printf_i+0x1f2>
 8004cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8004cf8:	b004      	add	sp, #16
 8004cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cfe:	6823      	ldr	r3, [r4, #0]
 8004d00:	f043 0320 	orr.w	r3, r3, #32
 8004d04:	6023      	str	r3, [r4, #0]
 8004d06:	4833      	ldr	r0, [pc, #204]	@ (8004dd4 <_printf_i+0x23c>)
 8004d08:	2778      	movs	r7, #120	@ 0x78
 8004d0a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004d0e:	6823      	ldr	r3, [r4, #0]
 8004d10:	6831      	ldr	r1, [r6, #0]
 8004d12:	061f      	lsls	r7, r3, #24
 8004d14:	f851 5b04 	ldr.w	r5, [r1], #4
 8004d18:	d402      	bmi.n	8004d20 <_printf_i+0x188>
 8004d1a:	065f      	lsls	r7, r3, #25
 8004d1c:	bf48      	it	mi
 8004d1e:	b2ad      	uxthmi	r5, r5
 8004d20:	6031      	str	r1, [r6, #0]
 8004d22:	07d9      	lsls	r1, r3, #31
 8004d24:	bf44      	itt	mi
 8004d26:	f043 0320 	orrmi.w	r3, r3, #32
 8004d2a:	6023      	strmi	r3, [r4, #0]
 8004d2c:	b11d      	cbz	r5, 8004d36 <_printf_i+0x19e>
 8004d2e:	2310      	movs	r3, #16
 8004d30:	e7ac      	b.n	8004c8c <_printf_i+0xf4>
 8004d32:	4827      	ldr	r0, [pc, #156]	@ (8004dd0 <_printf_i+0x238>)
 8004d34:	e7e9      	b.n	8004d0a <_printf_i+0x172>
 8004d36:	6823      	ldr	r3, [r4, #0]
 8004d38:	f023 0320 	bic.w	r3, r3, #32
 8004d3c:	6023      	str	r3, [r4, #0]
 8004d3e:	e7f6      	b.n	8004d2e <_printf_i+0x196>
 8004d40:	4616      	mov	r6, r2
 8004d42:	e7bd      	b.n	8004cc0 <_printf_i+0x128>
 8004d44:	6833      	ldr	r3, [r6, #0]
 8004d46:	6825      	ldr	r5, [r4, #0]
 8004d48:	6961      	ldr	r1, [r4, #20]
 8004d4a:	1d18      	adds	r0, r3, #4
 8004d4c:	6030      	str	r0, [r6, #0]
 8004d4e:	062e      	lsls	r6, r5, #24
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	d501      	bpl.n	8004d58 <_printf_i+0x1c0>
 8004d54:	6019      	str	r1, [r3, #0]
 8004d56:	e002      	b.n	8004d5e <_printf_i+0x1c6>
 8004d58:	0668      	lsls	r0, r5, #25
 8004d5a:	d5fb      	bpl.n	8004d54 <_printf_i+0x1bc>
 8004d5c:	8019      	strh	r1, [r3, #0]
 8004d5e:	2300      	movs	r3, #0
 8004d60:	6123      	str	r3, [r4, #16]
 8004d62:	4616      	mov	r6, r2
 8004d64:	e7bc      	b.n	8004ce0 <_printf_i+0x148>
 8004d66:	6833      	ldr	r3, [r6, #0]
 8004d68:	1d1a      	adds	r2, r3, #4
 8004d6a:	6032      	str	r2, [r6, #0]
 8004d6c:	681e      	ldr	r6, [r3, #0]
 8004d6e:	6862      	ldr	r2, [r4, #4]
 8004d70:	2100      	movs	r1, #0
 8004d72:	4630      	mov	r0, r6
 8004d74:	f7fb fa2c 	bl	80001d0 <memchr>
 8004d78:	b108      	cbz	r0, 8004d7e <_printf_i+0x1e6>
 8004d7a:	1b80      	subs	r0, r0, r6
 8004d7c:	6060      	str	r0, [r4, #4]
 8004d7e:	6863      	ldr	r3, [r4, #4]
 8004d80:	6123      	str	r3, [r4, #16]
 8004d82:	2300      	movs	r3, #0
 8004d84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d88:	e7aa      	b.n	8004ce0 <_printf_i+0x148>
 8004d8a:	6923      	ldr	r3, [r4, #16]
 8004d8c:	4632      	mov	r2, r6
 8004d8e:	4649      	mov	r1, r9
 8004d90:	4640      	mov	r0, r8
 8004d92:	47d0      	blx	sl
 8004d94:	3001      	adds	r0, #1
 8004d96:	d0ad      	beq.n	8004cf4 <_printf_i+0x15c>
 8004d98:	6823      	ldr	r3, [r4, #0]
 8004d9a:	079b      	lsls	r3, r3, #30
 8004d9c:	d413      	bmi.n	8004dc6 <_printf_i+0x22e>
 8004d9e:	68e0      	ldr	r0, [r4, #12]
 8004da0:	9b03      	ldr	r3, [sp, #12]
 8004da2:	4298      	cmp	r0, r3
 8004da4:	bfb8      	it	lt
 8004da6:	4618      	movlt	r0, r3
 8004da8:	e7a6      	b.n	8004cf8 <_printf_i+0x160>
 8004daa:	2301      	movs	r3, #1
 8004dac:	4632      	mov	r2, r6
 8004dae:	4649      	mov	r1, r9
 8004db0:	4640      	mov	r0, r8
 8004db2:	47d0      	blx	sl
 8004db4:	3001      	adds	r0, #1
 8004db6:	d09d      	beq.n	8004cf4 <_printf_i+0x15c>
 8004db8:	3501      	adds	r5, #1
 8004dba:	68e3      	ldr	r3, [r4, #12]
 8004dbc:	9903      	ldr	r1, [sp, #12]
 8004dbe:	1a5b      	subs	r3, r3, r1
 8004dc0:	42ab      	cmp	r3, r5
 8004dc2:	dcf2      	bgt.n	8004daa <_printf_i+0x212>
 8004dc4:	e7eb      	b.n	8004d9e <_printf_i+0x206>
 8004dc6:	2500      	movs	r5, #0
 8004dc8:	f104 0619 	add.w	r6, r4, #25
 8004dcc:	e7f5      	b.n	8004dba <_printf_i+0x222>
 8004dce:	bf00      	nop
 8004dd0:	080051fd 	.word	0x080051fd
 8004dd4:	0800520e 	.word	0x0800520e

08004dd8 <__sflush_r>:
 8004dd8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004de0:	0716      	lsls	r6, r2, #28
 8004de2:	4605      	mov	r5, r0
 8004de4:	460c      	mov	r4, r1
 8004de6:	d454      	bmi.n	8004e92 <__sflush_r+0xba>
 8004de8:	684b      	ldr	r3, [r1, #4]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	dc02      	bgt.n	8004df4 <__sflush_r+0x1c>
 8004dee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	dd48      	ble.n	8004e86 <__sflush_r+0xae>
 8004df4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004df6:	2e00      	cmp	r6, #0
 8004df8:	d045      	beq.n	8004e86 <__sflush_r+0xae>
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004e00:	682f      	ldr	r7, [r5, #0]
 8004e02:	6a21      	ldr	r1, [r4, #32]
 8004e04:	602b      	str	r3, [r5, #0]
 8004e06:	d030      	beq.n	8004e6a <__sflush_r+0x92>
 8004e08:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004e0a:	89a3      	ldrh	r3, [r4, #12]
 8004e0c:	0759      	lsls	r1, r3, #29
 8004e0e:	d505      	bpl.n	8004e1c <__sflush_r+0x44>
 8004e10:	6863      	ldr	r3, [r4, #4]
 8004e12:	1ad2      	subs	r2, r2, r3
 8004e14:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004e16:	b10b      	cbz	r3, 8004e1c <__sflush_r+0x44>
 8004e18:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004e1a:	1ad2      	subs	r2, r2, r3
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004e20:	6a21      	ldr	r1, [r4, #32]
 8004e22:	4628      	mov	r0, r5
 8004e24:	47b0      	blx	r6
 8004e26:	1c43      	adds	r3, r0, #1
 8004e28:	89a3      	ldrh	r3, [r4, #12]
 8004e2a:	d106      	bne.n	8004e3a <__sflush_r+0x62>
 8004e2c:	6829      	ldr	r1, [r5, #0]
 8004e2e:	291d      	cmp	r1, #29
 8004e30:	d82b      	bhi.n	8004e8a <__sflush_r+0xb2>
 8004e32:	4a2a      	ldr	r2, [pc, #168]	@ (8004edc <__sflush_r+0x104>)
 8004e34:	410a      	asrs	r2, r1
 8004e36:	07d6      	lsls	r6, r2, #31
 8004e38:	d427      	bmi.n	8004e8a <__sflush_r+0xb2>
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	6062      	str	r2, [r4, #4]
 8004e3e:	04d9      	lsls	r1, r3, #19
 8004e40:	6922      	ldr	r2, [r4, #16]
 8004e42:	6022      	str	r2, [r4, #0]
 8004e44:	d504      	bpl.n	8004e50 <__sflush_r+0x78>
 8004e46:	1c42      	adds	r2, r0, #1
 8004e48:	d101      	bne.n	8004e4e <__sflush_r+0x76>
 8004e4a:	682b      	ldr	r3, [r5, #0]
 8004e4c:	b903      	cbnz	r3, 8004e50 <__sflush_r+0x78>
 8004e4e:	6560      	str	r0, [r4, #84]	@ 0x54
 8004e50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004e52:	602f      	str	r7, [r5, #0]
 8004e54:	b1b9      	cbz	r1, 8004e86 <__sflush_r+0xae>
 8004e56:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004e5a:	4299      	cmp	r1, r3
 8004e5c:	d002      	beq.n	8004e64 <__sflush_r+0x8c>
 8004e5e:	4628      	mov	r0, r5
 8004e60:	f7ff fbf2 	bl	8004648 <_free_r>
 8004e64:	2300      	movs	r3, #0
 8004e66:	6363      	str	r3, [r4, #52]	@ 0x34
 8004e68:	e00d      	b.n	8004e86 <__sflush_r+0xae>
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	4628      	mov	r0, r5
 8004e6e:	47b0      	blx	r6
 8004e70:	4602      	mov	r2, r0
 8004e72:	1c50      	adds	r0, r2, #1
 8004e74:	d1c9      	bne.n	8004e0a <__sflush_r+0x32>
 8004e76:	682b      	ldr	r3, [r5, #0]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d0c6      	beq.n	8004e0a <__sflush_r+0x32>
 8004e7c:	2b1d      	cmp	r3, #29
 8004e7e:	d001      	beq.n	8004e84 <__sflush_r+0xac>
 8004e80:	2b16      	cmp	r3, #22
 8004e82:	d11e      	bne.n	8004ec2 <__sflush_r+0xea>
 8004e84:	602f      	str	r7, [r5, #0]
 8004e86:	2000      	movs	r0, #0
 8004e88:	e022      	b.n	8004ed0 <__sflush_r+0xf8>
 8004e8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e8e:	b21b      	sxth	r3, r3
 8004e90:	e01b      	b.n	8004eca <__sflush_r+0xf2>
 8004e92:	690f      	ldr	r7, [r1, #16]
 8004e94:	2f00      	cmp	r7, #0
 8004e96:	d0f6      	beq.n	8004e86 <__sflush_r+0xae>
 8004e98:	0793      	lsls	r3, r2, #30
 8004e9a:	680e      	ldr	r6, [r1, #0]
 8004e9c:	bf08      	it	eq
 8004e9e:	694b      	ldreq	r3, [r1, #20]
 8004ea0:	600f      	str	r7, [r1, #0]
 8004ea2:	bf18      	it	ne
 8004ea4:	2300      	movne	r3, #0
 8004ea6:	eba6 0807 	sub.w	r8, r6, r7
 8004eaa:	608b      	str	r3, [r1, #8]
 8004eac:	f1b8 0f00 	cmp.w	r8, #0
 8004eb0:	dde9      	ble.n	8004e86 <__sflush_r+0xae>
 8004eb2:	6a21      	ldr	r1, [r4, #32]
 8004eb4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004eb6:	4643      	mov	r3, r8
 8004eb8:	463a      	mov	r2, r7
 8004eba:	4628      	mov	r0, r5
 8004ebc:	47b0      	blx	r6
 8004ebe:	2800      	cmp	r0, #0
 8004ec0:	dc08      	bgt.n	8004ed4 <__sflush_r+0xfc>
 8004ec2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ec6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004eca:	81a3      	strh	r3, [r4, #12]
 8004ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ed4:	4407      	add	r7, r0
 8004ed6:	eba8 0800 	sub.w	r8, r8, r0
 8004eda:	e7e7      	b.n	8004eac <__sflush_r+0xd4>
 8004edc:	dfbffffe 	.word	0xdfbffffe

08004ee0 <_fflush_r>:
 8004ee0:	b538      	push	{r3, r4, r5, lr}
 8004ee2:	690b      	ldr	r3, [r1, #16]
 8004ee4:	4605      	mov	r5, r0
 8004ee6:	460c      	mov	r4, r1
 8004ee8:	b913      	cbnz	r3, 8004ef0 <_fflush_r+0x10>
 8004eea:	2500      	movs	r5, #0
 8004eec:	4628      	mov	r0, r5
 8004eee:	bd38      	pop	{r3, r4, r5, pc}
 8004ef0:	b118      	cbz	r0, 8004efa <_fflush_r+0x1a>
 8004ef2:	6a03      	ldr	r3, [r0, #32]
 8004ef4:	b90b      	cbnz	r3, 8004efa <_fflush_r+0x1a>
 8004ef6:	f7ff fa9f 	bl	8004438 <__sinit>
 8004efa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d0f3      	beq.n	8004eea <_fflush_r+0xa>
 8004f02:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004f04:	07d0      	lsls	r0, r2, #31
 8004f06:	d404      	bmi.n	8004f12 <_fflush_r+0x32>
 8004f08:	0599      	lsls	r1, r3, #22
 8004f0a:	d402      	bmi.n	8004f12 <_fflush_r+0x32>
 8004f0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004f0e:	f7ff fb98 	bl	8004642 <__retarget_lock_acquire_recursive>
 8004f12:	4628      	mov	r0, r5
 8004f14:	4621      	mov	r1, r4
 8004f16:	f7ff ff5f 	bl	8004dd8 <__sflush_r>
 8004f1a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004f1c:	07da      	lsls	r2, r3, #31
 8004f1e:	4605      	mov	r5, r0
 8004f20:	d4e4      	bmi.n	8004eec <_fflush_r+0xc>
 8004f22:	89a3      	ldrh	r3, [r4, #12]
 8004f24:	059b      	lsls	r3, r3, #22
 8004f26:	d4e1      	bmi.n	8004eec <_fflush_r+0xc>
 8004f28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004f2a:	f7ff fb8b 	bl	8004644 <__retarget_lock_release_recursive>
 8004f2e:	e7dd      	b.n	8004eec <_fflush_r+0xc>

08004f30 <__swbuf_r>:
 8004f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f32:	460e      	mov	r6, r1
 8004f34:	4614      	mov	r4, r2
 8004f36:	4605      	mov	r5, r0
 8004f38:	b118      	cbz	r0, 8004f42 <__swbuf_r+0x12>
 8004f3a:	6a03      	ldr	r3, [r0, #32]
 8004f3c:	b90b      	cbnz	r3, 8004f42 <__swbuf_r+0x12>
 8004f3e:	f7ff fa7b 	bl	8004438 <__sinit>
 8004f42:	69a3      	ldr	r3, [r4, #24]
 8004f44:	60a3      	str	r3, [r4, #8]
 8004f46:	89a3      	ldrh	r3, [r4, #12]
 8004f48:	071a      	lsls	r2, r3, #28
 8004f4a:	d501      	bpl.n	8004f50 <__swbuf_r+0x20>
 8004f4c:	6923      	ldr	r3, [r4, #16]
 8004f4e:	b943      	cbnz	r3, 8004f62 <__swbuf_r+0x32>
 8004f50:	4621      	mov	r1, r4
 8004f52:	4628      	mov	r0, r5
 8004f54:	f000 f82a 	bl	8004fac <__swsetup_r>
 8004f58:	b118      	cbz	r0, 8004f62 <__swbuf_r+0x32>
 8004f5a:	f04f 37ff 	mov.w	r7, #4294967295
 8004f5e:	4638      	mov	r0, r7
 8004f60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f62:	6823      	ldr	r3, [r4, #0]
 8004f64:	6922      	ldr	r2, [r4, #16]
 8004f66:	1a98      	subs	r0, r3, r2
 8004f68:	6963      	ldr	r3, [r4, #20]
 8004f6a:	b2f6      	uxtb	r6, r6
 8004f6c:	4283      	cmp	r3, r0
 8004f6e:	4637      	mov	r7, r6
 8004f70:	dc05      	bgt.n	8004f7e <__swbuf_r+0x4e>
 8004f72:	4621      	mov	r1, r4
 8004f74:	4628      	mov	r0, r5
 8004f76:	f7ff ffb3 	bl	8004ee0 <_fflush_r>
 8004f7a:	2800      	cmp	r0, #0
 8004f7c:	d1ed      	bne.n	8004f5a <__swbuf_r+0x2a>
 8004f7e:	68a3      	ldr	r3, [r4, #8]
 8004f80:	3b01      	subs	r3, #1
 8004f82:	60a3      	str	r3, [r4, #8]
 8004f84:	6823      	ldr	r3, [r4, #0]
 8004f86:	1c5a      	adds	r2, r3, #1
 8004f88:	6022      	str	r2, [r4, #0]
 8004f8a:	701e      	strb	r6, [r3, #0]
 8004f8c:	6962      	ldr	r2, [r4, #20]
 8004f8e:	1c43      	adds	r3, r0, #1
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d004      	beq.n	8004f9e <__swbuf_r+0x6e>
 8004f94:	89a3      	ldrh	r3, [r4, #12]
 8004f96:	07db      	lsls	r3, r3, #31
 8004f98:	d5e1      	bpl.n	8004f5e <__swbuf_r+0x2e>
 8004f9a:	2e0a      	cmp	r6, #10
 8004f9c:	d1df      	bne.n	8004f5e <__swbuf_r+0x2e>
 8004f9e:	4621      	mov	r1, r4
 8004fa0:	4628      	mov	r0, r5
 8004fa2:	f7ff ff9d 	bl	8004ee0 <_fflush_r>
 8004fa6:	2800      	cmp	r0, #0
 8004fa8:	d0d9      	beq.n	8004f5e <__swbuf_r+0x2e>
 8004faa:	e7d6      	b.n	8004f5a <__swbuf_r+0x2a>

08004fac <__swsetup_r>:
 8004fac:	b538      	push	{r3, r4, r5, lr}
 8004fae:	4b29      	ldr	r3, [pc, #164]	@ (8005054 <__swsetup_r+0xa8>)
 8004fb0:	4605      	mov	r5, r0
 8004fb2:	6818      	ldr	r0, [r3, #0]
 8004fb4:	460c      	mov	r4, r1
 8004fb6:	b118      	cbz	r0, 8004fc0 <__swsetup_r+0x14>
 8004fb8:	6a03      	ldr	r3, [r0, #32]
 8004fba:	b90b      	cbnz	r3, 8004fc0 <__swsetup_r+0x14>
 8004fbc:	f7ff fa3c 	bl	8004438 <__sinit>
 8004fc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fc4:	0719      	lsls	r1, r3, #28
 8004fc6:	d422      	bmi.n	800500e <__swsetup_r+0x62>
 8004fc8:	06da      	lsls	r2, r3, #27
 8004fca:	d407      	bmi.n	8004fdc <__swsetup_r+0x30>
 8004fcc:	2209      	movs	r2, #9
 8004fce:	602a      	str	r2, [r5, #0]
 8004fd0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004fd4:	81a3      	strh	r3, [r4, #12]
 8004fd6:	f04f 30ff 	mov.w	r0, #4294967295
 8004fda:	e033      	b.n	8005044 <__swsetup_r+0x98>
 8004fdc:	0758      	lsls	r0, r3, #29
 8004fde:	d512      	bpl.n	8005006 <__swsetup_r+0x5a>
 8004fe0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004fe2:	b141      	cbz	r1, 8004ff6 <__swsetup_r+0x4a>
 8004fe4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004fe8:	4299      	cmp	r1, r3
 8004fea:	d002      	beq.n	8004ff2 <__swsetup_r+0x46>
 8004fec:	4628      	mov	r0, r5
 8004fee:	f7ff fb2b 	bl	8004648 <_free_r>
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	6363      	str	r3, [r4, #52]	@ 0x34
 8004ff6:	89a3      	ldrh	r3, [r4, #12]
 8004ff8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004ffc:	81a3      	strh	r3, [r4, #12]
 8004ffe:	2300      	movs	r3, #0
 8005000:	6063      	str	r3, [r4, #4]
 8005002:	6923      	ldr	r3, [r4, #16]
 8005004:	6023      	str	r3, [r4, #0]
 8005006:	89a3      	ldrh	r3, [r4, #12]
 8005008:	f043 0308 	orr.w	r3, r3, #8
 800500c:	81a3      	strh	r3, [r4, #12]
 800500e:	6923      	ldr	r3, [r4, #16]
 8005010:	b94b      	cbnz	r3, 8005026 <__swsetup_r+0x7a>
 8005012:	89a3      	ldrh	r3, [r4, #12]
 8005014:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005018:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800501c:	d003      	beq.n	8005026 <__swsetup_r+0x7a>
 800501e:	4621      	mov	r1, r4
 8005020:	4628      	mov	r0, r5
 8005022:	f000 f84f 	bl	80050c4 <__smakebuf_r>
 8005026:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800502a:	f013 0201 	ands.w	r2, r3, #1
 800502e:	d00a      	beq.n	8005046 <__swsetup_r+0x9a>
 8005030:	2200      	movs	r2, #0
 8005032:	60a2      	str	r2, [r4, #8]
 8005034:	6962      	ldr	r2, [r4, #20]
 8005036:	4252      	negs	r2, r2
 8005038:	61a2      	str	r2, [r4, #24]
 800503a:	6922      	ldr	r2, [r4, #16]
 800503c:	b942      	cbnz	r2, 8005050 <__swsetup_r+0xa4>
 800503e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005042:	d1c5      	bne.n	8004fd0 <__swsetup_r+0x24>
 8005044:	bd38      	pop	{r3, r4, r5, pc}
 8005046:	0799      	lsls	r1, r3, #30
 8005048:	bf58      	it	pl
 800504a:	6962      	ldrpl	r2, [r4, #20]
 800504c:	60a2      	str	r2, [r4, #8]
 800504e:	e7f4      	b.n	800503a <__swsetup_r+0x8e>
 8005050:	2000      	movs	r0, #0
 8005052:	e7f7      	b.n	8005044 <__swsetup_r+0x98>
 8005054:	20000018 	.word	0x20000018

08005058 <_sbrk_r>:
 8005058:	b538      	push	{r3, r4, r5, lr}
 800505a:	4d06      	ldr	r5, [pc, #24]	@ (8005074 <_sbrk_r+0x1c>)
 800505c:	2300      	movs	r3, #0
 800505e:	4604      	mov	r4, r0
 8005060:	4608      	mov	r0, r1
 8005062:	602b      	str	r3, [r5, #0]
 8005064:	f7fb fdb2 	bl	8000bcc <_sbrk>
 8005068:	1c43      	adds	r3, r0, #1
 800506a:	d102      	bne.n	8005072 <_sbrk_r+0x1a>
 800506c:	682b      	ldr	r3, [r5, #0]
 800506e:	b103      	cbz	r3, 8005072 <_sbrk_r+0x1a>
 8005070:	6023      	str	r3, [r4, #0]
 8005072:	bd38      	pop	{r3, r4, r5, pc}
 8005074:	200002b4 	.word	0x200002b4

08005078 <__swhatbuf_r>:
 8005078:	b570      	push	{r4, r5, r6, lr}
 800507a:	460c      	mov	r4, r1
 800507c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005080:	2900      	cmp	r1, #0
 8005082:	b096      	sub	sp, #88	@ 0x58
 8005084:	4615      	mov	r5, r2
 8005086:	461e      	mov	r6, r3
 8005088:	da0d      	bge.n	80050a6 <__swhatbuf_r+0x2e>
 800508a:	89a3      	ldrh	r3, [r4, #12]
 800508c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005090:	f04f 0100 	mov.w	r1, #0
 8005094:	bf14      	ite	ne
 8005096:	2340      	movne	r3, #64	@ 0x40
 8005098:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800509c:	2000      	movs	r0, #0
 800509e:	6031      	str	r1, [r6, #0]
 80050a0:	602b      	str	r3, [r5, #0]
 80050a2:	b016      	add	sp, #88	@ 0x58
 80050a4:	bd70      	pop	{r4, r5, r6, pc}
 80050a6:	466a      	mov	r2, sp
 80050a8:	f000 f848 	bl	800513c <_fstat_r>
 80050ac:	2800      	cmp	r0, #0
 80050ae:	dbec      	blt.n	800508a <__swhatbuf_r+0x12>
 80050b0:	9901      	ldr	r1, [sp, #4]
 80050b2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80050b6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80050ba:	4259      	negs	r1, r3
 80050bc:	4159      	adcs	r1, r3
 80050be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80050c2:	e7eb      	b.n	800509c <__swhatbuf_r+0x24>

080050c4 <__smakebuf_r>:
 80050c4:	898b      	ldrh	r3, [r1, #12]
 80050c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80050c8:	079d      	lsls	r5, r3, #30
 80050ca:	4606      	mov	r6, r0
 80050cc:	460c      	mov	r4, r1
 80050ce:	d507      	bpl.n	80050e0 <__smakebuf_r+0x1c>
 80050d0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80050d4:	6023      	str	r3, [r4, #0]
 80050d6:	6123      	str	r3, [r4, #16]
 80050d8:	2301      	movs	r3, #1
 80050da:	6163      	str	r3, [r4, #20]
 80050dc:	b003      	add	sp, #12
 80050de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050e0:	ab01      	add	r3, sp, #4
 80050e2:	466a      	mov	r2, sp
 80050e4:	f7ff ffc8 	bl	8005078 <__swhatbuf_r>
 80050e8:	9f00      	ldr	r7, [sp, #0]
 80050ea:	4605      	mov	r5, r0
 80050ec:	4639      	mov	r1, r7
 80050ee:	4630      	mov	r0, r6
 80050f0:	f7ff fb16 	bl	8004720 <_malloc_r>
 80050f4:	b948      	cbnz	r0, 800510a <__smakebuf_r+0x46>
 80050f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050fa:	059a      	lsls	r2, r3, #22
 80050fc:	d4ee      	bmi.n	80050dc <__smakebuf_r+0x18>
 80050fe:	f023 0303 	bic.w	r3, r3, #3
 8005102:	f043 0302 	orr.w	r3, r3, #2
 8005106:	81a3      	strh	r3, [r4, #12]
 8005108:	e7e2      	b.n	80050d0 <__smakebuf_r+0xc>
 800510a:	89a3      	ldrh	r3, [r4, #12]
 800510c:	6020      	str	r0, [r4, #0]
 800510e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005112:	81a3      	strh	r3, [r4, #12]
 8005114:	9b01      	ldr	r3, [sp, #4]
 8005116:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800511a:	b15b      	cbz	r3, 8005134 <__smakebuf_r+0x70>
 800511c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005120:	4630      	mov	r0, r6
 8005122:	f000 f81d 	bl	8005160 <_isatty_r>
 8005126:	b128      	cbz	r0, 8005134 <__smakebuf_r+0x70>
 8005128:	89a3      	ldrh	r3, [r4, #12]
 800512a:	f023 0303 	bic.w	r3, r3, #3
 800512e:	f043 0301 	orr.w	r3, r3, #1
 8005132:	81a3      	strh	r3, [r4, #12]
 8005134:	89a3      	ldrh	r3, [r4, #12]
 8005136:	431d      	orrs	r5, r3
 8005138:	81a5      	strh	r5, [r4, #12]
 800513a:	e7cf      	b.n	80050dc <__smakebuf_r+0x18>

0800513c <_fstat_r>:
 800513c:	b538      	push	{r3, r4, r5, lr}
 800513e:	4d07      	ldr	r5, [pc, #28]	@ (800515c <_fstat_r+0x20>)
 8005140:	2300      	movs	r3, #0
 8005142:	4604      	mov	r4, r0
 8005144:	4608      	mov	r0, r1
 8005146:	4611      	mov	r1, r2
 8005148:	602b      	str	r3, [r5, #0]
 800514a:	f7fb fd17 	bl	8000b7c <_fstat>
 800514e:	1c43      	adds	r3, r0, #1
 8005150:	d102      	bne.n	8005158 <_fstat_r+0x1c>
 8005152:	682b      	ldr	r3, [r5, #0]
 8005154:	b103      	cbz	r3, 8005158 <_fstat_r+0x1c>
 8005156:	6023      	str	r3, [r4, #0]
 8005158:	bd38      	pop	{r3, r4, r5, pc}
 800515a:	bf00      	nop
 800515c:	200002b4 	.word	0x200002b4

08005160 <_isatty_r>:
 8005160:	b538      	push	{r3, r4, r5, lr}
 8005162:	4d06      	ldr	r5, [pc, #24]	@ (800517c <_isatty_r+0x1c>)
 8005164:	2300      	movs	r3, #0
 8005166:	4604      	mov	r4, r0
 8005168:	4608      	mov	r0, r1
 800516a:	602b      	str	r3, [r5, #0]
 800516c:	f7fb fd16 	bl	8000b9c <_isatty>
 8005170:	1c43      	adds	r3, r0, #1
 8005172:	d102      	bne.n	800517a <_isatty_r+0x1a>
 8005174:	682b      	ldr	r3, [r5, #0]
 8005176:	b103      	cbz	r3, 800517a <_isatty_r+0x1a>
 8005178:	6023      	str	r3, [r4, #0]
 800517a:	bd38      	pop	{r3, r4, r5, pc}
 800517c:	200002b4 	.word	0x200002b4

08005180 <_init>:
 8005180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005182:	bf00      	nop
 8005184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005186:	bc08      	pop	{r3}
 8005188:	469e      	mov	lr, r3
 800518a:	4770      	bx	lr

0800518c <_fini>:
 800518c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800518e:	bf00      	nop
 8005190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005192:	bc08      	pop	{r3}
 8005194:	469e      	mov	lr, r3
 8005196:	4770      	bx	lr
