
GestureADXL345.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af94  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0006f7ac  0800b140  0800b140  0000c140  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0807a8ec  0807a8ec  0007ce34  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0807a8ec  0807a8ec  0007b8ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0807a8f4  0807a8f4  0007ce34  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0807a8f4  0807a8f4  0007b8f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0807a8f8  0807a8f8  0007b8f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000e34  20000000  0807a8fc  0007c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002944  20000e34  0807b730  0007ce34  2**2
                  ALLOC
 10 ._user_heap_stack 00010000  20003778  0807b730  0007d778  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0007ce34  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001066e  00000000  00000000  0007ce64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002865  00000000  00000000  0008d4d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c98  00000000  00000000  0008fd38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000989  00000000  00000000  000909d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028d81  00000000  00000000  00091359  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000107e0  00000000  00000000  000ba0da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f82a5  00000000  00000000  000ca8ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  001c2b5f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044e4  00000000  00000000  001c2be8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  001c70cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000e34 	.word	0x20000e34
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b10c 	.word	0x0800b10c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000e38 	.word	0x20000e38
 80001cc:	0800b10c 	.word	0x0800b10c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <normalizeAccelData>:
#define ADXL345_READ        0x80
#define ADXL345_MULTI       0x40

static SPI_HandleTypeDef *adxl_hspi;

void normalizeAccelData(float *x, float *y, float *z) {
 8000ed4:	b480      	push	{r7}
 8000ed6:	b087      	sub	sp, #28
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
    // Usuń grawitację (zakładając, że Z=1g w spoczynku)
    *z -= 1.0f;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	edd3 7a00 	vldr	s15, [r3]
 8000ee6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000eea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	edc3 7a00 	vstr	s15, [r3]

    // Filtr dolnoprzepustowy
    static float prev_x = 0, prev_y = 0, prev_z = 0;
    float alpha = 0.1f;
 8000ef4:	4b2c      	ldr	r3, [pc, #176]	@ (8000fa8 <normalizeAccelData+0xd4>)
 8000ef6:	617b      	str	r3, [r7, #20]
    *x = alpha * (*x) + (1-alpha) * prev_x;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	ed93 7a00 	vldr	s14, [r3]
 8000efe:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000f0a:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f0e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000f12:	4b26      	ldr	r3, [pc, #152]	@ (8000fac <normalizeAccelData+0xd8>)
 8000f14:	edd3 7a00 	vldr	s15, [r3]
 8000f18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	edc3 7a00 	vstr	s15, [r3]
    *y = alpha * (*y) + (1-alpha) * prev_y;
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	ed93 7a00 	vldr	s14, [r3]
 8000f2c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f34:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000f38:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f3c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000f40:	4b1b      	ldr	r3, [pc, #108]	@ (8000fb0 <normalizeAccelData+0xdc>)
 8000f42:	edd3 7a00 	vldr	s15, [r3]
 8000f46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	edc3 7a00 	vstr	s15, [r3]
    *z = alpha * (*z) + (1-alpha) * prev_z;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	ed93 7a00 	vldr	s14, [r3]
 8000f5a:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000f66:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f6a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000f6e:	4b11      	ldr	r3, [pc, #68]	@ (8000fb4 <normalizeAccelData+0xe0>)
 8000f70:	edd3 7a00 	vldr	s15, [r3]
 8000f74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	edc3 7a00 	vstr	s15, [r3]
    prev_x = *x; prev_y = *y; prev_z = *z;
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a09      	ldr	r2, [pc, #36]	@ (8000fac <normalizeAccelData+0xd8>)
 8000f88:	6013      	str	r3, [r2, #0]
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a08      	ldr	r2, [pc, #32]	@ (8000fb0 <normalizeAccelData+0xdc>)
 8000f90:	6013      	str	r3, [r2, #0]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a07      	ldr	r2, [pc, #28]	@ (8000fb4 <normalizeAccelData+0xe0>)
 8000f98:	6013      	str	r3, [r2, #0]
}
 8000f9a:	bf00      	nop
 8000f9c:	371c      	adds	r7, #28
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	3dcccccd 	.word	0x3dcccccd
 8000fac:	20000e54 	.word	0x20000e54
 8000fb0:	20000e58 	.word	0x20000e58
 8000fb4:	20000e5c 	.word	0x20000e5c

08000fb8 <calculateMagnitude>:

float calculateMagnitude(float x, float y, float z) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	ed87 0a03 	vstr	s0, [r7, #12]
 8000fc2:	edc7 0a02 	vstr	s1, [r7, #8]
 8000fc6:	ed87 1a01 	vstr	s2, [r7, #4]
    return sqrtf(x*x + y*y + z*z);
 8000fca:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fce:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000fd2:	edd7 7a02 	vldr	s15, [r7, #8]
 8000fd6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000fda:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000fde:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fe2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000fe6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fea:	eeb0 0a67 	vmov.f32	s0, s15
 8000fee:	f009 ff33 	bl	800ae58 <sqrtf>
 8000ff2:	eef0 7a40 	vmov.f32	s15, s0
}
 8000ff6:	eeb0 0a67 	vmov.f32	s0, s15
 8000ffa:	3710      	adds	r7, #16
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <CS_Select>:

static void CS_Select(void)   { HAL_GPIO_WritePin(ADXL345_CS_PORT, ADXL345_CS_PIN, GPIO_PIN_RESET); }
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
 8001004:	2200      	movs	r2, #0
 8001006:	2110      	movs	r1, #16
 8001008:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800100c:	f001 f99e 	bl	800234c <HAL_GPIO_WritePin>
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}

08001014 <CS_Deselect>:
static void CS_Deselect(void) { HAL_GPIO_WritePin(ADXL345_CS_PORT, ADXL345_CS_PIN, GPIO_PIN_SET); }
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
 8001018:	2201      	movs	r2, #1
 800101a:	2110      	movs	r1, #16
 800101c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001020:	f001 f994 	bl	800234c <HAL_GPIO_WritePin>
 8001024:	bf00      	nop
 8001026:	bd80      	pop	{r7, pc}

08001028 <ADXL345_Write>:

void ADXL345_Write(uint8_t reg, uint8_t value) {
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	460a      	mov	r2, r1
 8001032:	71fb      	strb	r3, [r7, #7]
 8001034:	4613      	mov	r3, r2
 8001036:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2] = { reg, value };
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	733b      	strb	r3, [r7, #12]
 800103c:	79bb      	ldrb	r3, [r7, #6]
 800103e:	737b      	strb	r3, [r7, #13]
    CS_Select();
 8001040:	f7ff ffde 	bl	8001000 <CS_Select>
    HAL_SPI_Transmit(adxl_hspi, buf, 2, HAL_MAX_DELAY);
 8001044:	4b07      	ldr	r3, [pc, #28]	@ (8001064 <ADXL345_Write+0x3c>)
 8001046:	6818      	ldr	r0, [r3, #0]
 8001048:	f107 010c 	add.w	r1, r7, #12
 800104c:	f04f 33ff 	mov.w	r3, #4294967295
 8001050:	2202      	movs	r2, #2
 8001052:	f002 fd56 	bl	8003b02 <HAL_SPI_Transmit>
    CS_Deselect();
 8001056:	f7ff ffdd 	bl	8001014 <CS_Deselect>
}
 800105a:	bf00      	nop
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000e50 	.word	0x20000e50

08001068 <ADXL345_Read>:

void ADXL345_Read(uint8_t reg, uint8_t *data, uint8_t len) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	6039      	str	r1, [r7, #0]
 8001072:	71fb      	strb	r3, [r7, #7]
 8001074:	4613      	mov	r3, r2
 8001076:	71bb      	strb	r3, [r7, #6]
    reg |= ADXL345_READ | ADXL345_MULTI;
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 800107e:	b2db      	uxtb	r3, r3
 8001080:	71fb      	strb	r3, [r7, #7]
    CS_Select();
 8001082:	f7ff ffbd 	bl	8001000 <CS_Select>
    HAL_SPI_Transmit(adxl_hspi, &reg, 1, HAL_MAX_DELAY);
 8001086:	4b0b      	ldr	r3, [pc, #44]	@ (80010b4 <ADXL345_Read+0x4c>)
 8001088:	6818      	ldr	r0, [r3, #0]
 800108a:	1df9      	adds	r1, r7, #7
 800108c:	f04f 33ff 	mov.w	r3, #4294967295
 8001090:	2201      	movs	r2, #1
 8001092:	f002 fd36 	bl	8003b02 <HAL_SPI_Transmit>
    HAL_SPI_Receive(adxl_hspi, data, len, HAL_MAX_DELAY);
 8001096:	4b07      	ldr	r3, [pc, #28]	@ (80010b4 <ADXL345_Read+0x4c>)
 8001098:	6818      	ldr	r0, [r3, #0]
 800109a:	79bb      	ldrb	r3, [r7, #6]
 800109c:	b29a      	uxth	r2, r3
 800109e:	f04f 33ff 	mov.w	r3, #4294967295
 80010a2:	6839      	ldr	r1, [r7, #0]
 80010a4:	f002 fea3 	bl	8003dee <HAL_SPI_Receive>
    CS_Deselect();
 80010a8:	f7ff ffb4 	bl	8001014 <CS_Deselect>
}
 80010ac:	bf00      	nop
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20000e50 	.word	0x20000e50

080010b8 <ADXL345_Init>:

void ADXL345_Init(SPI_HandleTypeDef *hspi) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
    adxl_hspi = hspi;
 80010c0:	4a07      	ldr	r2, [pc, #28]	@ (80010e0 <ADXL345_Init+0x28>)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6013      	str	r3, [r2, #0]
    ADXL345_Write(ADXL345_DATA_FORMAT, 0x01); // Range setting ±4g
 80010c6:	2101      	movs	r1, #1
 80010c8:	2031      	movs	r0, #49	@ 0x31
 80010ca:	f7ff ffad 	bl	8001028 <ADXL345_Write>
    ADXL345_Write(ADXL345_POWER_CTL, 0x08);   // Activate measurements
 80010ce:	2108      	movs	r1, #8
 80010d0:	202d      	movs	r0, #45	@ 0x2d
 80010d2:	f7ff ffa9 	bl	8001028 <ADXL345_Write>
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20000e50 	.word	0x20000e50

080010e4 <ADXL345_GetXYZ>:

void ADXL345_GetXYZ(SPI_HandleTypeDef *hspi, float *x, float *y, float *z) {
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b088      	sub	sp, #32
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	60f8      	str	r0, [r7, #12]
 80010ec:	60b9      	str	r1, [r7, #8]
 80010ee:	607a      	str	r2, [r7, #4]
 80010f0:	603b      	str	r3, [r7, #0]
    uint8_t buf[6];
    ADXL345_Read(ADXL345_DATAX0, buf, 6);
 80010f2:	f107 0314 	add.w	r3, r7, #20
 80010f6:	2206      	movs	r2, #6
 80010f8:	4619      	mov	r1, r3
 80010fa:	2032      	movs	r0, #50	@ 0x32
 80010fc:	f7ff ffb4 	bl	8001068 <ADXL345_Read>
    int16_t raw_x = (int16_t)((buf[1] << 8) | buf[0]);
 8001100:	7d7b      	ldrb	r3, [r7, #21]
 8001102:	b21b      	sxth	r3, r3
 8001104:	021b      	lsls	r3, r3, #8
 8001106:	b21a      	sxth	r2, r3
 8001108:	7d3b      	ldrb	r3, [r7, #20]
 800110a:	b21b      	sxth	r3, r3
 800110c:	4313      	orrs	r3, r2
 800110e:	83fb      	strh	r3, [r7, #30]
    int16_t raw_y = (int16_t)((buf[3] << 8) | buf[2]);
 8001110:	7dfb      	ldrb	r3, [r7, #23]
 8001112:	b21b      	sxth	r3, r3
 8001114:	021b      	lsls	r3, r3, #8
 8001116:	b21a      	sxth	r2, r3
 8001118:	7dbb      	ldrb	r3, [r7, #22]
 800111a:	b21b      	sxth	r3, r3
 800111c:	4313      	orrs	r3, r2
 800111e:	83bb      	strh	r3, [r7, #28]
    int16_t raw_z = (int16_t)((buf[5] << 8) | buf[4]);
 8001120:	7e7b      	ldrb	r3, [r7, #25]
 8001122:	b21b      	sxth	r3, r3
 8001124:	021b      	lsls	r3, r3, #8
 8001126:	b21a      	sxth	r2, r3
 8001128:	7e3b      	ldrb	r3, [r7, #24]
 800112a:	b21b      	sxth	r3, r3
 800112c:	4313      	orrs	r3, r2
 800112e:	837b      	strh	r3, [r7, #26]

    // Conversion to float
    // For a range of ±4g, the sensitivity is about 2mg/LSB in 13-bit mode. We will use a simplified scaling.
    *x = raw_x * 0.004f;
 8001130:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001134:	ee07 3a90 	vmov	s15, r3
 8001138:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800113c:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8001188 <ADXL345_GetXYZ+0xa4>
 8001140:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	edc3 7a00 	vstr	s15, [r3]
    *y = raw_y * 0.004f;
 800114a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800114e:	ee07 3a90 	vmov	s15, r3
 8001152:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001156:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8001188 <ADXL345_GetXYZ+0xa4>
 800115a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	edc3 7a00 	vstr	s15, [r3]
    *z = raw_z * 0.004f;
 8001164:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001168:	ee07 3a90 	vmov	s15, r3
 800116c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001170:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8001188 <ADXL345_GetXYZ+0xa4>
 8001174:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	edc3 7a00 	vstr	s15, [r3]
}
 800117e:	bf00      	nop
 8001180:	3720      	adds	r7, #32
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	3b83126f 	.word	0x3b83126f

0800118c <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
    (void)file;
    HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	b29a      	uxth	r2, r3
 800119c:	f04f 33ff 	mov.w	r3, #4294967295
 80011a0:	68b9      	ldr	r1, [r7, #8]
 80011a2:	4804      	ldr	r0, [pc, #16]	@ (80011b4 <_write+0x28>)
 80011a4:	f003 fb84 	bl	80048b0 <HAL_UART_Transmit>
    return len;
 80011a8:	687b      	ldr	r3, [r7, #4]
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20000ee8 	.word	0x20000ee8

080011b8 <softmax>:

void softmax(float *input, int size) {
 80011b8:	b590      	push	{r4, r7, lr}
 80011ba:	b089      	sub	sp, #36	@ 0x24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
    float max_val = input[0];
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	61fb      	str	r3, [r7, #28]
    for(int i = 1; i < size; i++) {
 80011c8:	2301      	movs	r3, #1
 80011ca:	61bb      	str	r3, [r7, #24]
 80011cc:	e015      	b.n	80011fa <softmax+0x42>
        if(input[i] > max_val) max_val = input[i];
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	4413      	add	r3, r2
 80011d6:	edd3 7a00 	vldr	s15, [r3]
 80011da:	ed97 7a07 	vldr	s14, [r7, #28]
 80011de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011e6:	d505      	bpl.n	80011f4 <softmax+0x3c>
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	687a      	ldr	r2, [r7, #4]
 80011ee:	4413      	add	r3, r2
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	61fb      	str	r3, [r7, #28]
    for(int i = 1; i < size; i++) {
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	3301      	adds	r3, #1
 80011f8:	61bb      	str	r3, [r7, #24]
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	429a      	cmp	r2, r3
 8001200:	dbe5      	blt.n	80011ce <softmax+0x16>
    }

    float sum = 0.0f;
 8001202:	f04f 0300 	mov.w	r3, #0
 8001206:	617b      	str	r3, [r7, #20]
    for(int i = 0; i < size; i++) {
 8001208:	2300      	movs	r3, #0
 800120a:	613b      	str	r3, [r7, #16]
 800120c:	e024      	b.n	8001258 <softmax+0xa0>
        input[i] = expf(input[i] - max_val);
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	4413      	add	r3, r2
 8001216:	ed93 7a00 	vldr	s14, [r3]
 800121a:	edd7 7a07 	vldr	s15, [r7, #28]
 800121e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	18d4      	adds	r4, r2, r3
 800122a:	eeb0 0a67 	vmov.f32	s0, s15
 800122e:	f009 fddd 	bl	800adec <expf>
 8001232:	eef0 7a40 	vmov.f32	s15, s0
 8001236:	edc4 7a00 	vstr	s15, [r4]
        sum += input[i];
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	4413      	add	r3, r2
 8001242:	edd3 7a00 	vldr	s15, [r3]
 8001246:	ed97 7a05 	vldr	s14, [r7, #20]
 800124a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800124e:	edc7 7a05 	vstr	s15, [r7, #20]
    for(int i = 0; i < size; i++) {
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	3301      	adds	r3, #1
 8001256:	613b      	str	r3, [r7, #16]
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	429a      	cmp	r2, r3
 800125e:	dbd6      	blt.n	800120e <softmax+0x56>
    }

    for(int i = 0; i < size; i++) {
 8001260:	2300      	movs	r3, #0
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	e012      	b.n	800128c <softmax+0xd4>
        input[i] /= sum;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	4413      	add	r3, r2
 800126e:	edd3 6a00 	vldr	s13, [r3]
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	4413      	add	r3, r2
 800127a:	ed97 7a05 	vldr	s14, [r7, #20]
 800127e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001282:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 0; i < size; i++) {
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	3301      	adds	r3, #1
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	68fa      	ldr	r2, [r7, #12]
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	429a      	cmp	r2, r3
 8001292:	dbe8      	blt.n	8001266 <softmax+0xae>
    }
}
 8001294:	bf00      	nop
 8001296:	bf00      	nop
 8001298:	3724      	adds	r7, #36	@ 0x24
 800129a:	46bd      	mov	sp, r7
 800129c:	bd90      	pop	{r4, r7, pc}
	...

080012a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012a0:	b5b0      	push	{r4, r5, r7, lr}
 80012a2:	b096      	sub	sp, #88	@ 0x58
 80012a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012a6:	f000 fc2f 	bl	8001b08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012aa:	f000 f981 	bl	80015b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012ae:	f000 fa61 	bl	8001774 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80012b2:	f000 fa2f 	bl	8001714 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80012b6:	f000 f9ef 	bl	8001698 <MX_SPI1_Init>
  MX_CRC_Init();
 80012ba:	f000 f9cb 	bl	8001654 <MX_CRC_Init>

  /* USER CODE BEGIN 2 */
  ADXL345_Init(&hspi1);
 80012be:	48a2      	ldr	r0, [pc, #648]	@ (8001548 <main+0x2a8>)
 80012c0:	f7ff fefa 	bl	80010b8 <ADXL345_Init>
      printf("ADXL345 Initialized.\r\n");
 80012c4:	48a1      	ldr	r0, [pc, #644]	@ (800154c <main+0x2ac>)
 80012c6:	f007 fed3 	bl	8009070 <puts>

      // Inicjalizacja sieci AI
      ai_error err = ai_ai_model_create_and_init(
 80012ca:	4aa1      	ldr	r2, [pc, #644]	@ (8001550 <main+0x2b0>)
 80012cc:	49a1      	ldr	r1, [pc, #644]	@ (8001554 <main+0x2b4>)
 80012ce:	48a2      	ldr	r0, [pc, #648]	@ (8001558 <main+0x2b8>)
 80012d0:	f004 fa2e 	bl	8005730 <ai_ai_model_create_and_init>
 80012d4:	4603      	mov	r3, r0
 80012d6:	633b      	str	r3, [r7, #48]	@ 0x30
          &network,
          AI_AI_MODEL_DATA_ACTIVATIONS_TABLE_GET(),
          AI_AI_MODEL_DATA_WEIGHTS_TABLE_GET()
      );

      if (err.type != AI_ERROR_NONE) {
 80012d8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d00b      	beq.n	80012f8 <main+0x58>
          printf("AI Model Init FAILED! type=%d code=%d\r\n",
                 (int)err.type, (int)err.code);
 80012e0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
          printf("AI Model Init FAILED! type=%d code=%d\r\n",
 80012e4:	4619      	mov	r1, r3
                 (int)err.type, (int)err.code);
 80012e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012e8:	f3c3 2317 	ubfx	r3, r3, #8, #24
          printf("AI Model Init FAILED! type=%d code=%d\r\n",
 80012ec:	461a      	mov	r2, r3
 80012ee:	489b      	ldr	r0, [pc, #620]	@ (800155c <main+0x2bc>)
 80012f0:	f007 fe56 	bl	8008fa0 <iprintf>
          Error_Handler();
 80012f4:	f000 fa6e 	bl	80017d4 <Error_Handler>
      }

      // DODAJ KONFIGURACJĘ TENSORÓW:
      ai_buffer* ai_input = ai_ai_model_inputs_get(network, NULL);
 80012f8:	4b97      	ldr	r3, [pc, #604]	@ (8001558 <main+0x2b8>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2100      	movs	r1, #0
 80012fe:	4618      	mov	r0, r3
 8001300:	f004 fa94 	bl	800582c <ai_ai_model_inputs_get>
 8001304:	6438      	str	r0, [r7, #64]	@ 0x40
      ai_buffer* ai_output = ai_ai_model_outputs_get(network, NULL);
 8001306:	4b94      	ldr	r3, [pc, #592]	@ (8001558 <main+0x2b8>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2100      	movs	r1, #0
 800130c:	4618      	mov	r0, r3
 800130e:	f004 faa7 	bl	8005860 <ai_ai_model_outputs_get>
 8001312:	63f8      	str	r0, [r7, #60]	@ 0x3c

      in_tensor[0] = ai_input[0];
 8001314:	4a92      	ldr	r2, [pc, #584]	@ (8001560 <main+0x2c0>)
 8001316:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001318:	4614      	mov	r4, r2
 800131a:	461d      	mov	r5, r3
 800131c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800131e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001320:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001324:	e884 0007 	stmia.w	r4, {r0, r1, r2}
      in_tensor[0].data = AI_HANDLE_PTR(input_data);
 8001328:	4b8d      	ldr	r3, [pc, #564]	@ (8001560 <main+0x2c0>)
 800132a:	4a8e      	ldr	r2, [pc, #568]	@ (8001564 <main+0x2c4>)
 800132c:	605a      	str	r2, [r3, #4]

      out_tensor[0] = ai_output[0];
 800132e:	4a8e      	ldr	r2, [pc, #568]	@ (8001568 <main+0x2c8>)
 8001330:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001332:	4614      	mov	r4, r2
 8001334:	461d      	mov	r5, r3
 8001336:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001338:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800133a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800133e:	e884 0007 	stmia.w	r4, {r0, r1, r2}

      printf("AI Model Created & Initialized!\r\n");
 8001342:	488a      	ldr	r0, [pc, #552]	@ (800156c <main+0x2cc>)
 8001344:	f007 fe94 	bl	8009070 <puts>
      printf("Expected input: %d floats (80 samples x 3 axes)\r\n", AI_AI_MODEL_IN_1_SIZE);
 8001348:	21f0      	movs	r1, #240	@ 0xf0
 800134a:	4889      	ldr	r0, [pc, #548]	@ (8001570 <main+0x2d0>)
 800134c:	f007 fe28 	bl	8008fa0 <iprintf>
      printf("Expected output: %d floats (8 gesture classes)\r\n", AI_AI_MODEL_OUT_1_SIZE);
 8001350:	2108      	movs	r1, #8
 8001352:	4888      	ldr	r0, [pc, #544]	@ (8001574 <main+0x2d4>)
 8001354:	f007 fe24 	bl	8008fa0 <iprintf>
      printf("Setup complete. Starting gesture recognition...\r\n");
 8001358:	4887      	ldr	r0, [pc, #540]	@ (8001578 <main+0x2d8>)
 800135a:	f007 fe89 	bl	8009070 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("Collecting 80 samples...\r\n");
 800135e:	4887      	ldr	r0, [pc, #540]	@ (800157c <main+0x2dc>)
 8001360:	f007 fe86 	bl	8009070 <puts>
	  printf("Collecting 80 samples...\r\n");
 8001364:	4885      	ldr	r0, [pc, #532]	@ (800157c <main+0x2dc>)
 8001366:	f007 fe83 	bl	8009070 <puts>

	         // Zbieraj próbki z filtrowaniem
	         for (int i = 0; i < 80; i++) {
 800136a:	2300      	movs	r3, #0
 800136c:	657b      	str	r3, [r7, #84]	@ 0x54
 800136e:	e054      	b.n	800141a <main+0x17a>
	             float x, y, z;
	             ADXL345_GetXYZ(&hspi1, &x, &y, &z);
 8001370:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001374:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001378:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800137c:	4872      	ldr	r0, [pc, #456]	@ (8001548 <main+0x2a8>)
 800137e:	f7ff feb1 	bl	80010e4 <ADXL345_GetXYZ>

	             // Normalizacja danych
	             normalizeAccelData(&x, &y, &z);
 8001382:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8001386:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800138a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff fda0 	bl	8000ed4 <normalizeAccelData>

	             // Sprawdź czy jest ruch
	             float magnitude = calculateMagnitude(x, y, z);
 8001394:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001398:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800139c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80013a0:	eeb0 1a66 	vmov.f32	s2, s13
 80013a4:	eef0 0a47 	vmov.f32	s1, s14
 80013a8:	eeb0 0a67 	vmov.f32	s0, s15
 80013ac:	f7ff fe04 	bl	8000fb8 <calculateMagnitude>
 80013b0:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34
	             if (magnitude < 0.3f) {  // Próg ruchu
 80013b4:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80013b8:	ed9f 7a71 	vldr	s14, [pc, #452]	@ 8001580 <main+0x2e0>
 80013bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c4:	d506      	bpl.n	80013d4 <main+0x134>
	                 // Jeśli za mało ruchu, pomiń tę próbkę
	                 i--; // Cofnij licznik
 80013c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80013c8:	3b01      	subs	r3, #1
 80013ca:	657b      	str	r3, [r7, #84]	@ 0x54
	                 HAL_Delay(10);
 80013cc:	200a      	movs	r0, #10
 80013ce:	f000 fc17 	bl	8001c00 <HAL_Delay>
 80013d2:	e01f      	b.n	8001414 <main+0x174>
	                 continue;
	             }

	             // Zapisz dane
	             input_data[i * 3 + 0] = x;
 80013d4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80013d6:	4613      	mov	r3, r2
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	4413      	add	r3, r2
 80013dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80013de:	4961      	ldr	r1, [pc, #388]	@ (8001564 <main+0x2c4>)
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	440b      	add	r3, r1
 80013e4:	601a      	str	r2, [r3, #0]
	             input_data[i * 3 + 1] = y;
 80013e6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80013e8:	4613      	mov	r3, r2
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	4413      	add	r3, r2
 80013ee:	3301      	adds	r3, #1
 80013f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80013f2:	495c      	ldr	r1, [pc, #368]	@ (8001564 <main+0x2c4>)
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	440b      	add	r3, r1
 80013f8:	601a      	str	r2, [r3, #0]
	             input_data[i * 3 + 2] = z;
 80013fa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80013fc:	4613      	mov	r3, r2
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	4413      	add	r3, r2
 8001402:	3302      	adds	r3, #2
 8001404:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001406:	4957      	ldr	r1, [pc, #348]	@ (8001564 <main+0x2c4>)
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	440b      	add	r3, r1
 800140c:	601a      	str	r2, [r3, #0]

	             HAL_Delay(20);
 800140e:	2014      	movs	r0, #20
 8001410:	f000 fbf6 	bl	8001c00 <HAL_Delay>
	         for (int i = 0; i < 80; i++) {
 8001414:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001416:	3301      	adds	r3, #1
 8001418:	657b      	str	r3, [r7, #84]	@ 0x54
 800141a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800141c:	2b4f      	cmp	r3, #79	@ 0x4f
 800141e:	dda7      	ble.n	8001370 <main+0xd0>
	         }

	         printf("Running inference...\r\n");
 8001420:	4858      	ldr	r0, [pc, #352]	@ (8001584 <main+0x2e4>)
 8001422:	f007 fe25 	bl	8009070 <puts>

	         // Uruchom AI
	         ai_i32 batch = ai_ai_model_run(network, in_tensor, out_tensor);
 8001426:	4b4c      	ldr	r3, [pc, #304]	@ (8001558 <main+0x2b8>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a4f      	ldr	r2, [pc, #316]	@ (8001568 <main+0x2c8>)
 800142c:	494c      	ldr	r1, [pc, #304]	@ (8001560 <main+0x2c0>)
 800142e:	4618      	mov	r0, r3
 8001430:	f004 fa6c 	bl	800590c <ai_ai_model_run>
 8001434:	63b8      	str	r0, [r7, #56]	@ 0x38
	         if (batch != 1) {
 8001436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001438:	2b01      	cmp	r3, #1
 800143a:	d003      	beq.n	8001444 <main+0x1a4>
	             printf("AI inference failed\r\n");
 800143c:	4852      	ldr	r0, [pc, #328]	@ (8001588 <main+0x2e8>)
 800143e:	f007 fe17 	bl	8009070 <puts>
	             continue;
 8001442:	e07f      	b.n	8001544 <main+0x2a4>
	         }

	         // DODAJ SOFTMAX do wyników:
	         softmax((float*)out_tensor[0].data, 8);
 8001444:	4b48      	ldr	r3, [pc, #288]	@ (8001568 <main+0x2c8>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	2108      	movs	r1, #8
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff feb4 	bl	80011b8 <softmax>

	         // Wyświetl wyniki z prawdopodobieństwami
	         printf("Results: ");
 8001450:	484e      	ldr	r0, [pc, #312]	@ (800158c <main+0x2ec>)
 8001452:	f007 fda5 	bl	8008fa0 <iprintf>
	         for (int i = 0; i < 8; i++) {
 8001456:	2300      	movs	r3, #0
 8001458:	653b      	str	r3, [r7, #80]	@ 0x50
 800145a:	e010      	b.n	800147e <main+0x1de>
	             printf("%.3f ", ((float*)out_tensor[0].data)[i]);
 800145c:	4b42      	ldr	r3, [pc, #264]	@ (8001568 <main+0x2c8>)
 800145e:	685a      	ldr	r2, [r3, #4]
 8001460:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	4413      	add	r3, r2
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff f86d 	bl	8000548 <__aeabi_f2d>
 800146e:	4602      	mov	r2, r0
 8001470:	460b      	mov	r3, r1
 8001472:	4847      	ldr	r0, [pc, #284]	@ (8001590 <main+0x2f0>)
 8001474:	f007 fd94 	bl	8008fa0 <iprintf>
	         for (int i = 0; i < 8; i++) {
 8001478:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800147a:	3301      	adds	r3, #1
 800147c:	653b      	str	r3, [r7, #80]	@ 0x50
 800147e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001480:	2b07      	cmp	r3, #7
 8001482:	ddeb      	ble.n	800145c <main+0x1bc>
	         }
	         printf("\r\n");
 8001484:	4843      	ldr	r0, [pc, #268]	@ (8001594 <main+0x2f4>)
 8001486:	f007 fdf3 	bl	8009070 <puts>

	         // Znajdź najwyższą pewność
	         float max_confidence = 0.0f;
 800148a:	f04f 0300 	mov.w	r3, #0
 800148e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	         int predicted_class = 0;
 8001490:	2300      	movs	r3, #0
 8001492:	64bb      	str	r3, [r7, #72]	@ 0x48
	         for (int i = 0; i < 8; i++) {
 8001494:	2300      	movs	r3, #0
 8001496:	647b      	str	r3, [r7, #68]	@ 0x44
 8001498:	e019      	b.n	80014ce <main+0x22e>
	             if (((float*)out_tensor[0].data)[i] > max_confidence) {
 800149a:	4b33      	ldr	r3, [pc, #204]	@ (8001568 <main+0x2c8>)
 800149c:	685a      	ldr	r2, [r3, #4]
 800149e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	4413      	add	r3, r2
 80014a4:	edd3 7a00 	vldr	s15, [r3]
 80014a8:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80014ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b4:	d508      	bpl.n	80014c8 <main+0x228>
	                 max_confidence = ((float*)out_tensor[0].data)[i];
 80014b6:	4b2c      	ldr	r3, [pc, #176]	@ (8001568 <main+0x2c8>)
 80014b8:	685a      	ldr	r2, [r3, #4]
 80014ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	4413      	add	r3, r2
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
	                 predicted_class = i;
 80014c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80014c6:	64bb      	str	r3, [r7, #72]	@ 0x48
	         for (int i = 0; i < 8; i++) {
 80014c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80014ca:	3301      	adds	r3, #1
 80014cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80014ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80014d0:	2b07      	cmp	r3, #7
 80014d2:	dde2      	ble.n	800149a <main+0x1fa>
	             }
	         }

	         // Próg pewności
	         if (max_confidence < 0.6f) {  // 30% pewności
 80014d4:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80014d8:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8001598 <main+0x2f8>
 80014dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e4:	d508      	bpl.n	80014f8 <main+0x258>
	             printf("Uncertain gesture (confidence: %.2f)\r\n", max_confidence);
 80014e6:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80014e8:	f7ff f82e 	bl	8000548 <__aeabi_f2d>
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	482a      	ldr	r0, [pc, #168]	@ (800159c <main+0x2fc>)
 80014f2:	f007 fd55 	bl	8008fa0 <iprintf>
	             continue;
 80014f6:	e025      	b.n	8001544 <main+0x2a4>
	         }

	         // Nazwy gestów (dostosuj do swojego modelu)
	         const char *gestures[] = {
 80014f8:	4b29      	ldr	r3, [pc, #164]	@ (80015a0 <main+0x300>)
 80014fa:	1d3c      	adds	r4, r7, #4
 80014fc:	461d      	mov	r5, r3
 80014fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001500:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001502:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001506:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	             "Swipe-Right", "Swipe-Left", "Up", "Down",
	             "Circle-Clockwise", "Circle-Counterclockwise", "Z-letter", "V-letter"
	         };

	         // Wyświetl wynik
	         printf("Detected: %s (confidence: %.2f%%)\r\n",
 800150a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	3358      	adds	r3, #88	@ 0x58
 8001510:	443b      	add	r3, r7
 8001512:	f853 4c54 	ldr.w	r4, [r3, #-84]
	                gestures[predicted_class], max_confidence * 100.0f);
 8001516:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800151a:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80015a4 <main+0x304>
 800151e:	ee67 7a87 	vmul.f32	s15, s15, s14
	         printf("Detected: %s (confidence: %.2f%%)\r\n",
 8001522:	ee17 0a90 	vmov	r0, s15
 8001526:	f7ff f80f 	bl	8000548 <__aeabi_f2d>
 800152a:	4602      	mov	r2, r0
 800152c:	460b      	mov	r3, r1
 800152e:	4621      	mov	r1, r4
 8001530:	481d      	ldr	r0, [pc, #116]	@ (80015a8 <main+0x308>)
 8001532:	f007 fd35 	bl	8008fa0 <iprintf>
	         printf("---\r\n");
 8001536:	481d      	ldr	r0, [pc, #116]	@ (80015ac <main+0x30c>)
 8001538:	f007 fd9a 	bl	8009070 <puts>
	         HAL_Delay(2000);  // Pauza przed kolejną próbą
 800153c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001540:	f000 fb5e 	bl	8001c00 <HAL_Delay>
  {
 8001544:	e70b      	b.n	800135e <main+0xbe>
 8001546:	bf00      	nop
 8001548:	20000e84 	.word	0x20000e84
 800154c:	0800b140 	.word	0x0800b140
 8001550:	20000c64 	.word	0x20000c64
 8001554:	20000c58 	.word	0x20000c58
 8001558:	20000f70 	.word	0x20000f70
 800155c:	0800b158 	.word	0x0800b158
 8001560:	20001334 	.word	0x20001334
 8001564:	20000f74 	.word	0x20000f74
 8001568:	20001350 	.word	0x20001350
 800156c:	0800b180 	.word	0x0800b180
 8001570:	0800b1a4 	.word	0x0800b1a4
 8001574:	0800b1d8 	.word	0x0800b1d8
 8001578:	0800b20c 	.word	0x0800b20c
 800157c:	0800b240 	.word	0x0800b240
 8001580:	3e99999a 	.word	0x3e99999a
 8001584:	0800b25c 	.word	0x0800b25c
 8001588:	0800b274 	.word	0x0800b274
 800158c:	0800b28c 	.word	0x0800b28c
 8001590:	0800b298 	.word	0x0800b298
 8001594:	0800b2a0 	.word	0x0800b2a0
 8001598:	3f19999a 	.word	0x3f19999a
 800159c:	0800b2a4 	.word	0x0800b2a4
 80015a0:	0800b360 	.word	0x0800b360
 80015a4:	42c80000 	.word	0x42c80000
 80015a8:	0800b2cc 	.word	0x0800b2cc
 80015ac:	0800b2f0 	.word	0x0800b2f0

080015b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b096      	sub	sp, #88	@ 0x58
 80015b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015b6:	f107 0314 	add.w	r3, r7, #20
 80015ba:	2244      	movs	r2, #68	@ 0x44
 80015bc:	2100      	movs	r1, #0
 80015be:	4618      	mov	r0, r3
 80015c0:	f007 fe36 	bl	8009230 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015c4:	463b      	mov	r3, r7
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	605a      	str	r2, [r3, #4]
 80015cc:	609a      	str	r2, [r3, #8]
 80015ce:	60da      	str	r2, [r3, #12]
 80015d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80015d2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80015d6:	f000 fedf 	bl	8002398 <HAL_PWREx_ControlVoltageScaling>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80015e0:	f000 f8f8 	bl	80017d4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015e4:	2302      	movs	r3, #2
 80015e6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015ec:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015ee:	2310      	movs	r3, #16
 80015f0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015f2:	2302      	movs	r3, #2
 80015f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015f6:	2302      	movs	r3, #2
 80015f8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80015fa:	2301      	movs	r3, #1
 80015fc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80015fe:	230a      	movs	r3, #10
 8001600:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001602:	2307      	movs	r3, #7
 8001604:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001606:	2302      	movs	r3, #2
 8001608:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = 2;
 800160a:	2302      	movs	r3, #2
 800160c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800160e:	f107 0314 	add.w	r3, r7, #20
 8001612:	4618      	mov	r0, r3
 8001614:	f000 ff16 	bl	8002444 <HAL_RCC_OscConfig>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800161e:	f000 f8d9 	bl	80017d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001622:	230f      	movs	r3, #15
 8001624:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001626:	2303      	movs	r3, #3
 8001628:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800162a:	2300      	movs	r3, #0
 800162c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800162e:	2300      	movs	r3, #0
 8001630:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001632:	2300      	movs	r3, #0
 8001634:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001636:	463b      	mov	r3, r7
 8001638:	2104      	movs	r1, #4
 800163a:	4618      	mov	r0, r3
 800163c:	f001 fade 	bl	8002bfc <HAL_RCC_ClockConfig>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001646:	f000 f8c5 	bl	80017d4 <Error_Handler>
  }
}
 800164a:	bf00      	nop
 800164c:	3758      	adds	r7, #88	@ 0x58
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
	...

08001654 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001658:	4b0d      	ldr	r3, [pc, #52]	@ (8001690 <MX_CRC_Init+0x3c>)
 800165a:	4a0e      	ldr	r2, [pc, #56]	@ (8001694 <MX_CRC_Init+0x40>)
 800165c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800165e:	4b0c      	ldr	r3, [pc, #48]	@ (8001690 <MX_CRC_Init+0x3c>)
 8001660:	2200      	movs	r2, #0
 8001662:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001664:	4b0a      	ldr	r3, [pc, #40]	@ (8001690 <MX_CRC_Init+0x3c>)
 8001666:	2200      	movs	r2, #0
 8001668:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800166a:	4b09      	ldr	r3, [pc, #36]	@ (8001690 <MX_CRC_Init+0x3c>)
 800166c:	2200      	movs	r2, #0
 800166e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001670:	4b07      	ldr	r3, [pc, #28]	@ (8001690 <MX_CRC_Init+0x3c>)
 8001672:	2200      	movs	r2, #0
 8001674:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001676:	4b06      	ldr	r3, [pc, #24]	@ (8001690 <MX_CRC_Init+0x3c>)
 8001678:	2201      	movs	r2, #1
 800167a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800167c:	4804      	ldr	r0, [pc, #16]	@ (8001690 <MX_CRC_Init+0x3c>)
 800167e:	f000 fbc9 	bl	8001e14 <HAL_CRC_Init>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001688:	f000 f8a4 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800168c:	bf00      	nop
 800168e:	bd80      	pop	{r7, pc}
 8001690:	20000e60 	.word	0x20000e60
 8001694:	40023000 	.word	0x40023000

08001698 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800169c:	4b1b      	ldr	r3, [pc, #108]	@ (800170c <MX_SPI1_Init+0x74>)
 800169e:	4a1c      	ldr	r2, [pc, #112]	@ (8001710 <MX_SPI1_Init+0x78>)
 80016a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016a2:	4b1a      	ldr	r3, [pc, #104]	@ (800170c <MX_SPI1_Init+0x74>)
 80016a4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80016a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016aa:	4b18      	ldr	r3, [pc, #96]	@ (800170c <MX_SPI1_Init+0x74>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80016b0:	4b16      	ldr	r3, [pc, #88]	@ (800170c <MX_SPI1_Init+0x74>)
 80016b2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80016b6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80016b8:	4b14      	ldr	r3, [pc, #80]	@ (800170c <MX_SPI1_Init+0x74>)
 80016ba:	2202      	movs	r2, #2
 80016bc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80016be:	4b13      	ldr	r3, [pc, #76]	@ (800170c <MX_SPI1_Init+0x74>)
 80016c0:	2201      	movs	r2, #1
 80016c2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016c4:	4b11      	ldr	r3, [pc, #68]	@ (800170c <MX_SPI1_Init+0x74>)
 80016c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016ca:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80016cc:	4b0f      	ldr	r3, [pc, #60]	@ (800170c <MX_SPI1_Init+0x74>)
 80016ce:	2218      	movs	r2, #24
 80016d0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016d2:	4b0e      	ldr	r3, [pc, #56]	@ (800170c <MX_SPI1_Init+0x74>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016d8:	4b0c      	ldr	r3, [pc, #48]	@ (800170c <MX_SPI1_Init+0x74>)
 80016da:	2200      	movs	r2, #0
 80016dc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016de:	4b0b      	ldr	r3, [pc, #44]	@ (800170c <MX_SPI1_Init+0x74>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80016e4:	4b09      	ldr	r3, [pc, #36]	@ (800170c <MX_SPI1_Init+0x74>)
 80016e6:	2207      	movs	r2, #7
 80016e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80016ea:	4b08      	ldr	r3, [pc, #32]	@ (800170c <MX_SPI1_Init+0x74>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80016f0:	4b06      	ldr	r3, [pc, #24]	@ (800170c <MX_SPI1_Init+0x74>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016f6:	4805      	ldr	r0, [pc, #20]	@ (800170c <MX_SPI1_Init+0x74>)
 80016f8:	f002 f960 	bl	80039bc <HAL_SPI_Init>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001702:	f000 f867 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	20000e84 	.word	0x20000e84
 8001710:	40013000 	.word	0x40013000

08001714 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001718:	4b14      	ldr	r3, [pc, #80]	@ (800176c <MX_USART2_UART_Init+0x58>)
 800171a:	4a15      	ldr	r2, [pc, #84]	@ (8001770 <MX_USART2_UART_Init+0x5c>)
 800171c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800171e:	4b13      	ldr	r3, [pc, #76]	@ (800176c <MX_USART2_UART_Init+0x58>)
 8001720:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001724:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001726:	4b11      	ldr	r3, [pc, #68]	@ (800176c <MX_USART2_UART_Init+0x58>)
 8001728:	2200      	movs	r2, #0
 800172a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800172c:	4b0f      	ldr	r3, [pc, #60]	@ (800176c <MX_USART2_UART_Init+0x58>)
 800172e:	2200      	movs	r2, #0
 8001730:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001732:	4b0e      	ldr	r3, [pc, #56]	@ (800176c <MX_USART2_UART_Init+0x58>)
 8001734:	2200      	movs	r2, #0
 8001736:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001738:	4b0c      	ldr	r3, [pc, #48]	@ (800176c <MX_USART2_UART_Init+0x58>)
 800173a:	220c      	movs	r2, #12
 800173c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800173e:	4b0b      	ldr	r3, [pc, #44]	@ (800176c <MX_USART2_UART_Init+0x58>)
 8001740:	2200      	movs	r2, #0
 8001742:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001744:	4b09      	ldr	r3, [pc, #36]	@ (800176c <MX_USART2_UART_Init+0x58>)
 8001746:	2200      	movs	r2, #0
 8001748:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800174a:	4b08      	ldr	r3, [pc, #32]	@ (800176c <MX_USART2_UART_Init+0x58>)
 800174c:	2200      	movs	r2, #0
 800174e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001750:	4b06      	ldr	r3, [pc, #24]	@ (800176c <MX_USART2_UART_Init+0x58>)
 8001752:	2200      	movs	r2, #0
 8001754:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001756:	4805      	ldr	r0, [pc, #20]	@ (800176c <MX_USART2_UART_Init+0x58>)
 8001758:	f003 f85c 	bl	8004814 <HAL_UART_Init>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001762:	f000 f837 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	20000ee8 	.word	0x20000ee8
 8001770:	40004400 	.word	0x40004400

08001774 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b086      	sub	sp, #24
 8001778:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800177a:	1d3b      	adds	r3, r7, #4
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	605a      	str	r2, [r3, #4]
 8001782:	609a      	str	r2, [r3, #8]
 8001784:	60da      	str	r2, [r3, #12]
 8001786:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001788:	4b11      	ldr	r3, [pc, #68]	@ (80017d0 <MX_GPIO_Init+0x5c>)
 800178a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800178c:	4a10      	ldr	r2, [pc, #64]	@ (80017d0 <MX_GPIO_Init+0x5c>)
 800178e:	f043 0301 	orr.w	r3, r3, #1
 8001792:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001794:	4b0e      	ldr	r3, [pc, #56]	@ (80017d0 <MX_GPIO_Init+0x5c>)
 8001796:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001798:	f003 0301 	and.w	r3, r3, #1
 800179c:	603b      	str	r3, [r7, #0]
 800179e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADXL345_CS_GPIO_Port, ADXL345_CS_Pin, GPIO_PIN_RESET);
 80017a0:	2200      	movs	r2, #0
 80017a2:	2110      	movs	r1, #16
 80017a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017a8:	f000 fdd0 	bl	800234c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ADXL345_CS_Pin */
  GPIO_InitStruct.Pin = ADXL345_CS_Pin;
 80017ac:	2310      	movs	r3, #16
 80017ae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b0:	2301      	movs	r3, #1
 80017b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b4:	2300      	movs	r3, #0
 80017b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b8:	2300      	movs	r3, #0
 80017ba:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(ADXL345_CS_GPIO_Port, &GPIO_InitStruct);
 80017bc:	1d3b      	adds	r3, r7, #4
 80017be:	4619      	mov	r1, r3
 80017c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017c4:	f000 fc18 	bl	8001ff8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80017c8:	bf00      	nop
 80017ca:	3718      	adds	r7, #24
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40021000 	.word	0x40021000

080017d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017d8:	b672      	cpsid	i
}
 80017da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017dc:	bf00      	nop
 80017de:	e7fd      	b.n	80017dc <Error_Handler+0x8>

080017e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001824 <HAL_MspInit+0x44>)
 80017e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017ea:	4a0e      	ldr	r2, [pc, #56]	@ (8001824 <HAL_MspInit+0x44>)
 80017ec:	f043 0301 	orr.w	r3, r3, #1
 80017f0:	6613      	str	r3, [r2, #96]	@ 0x60
 80017f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001824 <HAL_MspInit+0x44>)
 80017f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	607b      	str	r3, [r7, #4]
 80017fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017fe:	4b09      	ldr	r3, [pc, #36]	@ (8001824 <HAL_MspInit+0x44>)
 8001800:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001802:	4a08      	ldr	r2, [pc, #32]	@ (8001824 <HAL_MspInit+0x44>)
 8001804:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001808:	6593      	str	r3, [r2, #88]	@ 0x58
 800180a:	4b06      	ldr	r3, [pc, #24]	@ (8001824 <HAL_MspInit+0x44>)
 800180c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800180e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001812:	603b      	str	r3, [r7, #0]
 8001814:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001816:	bf00      	nop
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	40021000 	.word	0x40021000

08001828 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a0a      	ldr	r2, [pc, #40]	@ (8001860 <HAL_CRC_MspInit+0x38>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d10b      	bne.n	8001852 <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800183a:	4b0a      	ldr	r3, [pc, #40]	@ (8001864 <HAL_CRC_MspInit+0x3c>)
 800183c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800183e:	4a09      	ldr	r2, [pc, #36]	@ (8001864 <HAL_CRC_MspInit+0x3c>)
 8001840:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001844:	6493      	str	r3, [r2, #72]	@ 0x48
 8001846:	4b07      	ldr	r3, [pc, #28]	@ (8001864 <HAL_CRC_MspInit+0x3c>)
 8001848:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800184a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8001852:	bf00      	nop
 8001854:	3714      	adds	r7, #20
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	40023000 	.word	0x40023000
 8001864:	40021000 	.word	0x40021000

08001868 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b08a      	sub	sp, #40	@ 0x28
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001870:	f107 0314 	add.w	r3, r7, #20
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	609a      	str	r2, [r3, #8]
 800187c:	60da      	str	r2, [r3, #12]
 800187e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a17      	ldr	r2, [pc, #92]	@ (80018e4 <HAL_SPI_MspInit+0x7c>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d128      	bne.n	80018dc <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800188a:	4b17      	ldr	r3, [pc, #92]	@ (80018e8 <HAL_SPI_MspInit+0x80>)
 800188c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800188e:	4a16      	ldr	r2, [pc, #88]	@ (80018e8 <HAL_SPI_MspInit+0x80>)
 8001890:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001894:	6613      	str	r3, [r2, #96]	@ 0x60
 8001896:	4b14      	ldr	r3, [pc, #80]	@ (80018e8 <HAL_SPI_MspInit+0x80>)
 8001898:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800189a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800189e:	613b      	str	r3, [r7, #16]
 80018a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a2:	4b11      	ldr	r3, [pc, #68]	@ (80018e8 <HAL_SPI_MspInit+0x80>)
 80018a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018a6:	4a10      	ldr	r2, [pc, #64]	@ (80018e8 <HAL_SPI_MspInit+0x80>)
 80018a8:	f043 0301 	orr.w	r3, r3, #1
 80018ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018ae:	4b0e      	ldr	r3, [pc, #56]	@ (80018e8 <HAL_SPI_MspInit+0x80>)
 80018b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80018ba:	23e0      	movs	r3, #224	@ 0xe0
 80018bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018be:	2302      	movs	r3, #2
 80018c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c2:	2300      	movs	r3, #0
 80018c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c6:	2303      	movs	r3, #3
 80018c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018ca:	2305      	movs	r3, #5
 80018cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ce:	f107 0314 	add.w	r3, r7, #20
 80018d2:	4619      	mov	r1, r3
 80018d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018d8:	f000 fb8e 	bl	8001ff8 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80018dc:	bf00      	nop
 80018de:	3728      	adds	r7, #40	@ 0x28
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	40013000 	.word	0x40013000
 80018e8:	40021000 	.word	0x40021000

080018ec <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b0ac      	sub	sp, #176	@ 0xb0
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]
 8001902:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001904:	f107 0314 	add.w	r3, r7, #20
 8001908:	2288      	movs	r2, #136	@ 0x88
 800190a:	2100      	movs	r1, #0
 800190c:	4618      	mov	r0, r3
 800190e:	f007 fc8f 	bl	8009230 <memset>
  if(huart->Instance==USART2)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a21      	ldr	r2, [pc, #132]	@ (800199c <HAL_UART_MspInit+0xb0>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d13b      	bne.n	8001994 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800191c:	2302      	movs	r3, #2
 800191e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001920:	2300      	movs	r3, #0
 8001922:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001924:	f107 0314 	add.w	r3, r7, #20
 8001928:	4618      	mov	r0, r3
 800192a:	f001 fb8b 	bl	8003044 <HAL_RCCEx_PeriphCLKConfig>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001934:	f7ff ff4e 	bl	80017d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001938:	4b19      	ldr	r3, [pc, #100]	@ (80019a0 <HAL_UART_MspInit+0xb4>)
 800193a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800193c:	4a18      	ldr	r2, [pc, #96]	@ (80019a0 <HAL_UART_MspInit+0xb4>)
 800193e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001942:	6593      	str	r3, [r2, #88]	@ 0x58
 8001944:	4b16      	ldr	r3, [pc, #88]	@ (80019a0 <HAL_UART_MspInit+0xb4>)
 8001946:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001948:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800194c:	613b      	str	r3, [r7, #16]
 800194e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001950:	4b13      	ldr	r3, [pc, #76]	@ (80019a0 <HAL_UART_MspInit+0xb4>)
 8001952:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001954:	4a12      	ldr	r2, [pc, #72]	@ (80019a0 <HAL_UART_MspInit+0xb4>)
 8001956:	f043 0301 	orr.w	r3, r3, #1
 800195a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800195c:	4b10      	ldr	r3, [pc, #64]	@ (80019a0 <HAL_UART_MspInit+0xb4>)
 800195e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001960:	f003 0301 	and.w	r3, r3, #1
 8001964:	60fb      	str	r3, [r7, #12]
 8001966:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001968:	230c      	movs	r3, #12
 800196a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196e:	2302      	movs	r3, #2
 8001970:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001974:	2300      	movs	r3, #0
 8001976:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800197a:	2303      	movs	r3, #3
 800197c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001980:	2307      	movs	r3, #7
 8001982:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001986:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800198a:	4619      	mov	r1, r3
 800198c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001990:	f000 fb32 	bl	8001ff8 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001994:	bf00      	nop
 8001996:	37b0      	adds	r7, #176	@ 0xb0
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40004400 	.word	0x40004400
 80019a0:	40021000 	.word	0x40021000

080019a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019a8:	bf00      	nop
 80019aa:	e7fd      	b.n	80019a8 <NMI_Handler+0x4>

080019ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	const char msg[] = "HF\r\n";
 80019b2:	4b06      	ldr	r3, [pc, #24]	@ (80019cc <HardFault_Handler+0x20>)
 80019b4:	603b      	str	r3, [r7, #0]
 80019b6:	2300      	movs	r3, #0
 80019b8:	713b      	strb	r3, [r7, #4]
	  HAL_UART_Transmit(&huart2, (uint8_t*)msg, sizeof(msg)-1, 100);
 80019ba:	4639      	mov	r1, r7
 80019bc:	2364      	movs	r3, #100	@ 0x64
 80019be:	2204      	movs	r2, #4
 80019c0:	4803      	ldr	r0, [pc, #12]	@ (80019d0 <HardFault_Handler+0x24>)
 80019c2:	f002 ff75 	bl	80048b0 <HAL_UART_Transmit>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019c6:	bf00      	nop
 80019c8:	e7fd      	b.n	80019c6 <HardFault_Handler+0x1a>
 80019ca:	bf00      	nop
 80019cc:	0a0d4648 	.word	0x0a0d4648
 80019d0:	20000ee8 	.word	0x20000ee8

080019d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019d8:	bf00      	nop
 80019da:	e7fd      	b.n	80019d8 <MemManage_Handler+0x4>

080019dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019e0:	bf00      	nop
 80019e2:	e7fd      	b.n	80019e0 <BusFault_Handler+0x4>

080019e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019e8:	bf00      	nop
 80019ea:	e7fd      	b.n	80019e8 <UsageFault_Handler+0x4>

080019ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019f0:	bf00      	nop
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr

080019fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019fa:	b480      	push	{r7}
 80019fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a0c:	bf00      	nop
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr

08001a16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a1a:	f000 f8d1 	bl	8001bc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
	...

08001a24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a2c:	4a14      	ldr	r2, [pc, #80]	@ (8001a80 <_sbrk+0x5c>)
 8001a2e:	4b15      	ldr	r3, [pc, #84]	@ (8001a84 <_sbrk+0x60>)
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a38:	4b13      	ldr	r3, [pc, #76]	@ (8001a88 <_sbrk+0x64>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d102      	bne.n	8001a46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a40:	4b11      	ldr	r3, [pc, #68]	@ (8001a88 <_sbrk+0x64>)
 8001a42:	4a12      	ldr	r2, [pc, #72]	@ (8001a8c <_sbrk+0x68>)
 8001a44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a46:	4b10      	ldr	r3, [pc, #64]	@ (8001a88 <_sbrk+0x64>)
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d207      	bcs.n	8001a64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a54:	f007 fc4e 	bl	80092f4 <__errno>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	220c      	movs	r2, #12
 8001a5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a62:	e009      	b.n	8001a78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a64:	4b08      	ldr	r3, [pc, #32]	@ (8001a88 <_sbrk+0x64>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a6a:	4b07      	ldr	r3, [pc, #28]	@ (8001a88 <_sbrk+0x64>)
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4413      	add	r3, r2
 8001a72:	4a05      	ldr	r2, [pc, #20]	@ (8001a88 <_sbrk+0x64>)
 8001a74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a76:	68fb      	ldr	r3, [r7, #12]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3718      	adds	r7, #24
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	20018000 	.word	0x20018000
 8001a84:	00008000 	.word	0x00008000
 8001a88:	2000136c 	.word	0x2000136c
 8001a8c:	20003778 	.word	0x20003778

08001a90 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a94:	4b06      	ldr	r3, [pc, #24]	@ (8001ab0 <SystemInit+0x20>)
 8001a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a9a:	4a05      	ldr	r2, [pc, #20]	@ (8001ab0 <SystemInit+0x20>)
 8001a9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001aa0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001aa4:	bf00      	nop
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	e000ed00 	.word	0xe000ed00

08001ab4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ab4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001aec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ab8:	f7ff ffea 	bl	8001a90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001abc:	480c      	ldr	r0, [pc, #48]	@ (8001af0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001abe:	490d      	ldr	r1, [pc, #52]	@ (8001af4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ac0:	4a0d      	ldr	r2, [pc, #52]	@ (8001af8 <LoopForever+0xe>)
  movs r3, #0
 8001ac2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ac4:	e002      	b.n	8001acc <LoopCopyDataInit>

08001ac6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ac6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ac8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aca:	3304      	adds	r3, #4

08001acc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001acc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ace:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ad0:	d3f9      	bcc.n	8001ac6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ad2:	4a0a      	ldr	r2, [pc, #40]	@ (8001afc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ad4:	4c0a      	ldr	r4, [pc, #40]	@ (8001b00 <LoopForever+0x16>)
  movs r3, #0
 8001ad6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ad8:	e001      	b.n	8001ade <LoopFillZerobss>

08001ada <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ada:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001adc:	3204      	adds	r2, #4

08001ade <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ade:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ae0:	d3fb      	bcc.n	8001ada <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ae2:	f007 fc0d 	bl	8009300 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ae6:	f7ff fbdb 	bl	80012a0 <main>

08001aea <LoopForever>:

LoopForever:
    b LoopForever
 8001aea:	e7fe      	b.n	8001aea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001aec:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001af0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001af4:	20000e34 	.word	0x20000e34
  ldr r2, =_sidata
 8001af8:	0807a8fc 	.word	0x0807a8fc
  ldr r2, =_sbss
 8001afc:	20000e34 	.word	0x20000e34
  ldr r4, =_ebss
 8001b00:	20003778 	.word	0x20003778

08001b04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b04:	e7fe      	b.n	8001b04 <ADC1_2_IRQHandler>
	...

08001b08 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b12:	4b0c      	ldr	r3, [pc, #48]	@ (8001b44 <HAL_Init+0x3c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a0b      	ldr	r2, [pc, #44]	@ (8001b44 <HAL_Init+0x3c>)
 8001b18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b1c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b1e:	2003      	movs	r0, #3
 8001b20:	f000 f944 	bl	8001dac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b24:	200f      	movs	r0, #15
 8001b26:	f000 f80f 	bl	8001b48 <HAL_InitTick>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d002      	beq.n	8001b36 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	71fb      	strb	r3, [r7, #7]
 8001b34:	e001      	b.n	8001b3a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b36:	f7ff fe53 	bl	80017e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b3a:	79fb      	ldrb	r3, [r7, #7]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40022000 	.word	0x40022000

08001b48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b50:	2300      	movs	r3, #0
 8001b52:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001b54:	4b17      	ldr	r3, [pc, #92]	@ (8001bb4 <HAL_InitTick+0x6c>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d023      	beq.n	8001ba4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b5c:	4b16      	ldr	r3, [pc, #88]	@ (8001bb8 <HAL_InitTick+0x70>)
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	4b14      	ldr	r3, [pc, #80]	@ (8001bb4 <HAL_InitTick+0x6c>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	4619      	mov	r1, r3
 8001b66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b72:	4618      	mov	r0, r3
 8001b74:	f000 f941 	bl	8001dfa <HAL_SYSTICK_Config>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d10f      	bne.n	8001b9e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2b0f      	cmp	r3, #15
 8001b82:	d809      	bhi.n	8001b98 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b84:	2200      	movs	r2, #0
 8001b86:	6879      	ldr	r1, [r7, #4]
 8001b88:	f04f 30ff 	mov.w	r0, #4294967295
 8001b8c:	f000 f919 	bl	8001dc2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b90:	4a0a      	ldr	r2, [pc, #40]	@ (8001bbc <HAL_InitTick+0x74>)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6013      	str	r3, [r2, #0]
 8001b96:	e007      	b.n	8001ba8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	73fb      	strb	r3, [r7, #15]
 8001b9c:	e004      	b.n	8001ba8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	73fb      	strb	r3, [r7, #15]
 8001ba2:	e001      	b.n	8001ba8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20000008 	.word	0x20000008
 8001bb8:	20000000 	.word	0x20000000
 8001bbc:	20000004 	.word	0x20000004

08001bc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001bc4:	4b06      	ldr	r3, [pc, #24]	@ (8001be0 <HAL_IncTick+0x20>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	461a      	mov	r2, r3
 8001bca:	4b06      	ldr	r3, [pc, #24]	@ (8001be4 <HAL_IncTick+0x24>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4413      	add	r3, r2
 8001bd0:	4a04      	ldr	r2, [pc, #16]	@ (8001be4 <HAL_IncTick+0x24>)
 8001bd2:	6013      	str	r3, [r2, #0]
}
 8001bd4:	bf00      	nop
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	20000008 	.word	0x20000008
 8001be4:	20001370 	.word	0x20001370

08001be8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  return uwTick;
 8001bec:	4b03      	ldr	r3, [pc, #12]	@ (8001bfc <HAL_GetTick+0x14>)
 8001bee:	681b      	ldr	r3, [r3, #0]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	20001370 	.word	0x20001370

08001c00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c08:	f7ff ffee 	bl	8001be8 <HAL_GetTick>
 8001c0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c18:	d005      	beq.n	8001c26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001c1a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c44 <HAL_Delay+0x44>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	461a      	mov	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	4413      	add	r3, r2
 8001c24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c26:	bf00      	nop
 8001c28:	f7ff ffde 	bl	8001be8 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	68fa      	ldr	r2, [r7, #12]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d8f7      	bhi.n	8001c28 <HAL_Delay+0x28>
  {
  }
}
 8001c38:	bf00      	nop
 8001c3a:	bf00      	nop
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	20000008 	.word	0x20000008

08001c48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f003 0307 	and.w	r3, r3, #7
 8001c56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c58:	4b0c      	ldr	r3, [pc, #48]	@ (8001c8c <__NVIC_SetPriorityGrouping+0x44>)
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c5e:	68ba      	ldr	r2, [r7, #8]
 8001c60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c64:	4013      	ands	r3, r2
 8001c66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c70:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c7a:	4a04      	ldr	r2, [pc, #16]	@ (8001c8c <__NVIC_SetPriorityGrouping+0x44>)
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	60d3      	str	r3, [r2, #12]
}
 8001c80:	bf00      	nop
 8001c82:	3714      	adds	r7, #20
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	e000ed00 	.word	0xe000ed00

08001c90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c94:	4b04      	ldr	r3, [pc, #16]	@ (8001ca8 <__NVIC_GetPriorityGrouping+0x18>)
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	0a1b      	lsrs	r3, r3, #8
 8001c9a:	f003 0307 	and.w	r3, r3, #7
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	e000ed00 	.word	0xe000ed00

08001cac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	6039      	str	r1, [r7, #0]
 8001cb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	db0a      	blt.n	8001cd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	b2da      	uxtb	r2, r3
 8001cc4:	490c      	ldr	r1, [pc, #48]	@ (8001cf8 <__NVIC_SetPriority+0x4c>)
 8001cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cca:	0112      	lsls	r2, r2, #4
 8001ccc:	b2d2      	uxtb	r2, r2
 8001cce:	440b      	add	r3, r1
 8001cd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cd4:	e00a      	b.n	8001cec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	b2da      	uxtb	r2, r3
 8001cda:	4908      	ldr	r1, [pc, #32]	@ (8001cfc <__NVIC_SetPriority+0x50>)
 8001cdc:	79fb      	ldrb	r3, [r7, #7]
 8001cde:	f003 030f 	and.w	r3, r3, #15
 8001ce2:	3b04      	subs	r3, #4
 8001ce4:	0112      	lsls	r2, r2, #4
 8001ce6:	b2d2      	uxtb	r2, r2
 8001ce8:	440b      	add	r3, r1
 8001cea:	761a      	strb	r2, [r3, #24]
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	e000e100 	.word	0xe000e100
 8001cfc:	e000ed00 	.word	0xe000ed00

08001d00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b089      	sub	sp, #36	@ 0x24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	60b9      	str	r1, [r7, #8]
 8001d0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f003 0307 	and.w	r3, r3, #7
 8001d12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	f1c3 0307 	rsb	r3, r3, #7
 8001d1a:	2b04      	cmp	r3, #4
 8001d1c:	bf28      	it	cs
 8001d1e:	2304      	movcs	r3, #4
 8001d20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	3304      	adds	r3, #4
 8001d26:	2b06      	cmp	r3, #6
 8001d28:	d902      	bls.n	8001d30 <NVIC_EncodePriority+0x30>
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	3b03      	subs	r3, #3
 8001d2e:	e000      	b.n	8001d32 <NVIC_EncodePriority+0x32>
 8001d30:	2300      	movs	r3, #0
 8001d32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d34:	f04f 32ff 	mov.w	r2, #4294967295
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3e:	43da      	mvns	r2, r3
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	401a      	ands	r2, r3
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d48:	f04f 31ff 	mov.w	r1, #4294967295
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d52:	43d9      	mvns	r1, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d58:	4313      	orrs	r3, r2
         );
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3724      	adds	r7, #36	@ 0x24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
	...

08001d68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	3b01      	subs	r3, #1
 8001d74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d78:	d301      	bcc.n	8001d7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e00f      	b.n	8001d9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d7e:	4a0a      	ldr	r2, [pc, #40]	@ (8001da8 <SysTick_Config+0x40>)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	3b01      	subs	r3, #1
 8001d84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d86:	210f      	movs	r1, #15
 8001d88:	f04f 30ff 	mov.w	r0, #4294967295
 8001d8c:	f7ff ff8e 	bl	8001cac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d90:	4b05      	ldr	r3, [pc, #20]	@ (8001da8 <SysTick_Config+0x40>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d96:	4b04      	ldr	r3, [pc, #16]	@ (8001da8 <SysTick_Config+0x40>)
 8001d98:	2207      	movs	r2, #7
 8001d9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	e000e010 	.word	0xe000e010

08001dac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f7ff ff47 	bl	8001c48 <__NVIC_SetPriorityGrouping>
}
 8001dba:	bf00      	nop
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b086      	sub	sp, #24
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	4603      	mov	r3, r0
 8001dca:	60b9      	str	r1, [r7, #8]
 8001dcc:	607a      	str	r2, [r7, #4]
 8001dce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001dd4:	f7ff ff5c 	bl	8001c90 <__NVIC_GetPriorityGrouping>
 8001dd8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	68b9      	ldr	r1, [r7, #8]
 8001dde:	6978      	ldr	r0, [r7, #20]
 8001de0:	f7ff ff8e 	bl	8001d00 <NVIC_EncodePriority>
 8001de4:	4602      	mov	r2, r0
 8001de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dea:	4611      	mov	r1, r2
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff ff5d 	bl	8001cac <__NVIC_SetPriority>
}
 8001df2:	bf00      	nop
 8001df4:	3718      	adds	r7, #24
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b082      	sub	sp, #8
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f7ff ffb0 	bl	8001d68 <SysTick_Config>
 8001e08:	4603      	mov	r3, r0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
	...

08001e14 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d101      	bne.n	8001e26 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e054      	b.n	8001ed0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	7f5b      	ldrb	r3, [r3, #29]
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d105      	bne.n	8001e3c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f7ff fcf6 	bl	8001828 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2202      	movs	r2, #2
 8001e40:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	791b      	ldrb	r3, [r3, #4]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d10c      	bne.n	8001e64 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a22      	ldr	r2, [pc, #136]	@ (8001ed8 <HAL_CRC_Init+0xc4>)
 8001e50:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	689a      	ldr	r2, [r3, #8]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f022 0218 	bic.w	r2, r2, #24
 8001e60:	609a      	str	r2, [r3, #8]
 8001e62:	e00c      	b.n	8001e7e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6899      	ldr	r1, [r3, #8]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 f834 	bl	8001edc <HAL_CRCEx_Polynomial_Set>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e028      	b.n	8001ed0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	795b      	ldrb	r3, [r3, #5]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d105      	bne.n	8001e92 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f04f 32ff 	mov.w	r2, #4294967295
 8001e8e:	611a      	str	r2, [r3, #16]
 8001e90:	e004      	b.n	8001e9c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	6912      	ldr	r2, [r2, #16]
 8001e9a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	695a      	ldr	r2, [r3, #20]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	699a      	ldr	r2, [r3, #24]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001ece:	2300      	movs	r3, #0
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3708      	adds	r7, #8
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	04c11db7 	.word	0x04c11db7

08001edc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b087      	sub	sp, #28
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001eec:	231f      	movs	r3, #31
 8001eee:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d102      	bne.n	8001f00 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	75fb      	strb	r3, [r7, #23]
 8001efe:	e063      	b.n	8001fc8 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001f00:	bf00      	nop
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1e5a      	subs	r2, r3, #1
 8001f06:	613a      	str	r2, [r7, #16]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d009      	beq.n	8001f20 <HAL_CRCEx_Polynomial_Set+0x44>
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	f003 031f 	and.w	r3, r3, #31
 8001f12:	68ba      	ldr	r2, [r7, #8]
 8001f14:	fa22 f303 	lsr.w	r3, r2, r3
 8001f18:	f003 0301 	and.w	r3, r3, #1
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d0f0      	beq.n	8001f02 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2b18      	cmp	r3, #24
 8001f24:	d846      	bhi.n	8001fb4 <HAL_CRCEx_Polynomial_Set+0xd8>
 8001f26:	a201      	add	r2, pc, #4	@ (adr r2, 8001f2c <HAL_CRCEx_Polynomial_Set+0x50>)
 8001f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f2c:	08001fbb 	.word	0x08001fbb
 8001f30:	08001fb5 	.word	0x08001fb5
 8001f34:	08001fb5 	.word	0x08001fb5
 8001f38:	08001fb5 	.word	0x08001fb5
 8001f3c:	08001fb5 	.word	0x08001fb5
 8001f40:	08001fb5 	.word	0x08001fb5
 8001f44:	08001fb5 	.word	0x08001fb5
 8001f48:	08001fb5 	.word	0x08001fb5
 8001f4c:	08001fa9 	.word	0x08001fa9
 8001f50:	08001fb5 	.word	0x08001fb5
 8001f54:	08001fb5 	.word	0x08001fb5
 8001f58:	08001fb5 	.word	0x08001fb5
 8001f5c:	08001fb5 	.word	0x08001fb5
 8001f60:	08001fb5 	.word	0x08001fb5
 8001f64:	08001fb5 	.word	0x08001fb5
 8001f68:	08001fb5 	.word	0x08001fb5
 8001f6c:	08001f9d 	.word	0x08001f9d
 8001f70:	08001fb5 	.word	0x08001fb5
 8001f74:	08001fb5 	.word	0x08001fb5
 8001f78:	08001fb5 	.word	0x08001fb5
 8001f7c:	08001fb5 	.word	0x08001fb5
 8001f80:	08001fb5 	.word	0x08001fb5
 8001f84:	08001fb5 	.word	0x08001fb5
 8001f88:	08001fb5 	.word	0x08001fb5
 8001f8c:	08001f91 	.word	0x08001f91
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	2b06      	cmp	r3, #6
 8001f94:	d913      	bls.n	8001fbe <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001f9a:	e010      	b.n	8001fbe <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	2b07      	cmp	r3, #7
 8001fa0:	d90f      	bls.n	8001fc2 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001fa6:	e00c      	b.n	8001fc2 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	2b0f      	cmp	r3, #15
 8001fac:	d90b      	bls.n	8001fc6 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001fb2:	e008      	b.n	8001fc6 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	75fb      	strb	r3, [r7, #23]
        break;
 8001fb8:	e006      	b.n	8001fc8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001fba:	bf00      	nop
 8001fbc:	e004      	b.n	8001fc8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001fbe:	bf00      	nop
 8001fc0:	e002      	b.n	8001fc8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001fc2:	bf00      	nop
 8001fc4:	e000      	b.n	8001fc8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001fc6:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8001fc8:	7dfb      	ldrb	r3, [r7, #23]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d10d      	bne.n	8001fea <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	68ba      	ldr	r2, [r7, #8]
 8001fd4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f023 0118 	bic.w	r1, r3, #24
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001fea:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	371c      	adds	r7, #28
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b087      	sub	sp, #28
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002002:	2300      	movs	r3, #0
 8002004:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002006:	e17f      	b.n	8002308 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	2101      	movs	r1, #1
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	fa01 f303 	lsl.w	r3, r1, r3
 8002014:	4013      	ands	r3, r2
 8002016:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2b00      	cmp	r3, #0
 800201c:	f000 8171 	beq.w	8002302 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f003 0303 	and.w	r3, r3, #3
 8002028:	2b01      	cmp	r3, #1
 800202a:	d005      	beq.n	8002038 <HAL_GPIO_Init+0x40>
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f003 0303 	and.w	r3, r3, #3
 8002034:	2b02      	cmp	r3, #2
 8002036:	d130      	bne.n	800209a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	2203      	movs	r2, #3
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	43db      	mvns	r3, r3
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	4013      	ands	r3, r2
 800204e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	68da      	ldr	r2, [r3, #12]
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	4313      	orrs	r3, r2
 8002060:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800206e:	2201      	movs	r2, #1
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	43db      	mvns	r3, r3
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	4013      	ands	r3, r2
 800207c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	091b      	lsrs	r3, r3, #4
 8002084:	f003 0201 	and.w	r2, r3, #1
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	4313      	orrs	r3, r2
 8002092:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f003 0303 	and.w	r3, r3, #3
 80020a2:	2b03      	cmp	r3, #3
 80020a4:	d118      	bne.n	80020d8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80020ac:	2201      	movs	r2, #1
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	43db      	mvns	r3, r3
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	4013      	ands	r3, r2
 80020ba:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	08db      	lsrs	r3, r3, #3
 80020c2:	f003 0201 	and.w	r2, r3, #1
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	693a      	ldr	r2, [r7, #16]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	693a      	ldr	r2, [r7, #16]
 80020d6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f003 0303 	and.w	r3, r3, #3
 80020e0:	2b03      	cmp	r3, #3
 80020e2:	d017      	beq.n	8002114 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	2203      	movs	r2, #3
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	43db      	mvns	r3, r3
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	4013      	ands	r3, r2
 80020fa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	689a      	ldr	r2, [r3, #8]
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	693a      	ldr	r2, [r7, #16]
 800210a:	4313      	orrs	r3, r2
 800210c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f003 0303 	and.w	r3, r3, #3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d123      	bne.n	8002168 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	08da      	lsrs	r2, r3, #3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	3208      	adds	r2, #8
 8002128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800212c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	f003 0307 	and.w	r3, r3, #7
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	220f      	movs	r2, #15
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	43db      	mvns	r3, r3
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	4013      	ands	r3, r2
 8002142:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	691a      	ldr	r2, [r3, #16]
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	f003 0307 	and.w	r3, r3, #7
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	693a      	ldr	r2, [r7, #16]
 8002156:	4313      	orrs	r3, r2
 8002158:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	08da      	lsrs	r2, r3, #3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	3208      	adds	r2, #8
 8002162:	6939      	ldr	r1, [r7, #16]
 8002164:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	2203      	movs	r2, #3
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	43db      	mvns	r3, r3
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	4013      	ands	r3, r2
 800217e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f003 0203 	and.w	r2, r3, #3
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	693a      	ldr	r2, [r7, #16]
 8002192:	4313      	orrs	r3, r2
 8002194:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	693a      	ldr	r2, [r7, #16]
 800219a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	f000 80ac 	beq.w	8002302 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021aa:	4b5f      	ldr	r3, [pc, #380]	@ (8002328 <HAL_GPIO_Init+0x330>)
 80021ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021ae:	4a5e      	ldr	r2, [pc, #376]	@ (8002328 <HAL_GPIO_Init+0x330>)
 80021b0:	f043 0301 	orr.w	r3, r3, #1
 80021b4:	6613      	str	r3, [r2, #96]	@ 0x60
 80021b6:	4b5c      	ldr	r3, [pc, #368]	@ (8002328 <HAL_GPIO_Init+0x330>)
 80021b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	60bb      	str	r3, [r7, #8]
 80021c0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80021c2:	4a5a      	ldr	r2, [pc, #360]	@ (800232c <HAL_GPIO_Init+0x334>)
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	089b      	lsrs	r3, r3, #2
 80021c8:	3302      	adds	r3, #2
 80021ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	f003 0303 	and.w	r3, r3, #3
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	220f      	movs	r2, #15
 80021da:	fa02 f303 	lsl.w	r3, r2, r3
 80021de:	43db      	mvns	r3, r3
 80021e0:	693a      	ldr	r2, [r7, #16]
 80021e2:	4013      	ands	r3, r2
 80021e4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80021ec:	d025      	beq.n	800223a <HAL_GPIO_Init+0x242>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a4f      	ldr	r2, [pc, #316]	@ (8002330 <HAL_GPIO_Init+0x338>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d01f      	beq.n	8002236 <HAL_GPIO_Init+0x23e>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a4e      	ldr	r2, [pc, #312]	@ (8002334 <HAL_GPIO_Init+0x33c>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d019      	beq.n	8002232 <HAL_GPIO_Init+0x23a>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a4d      	ldr	r2, [pc, #308]	@ (8002338 <HAL_GPIO_Init+0x340>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d013      	beq.n	800222e <HAL_GPIO_Init+0x236>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a4c      	ldr	r2, [pc, #304]	@ (800233c <HAL_GPIO_Init+0x344>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d00d      	beq.n	800222a <HAL_GPIO_Init+0x232>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a4b      	ldr	r2, [pc, #300]	@ (8002340 <HAL_GPIO_Init+0x348>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d007      	beq.n	8002226 <HAL_GPIO_Init+0x22e>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a4a      	ldr	r2, [pc, #296]	@ (8002344 <HAL_GPIO_Init+0x34c>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d101      	bne.n	8002222 <HAL_GPIO_Init+0x22a>
 800221e:	2306      	movs	r3, #6
 8002220:	e00c      	b.n	800223c <HAL_GPIO_Init+0x244>
 8002222:	2307      	movs	r3, #7
 8002224:	e00a      	b.n	800223c <HAL_GPIO_Init+0x244>
 8002226:	2305      	movs	r3, #5
 8002228:	e008      	b.n	800223c <HAL_GPIO_Init+0x244>
 800222a:	2304      	movs	r3, #4
 800222c:	e006      	b.n	800223c <HAL_GPIO_Init+0x244>
 800222e:	2303      	movs	r3, #3
 8002230:	e004      	b.n	800223c <HAL_GPIO_Init+0x244>
 8002232:	2302      	movs	r3, #2
 8002234:	e002      	b.n	800223c <HAL_GPIO_Init+0x244>
 8002236:	2301      	movs	r3, #1
 8002238:	e000      	b.n	800223c <HAL_GPIO_Init+0x244>
 800223a:	2300      	movs	r3, #0
 800223c:	697a      	ldr	r2, [r7, #20]
 800223e:	f002 0203 	and.w	r2, r2, #3
 8002242:	0092      	lsls	r2, r2, #2
 8002244:	4093      	lsls	r3, r2
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	4313      	orrs	r3, r2
 800224a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800224c:	4937      	ldr	r1, [pc, #220]	@ (800232c <HAL_GPIO_Init+0x334>)
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	089b      	lsrs	r3, r3, #2
 8002252:	3302      	adds	r3, #2
 8002254:	693a      	ldr	r2, [r7, #16]
 8002256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800225a:	4b3b      	ldr	r3, [pc, #236]	@ (8002348 <HAL_GPIO_Init+0x350>)
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	43db      	mvns	r3, r3
 8002264:	693a      	ldr	r2, [r7, #16]
 8002266:	4013      	ands	r3, r2
 8002268:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d003      	beq.n	800227e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002276:	693a      	ldr	r2, [r7, #16]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	4313      	orrs	r3, r2
 800227c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800227e:	4a32      	ldr	r2, [pc, #200]	@ (8002348 <HAL_GPIO_Init+0x350>)
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002284:	4b30      	ldr	r3, [pc, #192]	@ (8002348 <HAL_GPIO_Init+0x350>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	43db      	mvns	r3, r3
 800228e:	693a      	ldr	r2, [r7, #16]
 8002290:	4013      	ands	r3, r2
 8002292:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d003      	beq.n	80022a8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80022a0:	693a      	ldr	r2, [r7, #16]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80022a8:	4a27      	ldr	r2, [pc, #156]	@ (8002348 <HAL_GPIO_Init+0x350>)
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80022ae:	4b26      	ldr	r3, [pc, #152]	@ (8002348 <HAL_GPIO_Init+0x350>)
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	43db      	mvns	r3, r3
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	4013      	ands	r3, r2
 80022bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d003      	beq.n	80022d2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80022ca:	693a      	ldr	r2, [r7, #16]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80022d2:	4a1d      	ldr	r2, [pc, #116]	@ (8002348 <HAL_GPIO_Init+0x350>)
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80022d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002348 <HAL_GPIO_Init+0x350>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	43db      	mvns	r3, r3
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	4013      	ands	r3, r2
 80022e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d003      	beq.n	80022fc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80022fc:	4a12      	ldr	r2, [pc, #72]	@ (8002348 <HAL_GPIO_Init+0x350>)
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	3301      	adds	r3, #1
 8002306:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	fa22 f303 	lsr.w	r3, r2, r3
 8002312:	2b00      	cmp	r3, #0
 8002314:	f47f ae78 	bne.w	8002008 <HAL_GPIO_Init+0x10>
  }
}
 8002318:	bf00      	nop
 800231a:	bf00      	nop
 800231c:	371c      	adds	r7, #28
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	40021000 	.word	0x40021000
 800232c:	40010000 	.word	0x40010000
 8002330:	48000400 	.word	0x48000400
 8002334:	48000800 	.word	0x48000800
 8002338:	48000c00 	.word	0x48000c00
 800233c:	48001000 	.word	0x48001000
 8002340:	48001400 	.word	0x48001400
 8002344:	48001800 	.word	0x48001800
 8002348:	40010400 	.word	0x40010400

0800234c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	460b      	mov	r3, r1
 8002356:	807b      	strh	r3, [r7, #2]
 8002358:	4613      	mov	r3, r2
 800235a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800235c:	787b      	ldrb	r3, [r7, #1]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d003      	beq.n	800236a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002362:	887a      	ldrh	r2, [r7, #2]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002368:	e002      	b.n	8002370 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800236a:	887a      	ldrh	r2, [r7, #2]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002370:	bf00      	nop
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002380:	4b04      	ldr	r3, [pc, #16]	@ (8002394 <HAL_PWREx_GetVoltageRange+0x18>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002388:	4618      	mov	r0, r3
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	40007000 	.word	0x40007000

08002398 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002398:	b480      	push	{r7}
 800239a:	b085      	sub	sp, #20
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80023a6:	d130      	bne.n	800240a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80023a8:	4b23      	ldr	r3, [pc, #140]	@ (8002438 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80023b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80023b4:	d038      	beq.n	8002428 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80023b6:	4b20      	ldr	r3, [pc, #128]	@ (8002438 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80023be:	4a1e      	ldr	r2, [pc, #120]	@ (8002438 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023c0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023c4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80023c6:	4b1d      	ldr	r3, [pc, #116]	@ (800243c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2232      	movs	r2, #50	@ 0x32
 80023cc:	fb02 f303 	mul.w	r3, r2, r3
 80023d0:	4a1b      	ldr	r2, [pc, #108]	@ (8002440 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80023d2:	fba2 2303 	umull	r2, r3, r2, r3
 80023d6:	0c9b      	lsrs	r3, r3, #18
 80023d8:	3301      	adds	r3, #1
 80023da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023dc:	e002      	b.n	80023e4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	3b01      	subs	r3, #1
 80023e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023e4:	4b14      	ldr	r3, [pc, #80]	@ (8002438 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023e6:	695b      	ldr	r3, [r3, #20]
 80023e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023f0:	d102      	bne.n	80023f8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d1f2      	bne.n	80023de <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023f8:	4b0f      	ldr	r3, [pc, #60]	@ (8002438 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023fa:	695b      	ldr	r3, [r3, #20]
 80023fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002400:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002404:	d110      	bne.n	8002428 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e00f      	b.n	800242a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800240a:	4b0b      	ldr	r3, [pc, #44]	@ (8002438 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002412:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002416:	d007      	beq.n	8002428 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002418:	4b07      	ldr	r3, [pc, #28]	@ (8002438 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002420:	4a05      	ldr	r2, [pc, #20]	@ (8002438 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002422:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002426:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3714      	adds	r7, #20
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	40007000 	.word	0x40007000
 800243c:	20000000 	.word	0x20000000
 8002440:	431bde83 	.word	0x431bde83

08002444 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b088      	sub	sp, #32
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d101      	bne.n	8002456 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e3ca      	b.n	8002bec <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002456:	4b97      	ldr	r3, [pc, #604]	@ (80026b4 <HAL_RCC_OscConfig+0x270>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f003 030c 	and.w	r3, r3, #12
 800245e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002460:	4b94      	ldr	r3, [pc, #592]	@ (80026b4 <HAL_RCC_OscConfig+0x270>)
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	f003 0303 	and.w	r3, r3, #3
 8002468:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0310 	and.w	r3, r3, #16
 8002472:	2b00      	cmp	r3, #0
 8002474:	f000 80e4 	beq.w	8002640 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d007      	beq.n	800248e <HAL_RCC_OscConfig+0x4a>
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	2b0c      	cmp	r3, #12
 8002482:	f040 808b 	bne.w	800259c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	2b01      	cmp	r3, #1
 800248a:	f040 8087 	bne.w	800259c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800248e:	4b89      	ldr	r3, [pc, #548]	@ (80026b4 <HAL_RCC_OscConfig+0x270>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d005      	beq.n	80024a6 <HAL_RCC_OscConfig+0x62>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e3a2      	b.n	8002bec <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a1a      	ldr	r2, [r3, #32]
 80024aa:	4b82      	ldr	r3, [pc, #520]	@ (80026b4 <HAL_RCC_OscConfig+0x270>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0308 	and.w	r3, r3, #8
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d004      	beq.n	80024c0 <HAL_RCC_OscConfig+0x7c>
 80024b6:	4b7f      	ldr	r3, [pc, #508]	@ (80026b4 <HAL_RCC_OscConfig+0x270>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024be:	e005      	b.n	80024cc <HAL_RCC_OscConfig+0x88>
 80024c0:	4b7c      	ldr	r3, [pc, #496]	@ (80026b4 <HAL_RCC_OscConfig+0x270>)
 80024c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024c6:	091b      	lsrs	r3, r3, #4
 80024c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d223      	bcs.n	8002518 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a1b      	ldr	r3, [r3, #32]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f000 fd55 	bl	8002f84 <RCC_SetFlashLatencyFromMSIRange>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e383      	b.n	8002bec <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024e4:	4b73      	ldr	r3, [pc, #460]	@ (80026b4 <HAL_RCC_OscConfig+0x270>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a72      	ldr	r2, [pc, #456]	@ (80026b4 <HAL_RCC_OscConfig+0x270>)
 80024ea:	f043 0308 	orr.w	r3, r3, #8
 80024ee:	6013      	str	r3, [r2, #0]
 80024f0:	4b70      	ldr	r3, [pc, #448]	@ (80026b4 <HAL_RCC_OscConfig+0x270>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a1b      	ldr	r3, [r3, #32]
 80024fc:	496d      	ldr	r1, [pc, #436]	@ (80026b4 <HAL_RCC_OscConfig+0x270>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002502:	4b6c      	ldr	r3, [pc, #432]	@ (80026b4 <HAL_RCC_OscConfig+0x270>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	69db      	ldr	r3, [r3, #28]
 800250e:	021b      	lsls	r3, r3, #8
 8002510:	4968      	ldr	r1, [pc, #416]	@ (80026b4 <HAL_RCC_OscConfig+0x270>)
 8002512:	4313      	orrs	r3, r2
 8002514:	604b      	str	r3, [r1, #4]
 8002516:	e025      	b.n	8002564 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002518:	4b66      	ldr	r3, [pc, #408]	@ (80026b4 <HAL_RCC_OscConfig+0x270>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a65      	ldr	r2, [pc, #404]	@ (80026b4 <HAL_RCC_OscConfig+0x270>)
 800251e:	f043 0308 	orr.w	r3, r3, #8
 8002522:	6013      	str	r3, [r2, #0]
 8002524:	4b63      	ldr	r3, [pc, #396]	@ (80026b4 <HAL_RCC_OscConfig+0x270>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a1b      	ldr	r3, [r3, #32]
 8002530:	4960      	ldr	r1, [pc, #384]	@ (80026b4 <HAL_RCC_OscConfig+0x270>)
 8002532:	4313      	orrs	r3, r2
 8002534:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002536:	4b5f      	ldr	r3, [pc, #380]	@ (80026b4 <HAL_RCC_OscConfig+0x270>)
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	021b      	lsls	r3, r3, #8
 8002544:	495b      	ldr	r1, [pc, #364]	@ (80026b4 <HAL_RCC_OscConfig+0x270>)
 8002546:	4313      	orrs	r3, r2
 8002548:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d109      	bne.n	8002564 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a1b      	ldr	r3, [r3, #32]
 8002554:	4618      	mov	r0, r3
 8002556:	f000 fd15 	bl	8002f84 <RCC_SetFlashLatencyFromMSIRange>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e343      	b.n	8002bec <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002564:	f000 fc4a 	bl	8002dfc <HAL_RCC_GetSysClockFreq>
 8002568:	4602      	mov	r2, r0
 800256a:	4b52      	ldr	r3, [pc, #328]	@ (80026b4 <HAL_RCC_OscConfig+0x270>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	091b      	lsrs	r3, r3, #4
 8002570:	f003 030f 	and.w	r3, r3, #15
 8002574:	4950      	ldr	r1, [pc, #320]	@ (80026b8 <HAL_RCC_OscConfig+0x274>)
 8002576:	5ccb      	ldrb	r3, [r1, r3]
 8002578:	f003 031f 	and.w	r3, r3, #31
 800257c:	fa22 f303 	lsr.w	r3, r2, r3
 8002580:	4a4e      	ldr	r2, [pc, #312]	@ (80026bc <HAL_RCC_OscConfig+0x278>)
 8002582:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002584:	4b4e      	ldr	r3, [pc, #312]	@ (80026c0 <HAL_RCC_OscConfig+0x27c>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4618      	mov	r0, r3
 800258a:	f7ff fadd 	bl	8001b48 <HAL_InitTick>
 800258e:	4603      	mov	r3, r0
 8002590:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002592:	7bfb      	ldrb	r3, [r7, #15]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d052      	beq.n	800263e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002598:	7bfb      	ldrb	r3, [r7, #15]
 800259a:	e327      	b.n	8002bec <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d032      	beq.n	800260a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80025a4:	4b43      	ldr	r3, [pc, #268]	@ (80026b4 <HAL_RCC_OscConfig+0x270>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a42      	ldr	r2, [pc, #264]	@ (80026b4 <HAL_RCC_OscConfig+0x270>)
 80025aa:	f043 0301 	orr.w	r3, r3, #1
 80025ae:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025b0:	f7ff fb1a 	bl	8001be8 <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025b6:	e008      	b.n	80025ca <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025b8:	f7ff fb16 	bl	8001be8 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e310      	b.n	8002bec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025ca:	4b3a      	ldr	r3, [pc, #232]	@ (80026b4 <HAL_RCC_OscConfig+0x270>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d0f0      	beq.n	80025b8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025d6:	4b37      	ldr	r3, [pc, #220]	@ (80026b4 <HAL_RCC_OscConfig+0x270>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a36      	ldr	r2, [pc, #216]	@ (80026b4 <HAL_RCC_OscConfig+0x270>)
 80025dc:	f043 0308 	orr.w	r3, r3, #8
 80025e0:	6013      	str	r3, [r2, #0]
 80025e2:	4b34      	ldr	r3, [pc, #208]	@ (80026b4 <HAL_RCC_OscConfig+0x270>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a1b      	ldr	r3, [r3, #32]
 80025ee:	4931      	ldr	r1, [pc, #196]	@ (80026b4 <HAL_RCC_OscConfig+0x270>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025f4:	4b2f      	ldr	r3, [pc, #188]	@ (80026b4 <HAL_RCC_OscConfig+0x270>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	69db      	ldr	r3, [r3, #28]
 8002600:	021b      	lsls	r3, r3, #8
 8002602:	492c      	ldr	r1, [pc, #176]	@ (80026b4 <HAL_RCC_OscConfig+0x270>)
 8002604:	4313      	orrs	r3, r2
 8002606:	604b      	str	r3, [r1, #4]
 8002608:	e01a      	b.n	8002640 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800260a:	4b2a      	ldr	r3, [pc, #168]	@ (80026b4 <HAL_RCC_OscConfig+0x270>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a29      	ldr	r2, [pc, #164]	@ (80026b4 <HAL_RCC_OscConfig+0x270>)
 8002610:	f023 0301 	bic.w	r3, r3, #1
 8002614:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002616:	f7ff fae7 	bl	8001be8 <HAL_GetTick>
 800261a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800261c:	e008      	b.n	8002630 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800261e:	f7ff fae3 	bl	8001be8 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d901      	bls.n	8002630 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e2dd      	b.n	8002bec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002630:	4b20      	ldr	r3, [pc, #128]	@ (80026b4 <HAL_RCC_OscConfig+0x270>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d1f0      	bne.n	800261e <HAL_RCC_OscConfig+0x1da>
 800263c:	e000      	b.n	8002640 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800263e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0301 	and.w	r3, r3, #1
 8002648:	2b00      	cmp	r3, #0
 800264a:	d074      	beq.n	8002736 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	2b08      	cmp	r3, #8
 8002650:	d005      	beq.n	800265e <HAL_RCC_OscConfig+0x21a>
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	2b0c      	cmp	r3, #12
 8002656:	d10e      	bne.n	8002676 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	2b03      	cmp	r3, #3
 800265c:	d10b      	bne.n	8002676 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800265e:	4b15      	ldr	r3, [pc, #84]	@ (80026b4 <HAL_RCC_OscConfig+0x270>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d064      	beq.n	8002734 <HAL_RCC_OscConfig+0x2f0>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d160      	bne.n	8002734 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e2ba      	b.n	8002bec <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800267e:	d106      	bne.n	800268e <HAL_RCC_OscConfig+0x24a>
 8002680:	4b0c      	ldr	r3, [pc, #48]	@ (80026b4 <HAL_RCC_OscConfig+0x270>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a0b      	ldr	r2, [pc, #44]	@ (80026b4 <HAL_RCC_OscConfig+0x270>)
 8002686:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800268a:	6013      	str	r3, [r2, #0]
 800268c:	e026      	b.n	80026dc <HAL_RCC_OscConfig+0x298>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002696:	d115      	bne.n	80026c4 <HAL_RCC_OscConfig+0x280>
 8002698:	4b06      	ldr	r3, [pc, #24]	@ (80026b4 <HAL_RCC_OscConfig+0x270>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a05      	ldr	r2, [pc, #20]	@ (80026b4 <HAL_RCC_OscConfig+0x270>)
 800269e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026a2:	6013      	str	r3, [r2, #0]
 80026a4:	4b03      	ldr	r3, [pc, #12]	@ (80026b4 <HAL_RCC_OscConfig+0x270>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a02      	ldr	r2, [pc, #8]	@ (80026b4 <HAL_RCC_OscConfig+0x270>)
 80026aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026ae:	6013      	str	r3, [r2, #0]
 80026b0:	e014      	b.n	80026dc <HAL_RCC_OscConfig+0x298>
 80026b2:	bf00      	nop
 80026b4:	40021000 	.word	0x40021000
 80026b8:	0800b3b0 	.word	0x0800b3b0
 80026bc:	20000000 	.word	0x20000000
 80026c0:	20000004 	.word	0x20000004
 80026c4:	4ba0      	ldr	r3, [pc, #640]	@ (8002948 <HAL_RCC_OscConfig+0x504>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a9f      	ldr	r2, [pc, #636]	@ (8002948 <HAL_RCC_OscConfig+0x504>)
 80026ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026ce:	6013      	str	r3, [r2, #0]
 80026d0:	4b9d      	ldr	r3, [pc, #628]	@ (8002948 <HAL_RCC_OscConfig+0x504>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a9c      	ldr	r2, [pc, #624]	@ (8002948 <HAL_RCC_OscConfig+0x504>)
 80026d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d013      	beq.n	800270c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e4:	f7ff fa80 	bl	8001be8 <HAL_GetTick>
 80026e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026ea:	e008      	b.n	80026fe <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026ec:	f7ff fa7c 	bl	8001be8 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b64      	cmp	r3, #100	@ 0x64
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e276      	b.n	8002bec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026fe:	4b92      	ldr	r3, [pc, #584]	@ (8002948 <HAL_RCC_OscConfig+0x504>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d0f0      	beq.n	80026ec <HAL_RCC_OscConfig+0x2a8>
 800270a:	e014      	b.n	8002736 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800270c:	f7ff fa6c 	bl	8001be8 <HAL_GetTick>
 8002710:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002712:	e008      	b.n	8002726 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002714:	f7ff fa68 	bl	8001be8 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b64      	cmp	r3, #100	@ 0x64
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e262      	b.n	8002bec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002726:	4b88      	ldr	r3, [pc, #544]	@ (8002948 <HAL_RCC_OscConfig+0x504>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d1f0      	bne.n	8002714 <HAL_RCC_OscConfig+0x2d0>
 8002732:	e000      	b.n	8002736 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002734:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d060      	beq.n	8002804 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	2b04      	cmp	r3, #4
 8002746:	d005      	beq.n	8002754 <HAL_RCC_OscConfig+0x310>
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	2b0c      	cmp	r3, #12
 800274c:	d119      	bne.n	8002782 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	2b02      	cmp	r3, #2
 8002752:	d116      	bne.n	8002782 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002754:	4b7c      	ldr	r3, [pc, #496]	@ (8002948 <HAL_RCC_OscConfig+0x504>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800275c:	2b00      	cmp	r3, #0
 800275e:	d005      	beq.n	800276c <HAL_RCC_OscConfig+0x328>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d101      	bne.n	800276c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e23f      	b.n	8002bec <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800276c:	4b76      	ldr	r3, [pc, #472]	@ (8002948 <HAL_RCC_OscConfig+0x504>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	061b      	lsls	r3, r3, #24
 800277a:	4973      	ldr	r1, [pc, #460]	@ (8002948 <HAL_RCC_OscConfig+0x504>)
 800277c:	4313      	orrs	r3, r2
 800277e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002780:	e040      	b.n	8002804 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d023      	beq.n	80027d2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800278a:	4b6f      	ldr	r3, [pc, #444]	@ (8002948 <HAL_RCC_OscConfig+0x504>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a6e      	ldr	r2, [pc, #440]	@ (8002948 <HAL_RCC_OscConfig+0x504>)
 8002790:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002794:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002796:	f7ff fa27 	bl	8001be8 <HAL_GetTick>
 800279a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800279c:	e008      	b.n	80027b0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800279e:	f7ff fa23 	bl	8001be8 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e21d      	b.n	8002bec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027b0:	4b65      	ldr	r3, [pc, #404]	@ (8002948 <HAL_RCC_OscConfig+0x504>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d0f0      	beq.n	800279e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027bc:	4b62      	ldr	r3, [pc, #392]	@ (8002948 <HAL_RCC_OscConfig+0x504>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	691b      	ldr	r3, [r3, #16]
 80027c8:	061b      	lsls	r3, r3, #24
 80027ca:	495f      	ldr	r1, [pc, #380]	@ (8002948 <HAL_RCC_OscConfig+0x504>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	604b      	str	r3, [r1, #4]
 80027d0:	e018      	b.n	8002804 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027d2:	4b5d      	ldr	r3, [pc, #372]	@ (8002948 <HAL_RCC_OscConfig+0x504>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a5c      	ldr	r2, [pc, #368]	@ (8002948 <HAL_RCC_OscConfig+0x504>)
 80027d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80027dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027de:	f7ff fa03 	bl	8001be8 <HAL_GetTick>
 80027e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027e4:	e008      	b.n	80027f8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027e6:	f7ff f9ff 	bl	8001be8 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e1f9      	b.n	8002bec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027f8:	4b53      	ldr	r3, [pc, #332]	@ (8002948 <HAL_RCC_OscConfig+0x504>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002800:	2b00      	cmp	r3, #0
 8002802:	d1f0      	bne.n	80027e6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0308 	and.w	r3, r3, #8
 800280c:	2b00      	cmp	r3, #0
 800280e:	d03c      	beq.n	800288a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	695b      	ldr	r3, [r3, #20]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d01c      	beq.n	8002852 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002818:	4b4b      	ldr	r3, [pc, #300]	@ (8002948 <HAL_RCC_OscConfig+0x504>)
 800281a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800281e:	4a4a      	ldr	r2, [pc, #296]	@ (8002948 <HAL_RCC_OscConfig+0x504>)
 8002820:	f043 0301 	orr.w	r3, r3, #1
 8002824:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002828:	f7ff f9de 	bl	8001be8 <HAL_GetTick>
 800282c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800282e:	e008      	b.n	8002842 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002830:	f7ff f9da 	bl	8001be8 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e1d4      	b.n	8002bec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002842:	4b41      	ldr	r3, [pc, #260]	@ (8002948 <HAL_RCC_OscConfig+0x504>)
 8002844:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002848:	f003 0302 	and.w	r3, r3, #2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d0ef      	beq.n	8002830 <HAL_RCC_OscConfig+0x3ec>
 8002850:	e01b      	b.n	800288a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002852:	4b3d      	ldr	r3, [pc, #244]	@ (8002948 <HAL_RCC_OscConfig+0x504>)
 8002854:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002858:	4a3b      	ldr	r2, [pc, #236]	@ (8002948 <HAL_RCC_OscConfig+0x504>)
 800285a:	f023 0301 	bic.w	r3, r3, #1
 800285e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002862:	f7ff f9c1 	bl	8001be8 <HAL_GetTick>
 8002866:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002868:	e008      	b.n	800287c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800286a:	f7ff f9bd 	bl	8001be8 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d901      	bls.n	800287c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e1b7      	b.n	8002bec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800287c:	4b32      	ldr	r3, [pc, #200]	@ (8002948 <HAL_RCC_OscConfig+0x504>)
 800287e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1ef      	bne.n	800286a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0304 	and.w	r3, r3, #4
 8002892:	2b00      	cmp	r3, #0
 8002894:	f000 80a6 	beq.w	80029e4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002898:	2300      	movs	r3, #0
 800289a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800289c:	4b2a      	ldr	r3, [pc, #168]	@ (8002948 <HAL_RCC_OscConfig+0x504>)
 800289e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d10d      	bne.n	80028c4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028a8:	4b27      	ldr	r3, [pc, #156]	@ (8002948 <HAL_RCC_OscConfig+0x504>)
 80028aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ac:	4a26      	ldr	r2, [pc, #152]	@ (8002948 <HAL_RCC_OscConfig+0x504>)
 80028ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80028b4:	4b24      	ldr	r3, [pc, #144]	@ (8002948 <HAL_RCC_OscConfig+0x504>)
 80028b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028bc:	60bb      	str	r3, [r7, #8]
 80028be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028c0:	2301      	movs	r3, #1
 80028c2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028c4:	4b21      	ldr	r3, [pc, #132]	@ (800294c <HAL_RCC_OscConfig+0x508>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d118      	bne.n	8002902 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028d0:	4b1e      	ldr	r3, [pc, #120]	@ (800294c <HAL_RCC_OscConfig+0x508>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a1d      	ldr	r2, [pc, #116]	@ (800294c <HAL_RCC_OscConfig+0x508>)
 80028d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028dc:	f7ff f984 	bl	8001be8 <HAL_GetTick>
 80028e0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028e4:	f7ff f980 	bl	8001be8 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e17a      	b.n	8002bec <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028f6:	4b15      	ldr	r3, [pc, #84]	@ (800294c <HAL_RCC_OscConfig+0x508>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d0f0      	beq.n	80028e4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d108      	bne.n	800291c <HAL_RCC_OscConfig+0x4d8>
 800290a:	4b0f      	ldr	r3, [pc, #60]	@ (8002948 <HAL_RCC_OscConfig+0x504>)
 800290c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002910:	4a0d      	ldr	r2, [pc, #52]	@ (8002948 <HAL_RCC_OscConfig+0x504>)
 8002912:	f043 0301 	orr.w	r3, r3, #1
 8002916:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800291a:	e029      	b.n	8002970 <HAL_RCC_OscConfig+0x52c>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	2b05      	cmp	r3, #5
 8002922:	d115      	bne.n	8002950 <HAL_RCC_OscConfig+0x50c>
 8002924:	4b08      	ldr	r3, [pc, #32]	@ (8002948 <HAL_RCC_OscConfig+0x504>)
 8002926:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800292a:	4a07      	ldr	r2, [pc, #28]	@ (8002948 <HAL_RCC_OscConfig+0x504>)
 800292c:	f043 0304 	orr.w	r3, r3, #4
 8002930:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002934:	4b04      	ldr	r3, [pc, #16]	@ (8002948 <HAL_RCC_OscConfig+0x504>)
 8002936:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800293a:	4a03      	ldr	r2, [pc, #12]	@ (8002948 <HAL_RCC_OscConfig+0x504>)
 800293c:	f043 0301 	orr.w	r3, r3, #1
 8002940:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002944:	e014      	b.n	8002970 <HAL_RCC_OscConfig+0x52c>
 8002946:	bf00      	nop
 8002948:	40021000 	.word	0x40021000
 800294c:	40007000 	.word	0x40007000
 8002950:	4b9c      	ldr	r3, [pc, #624]	@ (8002bc4 <HAL_RCC_OscConfig+0x780>)
 8002952:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002956:	4a9b      	ldr	r2, [pc, #620]	@ (8002bc4 <HAL_RCC_OscConfig+0x780>)
 8002958:	f023 0301 	bic.w	r3, r3, #1
 800295c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002960:	4b98      	ldr	r3, [pc, #608]	@ (8002bc4 <HAL_RCC_OscConfig+0x780>)
 8002962:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002966:	4a97      	ldr	r2, [pc, #604]	@ (8002bc4 <HAL_RCC_OscConfig+0x780>)
 8002968:	f023 0304 	bic.w	r3, r3, #4
 800296c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d016      	beq.n	80029a6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002978:	f7ff f936 	bl	8001be8 <HAL_GetTick>
 800297c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800297e:	e00a      	b.n	8002996 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002980:	f7ff f932 	bl	8001be8 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800298e:	4293      	cmp	r3, r2
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e12a      	b.n	8002bec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002996:	4b8b      	ldr	r3, [pc, #556]	@ (8002bc4 <HAL_RCC_OscConfig+0x780>)
 8002998:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800299c:	f003 0302 	and.w	r3, r3, #2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d0ed      	beq.n	8002980 <HAL_RCC_OscConfig+0x53c>
 80029a4:	e015      	b.n	80029d2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029a6:	f7ff f91f 	bl	8001be8 <HAL_GetTick>
 80029aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029ac:	e00a      	b.n	80029c4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ae:	f7ff f91b 	bl	8001be8 <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029bc:	4293      	cmp	r3, r2
 80029be:	d901      	bls.n	80029c4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e113      	b.n	8002bec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029c4:	4b7f      	ldr	r3, [pc, #508]	@ (8002bc4 <HAL_RCC_OscConfig+0x780>)
 80029c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d1ed      	bne.n	80029ae <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029d2:	7ffb      	ldrb	r3, [r7, #31]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d105      	bne.n	80029e4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029d8:	4b7a      	ldr	r3, [pc, #488]	@ (8002bc4 <HAL_RCC_OscConfig+0x780>)
 80029da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029dc:	4a79      	ldr	r2, [pc, #484]	@ (8002bc4 <HAL_RCC_OscConfig+0x780>)
 80029de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029e2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	f000 80fe 	beq.w	8002bea <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	f040 80d0 	bne.w	8002b98 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80029f8:	4b72      	ldr	r3, [pc, #456]	@ (8002bc4 <HAL_RCC_OscConfig+0x780>)
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	f003 0203 	and.w	r2, r3, #3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d130      	bne.n	8002a6e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a16:	3b01      	subs	r3, #1
 8002a18:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d127      	bne.n	8002a6e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a28:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d11f      	bne.n	8002a6e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002a38:	2a07      	cmp	r2, #7
 8002a3a:	bf14      	ite	ne
 8002a3c:	2201      	movne	r2, #1
 8002a3e:	2200      	moveq	r2, #0
 8002a40:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d113      	bne.n	8002a6e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a50:	085b      	lsrs	r3, r3, #1
 8002a52:	3b01      	subs	r3, #1
 8002a54:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d109      	bne.n	8002a6e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a64:	085b      	lsrs	r3, r3, #1
 8002a66:	3b01      	subs	r3, #1
 8002a68:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d06e      	beq.n	8002b4c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	2b0c      	cmp	r3, #12
 8002a72:	d069      	beq.n	8002b48 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002a74:	4b53      	ldr	r3, [pc, #332]	@ (8002bc4 <HAL_RCC_OscConfig+0x780>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d105      	bne.n	8002a8c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002a80:	4b50      	ldr	r3, [pc, #320]	@ (8002bc4 <HAL_RCC_OscConfig+0x780>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e0ad      	b.n	8002bec <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002a90:	4b4c      	ldr	r3, [pc, #304]	@ (8002bc4 <HAL_RCC_OscConfig+0x780>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a4b      	ldr	r2, [pc, #300]	@ (8002bc4 <HAL_RCC_OscConfig+0x780>)
 8002a96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a9a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a9c:	f7ff f8a4 	bl	8001be8 <HAL_GetTick>
 8002aa0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aa4:	f7ff f8a0 	bl	8001be8 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e09a      	b.n	8002bec <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ab6:	4b43      	ldr	r3, [pc, #268]	@ (8002bc4 <HAL_RCC_OscConfig+0x780>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1f0      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ac2:	4b40      	ldr	r3, [pc, #256]	@ (8002bc4 <HAL_RCC_OscConfig+0x780>)
 8002ac4:	68da      	ldr	r2, [r3, #12]
 8002ac6:	4b40      	ldr	r3, [pc, #256]	@ (8002bc8 <HAL_RCC_OscConfig+0x784>)
 8002ac8:	4013      	ands	r3, r2
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002ad2:	3a01      	subs	r2, #1
 8002ad4:	0112      	lsls	r2, r2, #4
 8002ad6:	4311      	orrs	r1, r2
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002adc:	0212      	lsls	r2, r2, #8
 8002ade:	4311      	orrs	r1, r2
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002ae4:	0852      	lsrs	r2, r2, #1
 8002ae6:	3a01      	subs	r2, #1
 8002ae8:	0552      	lsls	r2, r2, #21
 8002aea:	4311      	orrs	r1, r2
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002af0:	0852      	lsrs	r2, r2, #1
 8002af2:	3a01      	subs	r2, #1
 8002af4:	0652      	lsls	r2, r2, #25
 8002af6:	4311      	orrs	r1, r2
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002afc:	0912      	lsrs	r2, r2, #4
 8002afe:	0452      	lsls	r2, r2, #17
 8002b00:	430a      	orrs	r2, r1
 8002b02:	4930      	ldr	r1, [pc, #192]	@ (8002bc4 <HAL_RCC_OscConfig+0x780>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002b08:	4b2e      	ldr	r3, [pc, #184]	@ (8002bc4 <HAL_RCC_OscConfig+0x780>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a2d      	ldr	r2, [pc, #180]	@ (8002bc4 <HAL_RCC_OscConfig+0x780>)
 8002b0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b12:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b14:	4b2b      	ldr	r3, [pc, #172]	@ (8002bc4 <HAL_RCC_OscConfig+0x780>)
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	4a2a      	ldr	r2, [pc, #168]	@ (8002bc4 <HAL_RCC_OscConfig+0x780>)
 8002b1a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b1e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b20:	f7ff f862 	bl	8001be8 <HAL_GetTick>
 8002b24:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b26:	e008      	b.n	8002b3a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b28:	f7ff f85e 	bl	8001be8 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e058      	b.n	8002bec <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b3a:	4b22      	ldr	r3, [pc, #136]	@ (8002bc4 <HAL_RCC_OscConfig+0x780>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d0f0      	beq.n	8002b28 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b46:	e050      	b.n	8002bea <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e04f      	b.n	8002bec <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b4c:	4b1d      	ldr	r3, [pc, #116]	@ (8002bc4 <HAL_RCC_OscConfig+0x780>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d148      	bne.n	8002bea <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002b58:	4b1a      	ldr	r3, [pc, #104]	@ (8002bc4 <HAL_RCC_OscConfig+0x780>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a19      	ldr	r2, [pc, #100]	@ (8002bc4 <HAL_RCC_OscConfig+0x780>)
 8002b5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b62:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b64:	4b17      	ldr	r3, [pc, #92]	@ (8002bc4 <HAL_RCC_OscConfig+0x780>)
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	4a16      	ldr	r2, [pc, #88]	@ (8002bc4 <HAL_RCC_OscConfig+0x780>)
 8002b6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b6e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b70:	f7ff f83a 	bl	8001be8 <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b78:	f7ff f836 	bl	8001be8 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e030      	b.n	8002bec <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b8a:	4b0e      	ldr	r3, [pc, #56]	@ (8002bc4 <HAL_RCC_OscConfig+0x780>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d0f0      	beq.n	8002b78 <HAL_RCC_OscConfig+0x734>
 8002b96:	e028      	b.n	8002bea <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	2b0c      	cmp	r3, #12
 8002b9c:	d023      	beq.n	8002be6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b9e:	4b09      	ldr	r3, [pc, #36]	@ (8002bc4 <HAL_RCC_OscConfig+0x780>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a08      	ldr	r2, [pc, #32]	@ (8002bc4 <HAL_RCC_OscConfig+0x780>)
 8002ba4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ba8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002baa:	f7ff f81d 	bl	8001be8 <HAL_GetTick>
 8002bae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bb0:	e00c      	b.n	8002bcc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bb2:	f7ff f819 	bl	8001be8 <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d905      	bls.n	8002bcc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e013      	b.n	8002bec <HAL_RCC_OscConfig+0x7a8>
 8002bc4:	40021000 	.word	0x40021000
 8002bc8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bcc:	4b09      	ldr	r3, [pc, #36]	@ (8002bf4 <HAL_RCC_OscConfig+0x7b0>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d1ec      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002bd8:	4b06      	ldr	r3, [pc, #24]	@ (8002bf4 <HAL_RCC_OscConfig+0x7b0>)
 8002bda:	68da      	ldr	r2, [r3, #12]
 8002bdc:	4905      	ldr	r1, [pc, #20]	@ (8002bf4 <HAL_RCC_OscConfig+0x7b0>)
 8002bde:	4b06      	ldr	r3, [pc, #24]	@ (8002bf8 <HAL_RCC_OscConfig+0x7b4>)
 8002be0:	4013      	ands	r3, r2
 8002be2:	60cb      	str	r3, [r1, #12]
 8002be4:	e001      	b.n	8002bea <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e000      	b.n	8002bec <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002bea:	2300      	movs	r3, #0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3720      	adds	r7, #32
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	40021000 	.word	0x40021000
 8002bf8:	feeefffc 	.word	0xfeeefffc

08002bfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d101      	bne.n	8002c10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e0e7      	b.n	8002de0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c10:	4b75      	ldr	r3, [pc, #468]	@ (8002de8 <HAL_RCC_ClockConfig+0x1ec>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0307 	and.w	r3, r3, #7
 8002c18:	683a      	ldr	r2, [r7, #0]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d910      	bls.n	8002c40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c1e:	4b72      	ldr	r3, [pc, #456]	@ (8002de8 <HAL_RCC_ClockConfig+0x1ec>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f023 0207 	bic.w	r2, r3, #7
 8002c26:	4970      	ldr	r1, [pc, #448]	@ (8002de8 <HAL_RCC_ClockConfig+0x1ec>)
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c2e:	4b6e      	ldr	r3, [pc, #440]	@ (8002de8 <HAL_RCC_ClockConfig+0x1ec>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0307 	and.w	r3, r3, #7
 8002c36:	683a      	ldr	r2, [r7, #0]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d001      	beq.n	8002c40 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e0cf      	b.n	8002de0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0302 	and.w	r3, r3, #2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d010      	beq.n	8002c6e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689a      	ldr	r2, [r3, #8]
 8002c50:	4b66      	ldr	r3, [pc, #408]	@ (8002dec <HAL_RCC_ClockConfig+0x1f0>)
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d908      	bls.n	8002c6e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c5c:	4b63      	ldr	r3, [pc, #396]	@ (8002dec <HAL_RCC_ClockConfig+0x1f0>)
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	4960      	ldr	r1, [pc, #384]	@ (8002dec <HAL_RCC_ClockConfig+0x1f0>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d04c      	beq.n	8002d14 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	2b03      	cmp	r3, #3
 8002c80:	d107      	bne.n	8002c92 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c82:	4b5a      	ldr	r3, [pc, #360]	@ (8002dec <HAL_RCC_ClockConfig+0x1f0>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d121      	bne.n	8002cd2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e0a6      	b.n	8002de0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d107      	bne.n	8002caa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c9a:	4b54      	ldr	r3, [pc, #336]	@ (8002dec <HAL_RCC_ClockConfig+0x1f0>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d115      	bne.n	8002cd2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e09a      	b.n	8002de0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d107      	bne.n	8002cc2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002cb2:	4b4e      	ldr	r3, [pc, #312]	@ (8002dec <HAL_RCC_ClockConfig+0x1f0>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d109      	bne.n	8002cd2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e08e      	b.n	8002de0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cc2:	4b4a      	ldr	r3, [pc, #296]	@ (8002dec <HAL_RCC_ClockConfig+0x1f0>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d101      	bne.n	8002cd2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e086      	b.n	8002de0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002cd2:	4b46      	ldr	r3, [pc, #280]	@ (8002dec <HAL_RCC_ClockConfig+0x1f0>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f023 0203 	bic.w	r2, r3, #3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	4943      	ldr	r1, [pc, #268]	@ (8002dec <HAL_RCC_ClockConfig+0x1f0>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ce4:	f7fe ff80 	bl	8001be8 <HAL_GetTick>
 8002ce8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cea:	e00a      	b.n	8002d02 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cec:	f7fe ff7c 	bl	8001be8 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e06e      	b.n	8002de0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d02:	4b3a      	ldr	r3, [pc, #232]	@ (8002dec <HAL_RCC_ClockConfig+0x1f0>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f003 020c 	and.w	r2, r3, #12
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d1eb      	bne.n	8002cec <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0302 	and.w	r3, r3, #2
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d010      	beq.n	8002d42 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689a      	ldr	r2, [r3, #8]
 8002d24:	4b31      	ldr	r3, [pc, #196]	@ (8002dec <HAL_RCC_ClockConfig+0x1f0>)
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d208      	bcs.n	8002d42 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d30:	4b2e      	ldr	r3, [pc, #184]	@ (8002dec <HAL_RCC_ClockConfig+0x1f0>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	492b      	ldr	r1, [pc, #172]	@ (8002dec <HAL_RCC_ClockConfig+0x1f0>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d42:	4b29      	ldr	r3, [pc, #164]	@ (8002de8 <HAL_RCC_ClockConfig+0x1ec>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0307 	and.w	r3, r3, #7
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d210      	bcs.n	8002d72 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d50:	4b25      	ldr	r3, [pc, #148]	@ (8002de8 <HAL_RCC_ClockConfig+0x1ec>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f023 0207 	bic.w	r2, r3, #7
 8002d58:	4923      	ldr	r1, [pc, #140]	@ (8002de8 <HAL_RCC_ClockConfig+0x1ec>)
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d60:	4b21      	ldr	r3, [pc, #132]	@ (8002de8 <HAL_RCC_ClockConfig+0x1ec>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0307 	and.w	r3, r3, #7
 8002d68:	683a      	ldr	r2, [r7, #0]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d001      	beq.n	8002d72 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e036      	b.n	8002de0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0304 	and.w	r3, r3, #4
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d008      	beq.n	8002d90 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d7e:	4b1b      	ldr	r3, [pc, #108]	@ (8002dec <HAL_RCC_ClockConfig+0x1f0>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	4918      	ldr	r1, [pc, #96]	@ (8002dec <HAL_RCC_ClockConfig+0x1f0>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0308 	and.w	r3, r3, #8
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d009      	beq.n	8002db0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d9c:	4b13      	ldr	r3, [pc, #76]	@ (8002dec <HAL_RCC_ClockConfig+0x1f0>)
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	00db      	lsls	r3, r3, #3
 8002daa:	4910      	ldr	r1, [pc, #64]	@ (8002dec <HAL_RCC_ClockConfig+0x1f0>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002db0:	f000 f824 	bl	8002dfc <HAL_RCC_GetSysClockFreq>
 8002db4:	4602      	mov	r2, r0
 8002db6:	4b0d      	ldr	r3, [pc, #52]	@ (8002dec <HAL_RCC_ClockConfig+0x1f0>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	091b      	lsrs	r3, r3, #4
 8002dbc:	f003 030f 	and.w	r3, r3, #15
 8002dc0:	490b      	ldr	r1, [pc, #44]	@ (8002df0 <HAL_RCC_ClockConfig+0x1f4>)
 8002dc2:	5ccb      	ldrb	r3, [r1, r3]
 8002dc4:	f003 031f 	and.w	r3, r3, #31
 8002dc8:	fa22 f303 	lsr.w	r3, r2, r3
 8002dcc:	4a09      	ldr	r2, [pc, #36]	@ (8002df4 <HAL_RCC_ClockConfig+0x1f8>)
 8002dce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002dd0:	4b09      	ldr	r3, [pc, #36]	@ (8002df8 <HAL_RCC_ClockConfig+0x1fc>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7fe feb7 	bl	8001b48 <HAL_InitTick>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	72fb      	strb	r3, [r7, #11]

  return status;
 8002dde:	7afb      	ldrb	r3, [r7, #11]
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3710      	adds	r7, #16
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	40022000 	.word	0x40022000
 8002dec:	40021000 	.word	0x40021000
 8002df0:	0800b3b0 	.word	0x0800b3b0
 8002df4:	20000000 	.word	0x20000000
 8002df8:	20000004 	.word	0x20000004

08002dfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b089      	sub	sp, #36	@ 0x24
 8002e00:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002e02:	2300      	movs	r3, #0
 8002e04:	61fb      	str	r3, [r7, #28]
 8002e06:	2300      	movs	r3, #0
 8002e08:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e0a:	4b3e      	ldr	r3, [pc, #248]	@ (8002f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f003 030c 	and.w	r3, r3, #12
 8002e12:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e14:	4b3b      	ldr	r3, [pc, #236]	@ (8002f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	f003 0303 	and.w	r3, r3, #3
 8002e1c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d005      	beq.n	8002e30 <HAL_RCC_GetSysClockFreq+0x34>
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	2b0c      	cmp	r3, #12
 8002e28:	d121      	bne.n	8002e6e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d11e      	bne.n	8002e6e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e30:	4b34      	ldr	r3, [pc, #208]	@ (8002f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0308 	and.w	r3, r3, #8
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d107      	bne.n	8002e4c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002e3c:	4b31      	ldr	r3, [pc, #196]	@ (8002f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e42:	0a1b      	lsrs	r3, r3, #8
 8002e44:	f003 030f 	and.w	r3, r3, #15
 8002e48:	61fb      	str	r3, [r7, #28]
 8002e4a:	e005      	b.n	8002e58 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002e4c:	4b2d      	ldr	r3, [pc, #180]	@ (8002f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	091b      	lsrs	r3, r3, #4
 8002e52:	f003 030f 	and.w	r3, r3, #15
 8002e56:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002e58:	4a2b      	ldr	r2, [pc, #172]	@ (8002f08 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e60:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d10d      	bne.n	8002e84 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e6c:	e00a      	b.n	8002e84 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	2b04      	cmp	r3, #4
 8002e72:	d102      	bne.n	8002e7a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002e74:	4b25      	ldr	r3, [pc, #148]	@ (8002f0c <HAL_RCC_GetSysClockFreq+0x110>)
 8002e76:	61bb      	str	r3, [r7, #24]
 8002e78:	e004      	b.n	8002e84 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	2b08      	cmp	r3, #8
 8002e7e:	d101      	bne.n	8002e84 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e80:	4b23      	ldr	r3, [pc, #140]	@ (8002f10 <HAL_RCC_GetSysClockFreq+0x114>)
 8002e82:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	2b0c      	cmp	r3, #12
 8002e88:	d134      	bne.n	8002ef4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e8a:	4b1e      	ldr	r3, [pc, #120]	@ (8002f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	f003 0303 	and.w	r3, r3, #3
 8002e92:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d003      	beq.n	8002ea2 <HAL_RCC_GetSysClockFreq+0xa6>
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	2b03      	cmp	r3, #3
 8002e9e:	d003      	beq.n	8002ea8 <HAL_RCC_GetSysClockFreq+0xac>
 8002ea0:	e005      	b.n	8002eae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002ea2:	4b1a      	ldr	r3, [pc, #104]	@ (8002f0c <HAL_RCC_GetSysClockFreq+0x110>)
 8002ea4:	617b      	str	r3, [r7, #20]
      break;
 8002ea6:	e005      	b.n	8002eb4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002ea8:	4b19      	ldr	r3, [pc, #100]	@ (8002f10 <HAL_RCC_GetSysClockFreq+0x114>)
 8002eaa:	617b      	str	r3, [r7, #20]
      break;
 8002eac:	e002      	b.n	8002eb4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	617b      	str	r3, [r7, #20]
      break;
 8002eb2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002eb4:	4b13      	ldr	r3, [pc, #76]	@ (8002f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	091b      	lsrs	r3, r3, #4
 8002eba:	f003 0307 	and.w	r3, r3, #7
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ec2:	4b10      	ldr	r3, [pc, #64]	@ (8002f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	0a1b      	lsrs	r3, r3, #8
 8002ec8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ecc:	697a      	ldr	r2, [r7, #20]
 8002ece:	fb03 f202 	mul.w	r2, r3, r2
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ed8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002eda:	4b0a      	ldr	r3, [pc, #40]	@ (8002f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	0e5b      	lsrs	r3, r3, #25
 8002ee0:	f003 0303 	and.w	r3, r3, #3
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	005b      	lsls	r3, r3, #1
 8002ee8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002eea:	697a      	ldr	r2, [r7, #20]
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ef2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002ef4:	69bb      	ldr	r3, [r7, #24]
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3724      	adds	r7, #36	@ 0x24
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	40021000 	.word	0x40021000
 8002f08:	0800b3c8 	.word	0x0800b3c8
 8002f0c:	00f42400 	.word	0x00f42400
 8002f10:	007a1200 	.word	0x007a1200

08002f14 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f18:	4b03      	ldr	r3, [pc, #12]	@ (8002f28 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	20000000 	.word	0x20000000

08002f2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002f30:	f7ff fff0 	bl	8002f14 <HAL_RCC_GetHCLKFreq>
 8002f34:	4602      	mov	r2, r0
 8002f36:	4b06      	ldr	r3, [pc, #24]	@ (8002f50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	0a1b      	lsrs	r3, r3, #8
 8002f3c:	f003 0307 	and.w	r3, r3, #7
 8002f40:	4904      	ldr	r1, [pc, #16]	@ (8002f54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f42:	5ccb      	ldrb	r3, [r1, r3]
 8002f44:	f003 031f 	and.w	r3, r3, #31
 8002f48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	40021000 	.word	0x40021000
 8002f54:	0800b3c0 	.word	0x0800b3c0

08002f58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002f5c:	f7ff ffda 	bl	8002f14 <HAL_RCC_GetHCLKFreq>
 8002f60:	4602      	mov	r2, r0
 8002f62:	4b06      	ldr	r3, [pc, #24]	@ (8002f7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	0adb      	lsrs	r3, r3, #11
 8002f68:	f003 0307 	and.w	r3, r3, #7
 8002f6c:	4904      	ldr	r1, [pc, #16]	@ (8002f80 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002f6e:	5ccb      	ldrb	r3, [r1, r3]
 8002f70:	f003 031f 	and.w	r3, r3, #31
 8002f74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	40021000 	.word	0x40021000
 8002f80:	0800b3c0 	.word	0x0800b3c0

08002f84 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b086      	sub	sp, #24
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002f90:	4b2a      	ldr	r3, [pc, #168]	@ (800303c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d003      	beq.n	8002fa4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002f9c:	f7ff f9ee 	bl	800237c <HAL_PWREx_GetVoltageRange>
 8002fa0:	6178      	str	r0, [r7, #20]
 8002fa2:	e014      	b.n	8002fce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002fa4:	4b25      	ldr	r3, [pc, #148]	@ (800303c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fa8:	4a24      	ldr	r2, [pc, #144]	@ (800303c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002faa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fae:	6593      	str	r3, [r2, #88]	@ 0x58
 8002fb0:	4b22      	ldr	r3, [pc, #136]	@ (800303c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fb8:	60fb      	str	r3, [r7, #12]
 8002fba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002fbc:	f7ff f9de 	bl	800237c <HAL_PWREx_GetVoltageRange>
 8002fc0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002fc2:	4b1e      	ldr	r3, [pc, #120]	@ (800303c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fc6:	4a1d      	ldr	r2, [pc, #116]	@ (800303c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fc8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fcc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fd4:	d10b      	bne.n	8002fee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2b80      	cmp	r3, #128	@ 0x80
 8002fda:	d919      	bls.n	8003010 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2ba0      	cmp	r3, #160	@ 0xa0
 8002fe0:	d902      	bls.n	8002fe8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002fe2:	2302      	movs	r3, #2
 8002fe4:	613b      	str	r3, [r7, #16]
 8002fe6:	e013      	b.n	8003010 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002fe8:	2301      	movs	r3, #1
 8002fea:	613b      	str	r3, [r7, #16]
 8002fec:	e010      	b.n	8003010 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2b80      	cmp	r3, #128	@ 0x80
 8002ff2:	d902      	bls.n	8002ffa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	613b      	str	r3, [r7, #16]
 8002ff8:	e00a      	b.n	8003010 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2b80      	cmp	r3, #128	@ 0x80
 8002ffe:	d102      	bne.n	8003006 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003000:	2302      	movs	r3, #2
 8003002:	613b      	str	r3, [r7, #16]
 8003004:	e004      	b.n	8003010 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2b70      	cmp	r3, #112	@ 0x70
 800300a:	d101      	bne.n	8003010 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800300c:	2301      	movs	r3, #1
 800300e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003010:	4b0b      	ldr	r3, [pc, #44]	@ (8003040 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f023 0207 	bic.w	r2, r3, #7
 8003018:	4909      	ldr	r1, [pc, #36]	@ (8003040 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	4313      	orrs	r3, r2
 800301e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003020:	4b07      	ldr	r3, [pc, #28]	@ (8003040 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0307 	and.w	r3, r3, #7
 8003028:	693a      	ldr	r2, [r7, #16]
 800302a:	429a      	cmp	r2, r3
 800302c:	d001      	beq.n	8003032 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e000      	b.n	8003034 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	3718      	adds	r7, #24
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	40021000 	.word	0x40021000
 8003040:	40022000 	.word	0x40022000

08003044 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b086      	sub	sp, #24
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800304c:	2300      	movs	r3, #0
 800304e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003050:	2300      	movs	r3, #0
 8003052:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800305c:	2b00      	cmp	r3, #0
 800305e:	d041      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003064:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003068:	d02a      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800306a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800306e:	d824      	bhi.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003070:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003074:	d008      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003076:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800307a:	d81e      	bhi.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x76>
 800307c:	2b00      	cmp	r3, #0
 800307e:	d00a      	beq.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003080:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003084:	d010      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003086:	e018      	b.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003088:	4b86      	ldr	r3, [pc, #536]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	4a85      	ldr	r2, [pc, #532]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800308e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003092:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003094:	e015      	b.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	3304      	adds	r3, #4
 800309a:	2100      	movs	r1, #0
 800309c:	4618      	mov	r0, r3
 800309e:	f000 fabb 	bl	8003618 <RCCEx_PLLSAI1_Config>
 80030a2:	4603      	mov	r3, r0
 80030a4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030a6:	e00c      	b.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	3320      	adds	r3, #32
 80030ac:	2100      	movs	r1, #0
 80030ae:	4618      	mov	r0, r3
 80030b0:	f000 fba6 	bl	8003800 <RCCEx_PLLSAI2_Config>
 80030b4:	4603      	mov	r3, r0
 80030b6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030b8:	e003      	b.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	74fb      	strb	r3, [r7, #19]
      break;
 80030be:	e000      	b.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80030c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030c2:	7cfb      	ldrb	r3, [r7, #19]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d10b      	bne.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80030c8:	4b76      	ldr	r3, [pc, #472]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030ce:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80030d6:	4973      	ldr	r1, [pc, #460]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80030de:	e001      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030e0:	7cfb      	ldrb	r3, [r7, #19]
 80030e2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d041      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80030f4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80030f8:	d02a      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80030fa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80030fe:	d824      	bhi.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003100:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003104:	d008      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003106:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800310a:	d81e      	bhi.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800310c:	2b00      	cmp	r3, #0
 800310e:	d00a      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003110:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003114:	d010      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003116:	e018      	b.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003118:	4b62      	ldr	r3, [pc, #392]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	4a61      	ldr	r2, [pc, #388]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800311e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003122:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003124:	e015      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	3304      	adds	r3, #4
 800312a:	2100      	movs	r1, #0
 800312c:	4618      	mov	r0, r3
 800312e:	f000 fa73 	bl	8003618 <RCCEx_PLLSAI1_Config>
 8003132:	4603      	mov	r3, r0
 8003134:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003136:	e00c      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	3320      	adds	r3, #32
 800313c:	2100      	movs	r1, #0
 800313e:	4618      	mov	r0, r3
 8003140:	f000 fb5e 	bl	8003800 <RCCEx_PLLSAI2_Config>
 8003144:	4603      	mov	r3, r0
 8003146:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003148:	e003      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	74fb      	strb	r3, [r7, #19]
      break;
 800314e:	e000      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003150:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003152:	7cfb      	ldrb	r3, [r7, #19]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d10b      	bne.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003158:	4b52      	ldr	r3, [pc, #328]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800315a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800315e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003166:	494f      	ldr	r1, [pc, #316]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003168:	4313      	orrs	r3, r2
 800316a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800316e:	e001      	b.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003170:	7cfb      	ldrb	r3, [r7, #19]
 8003172:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800317c:	2b00      	cmp	r3, #0
 800317e:	f000 80a0 	beq.w	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003182:	2300      	movs	r3, #0
 8003184:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003186:	4b47      	ldr	r3, [pc, #284]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800318a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003192:	2301      	movs	r3, #1
 8003194:	e000      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003196:	2300      	movs	r3, #0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d00d      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800319c:	4b41      	ldr	r3, [pc, #260]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800319e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031a0:	4a40      	ldr	r2, [pc, #256]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80031a8:	4b3e      	ldr	r3, [pc, #248]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031b0:	60bb      	str	r3, [r7, #8]
 80031b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031b4:	2301      	movs	r3, #1
 80031b6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031b8:	4b3b      	ldr	r3, [pc, #236]	@ (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a3a      	ldr	r2, [pc, #232]	@ (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80031be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80031c4:	f7fe fd10 	bl	8001be8 <HAL_GetTick>
 80031c8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80031ca:	e009      	b.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031cc:	f7fe fd0c 	bl	8001be8 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d902      	bls.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	74fb      	strb	r3, [r7, #19]
        break;
 80031de:	e005      	b.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80031e0:	4b31      	ldr	r3, [pc, #196]	@ (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d0ef      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80031ec:	7cfb      	ldrb	r3, [r7, #19]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d15c      	bne.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80031f2:	4b2c      	ldr	r3, [pc, #176]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031fc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d01f      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800320a:	697a      	ldr	r2, [r7, #20]
 800320c:	429a      	cmp	r2, r3
 800320e:	d019      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003210:	4b24      	ldr	r3, [pc, #144]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003212:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003216:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800321a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800321c:	4b21      	ldr	r3, [pc, #132]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800321e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003222:	4a20      	ldr	r2, [pc, #128]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003224:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003228:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800322c:	4b1d      	ldr	r3, [pc, #116]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800322e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003232:	4a1c      	ldr	r2, [pc, #112]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003234:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003238:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800323c:	4a19      	ldr	r2, [pc, #100]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	2b00      	cmp	r3, #0
 800324c:	d016      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800324e:	f7fe fccb 	bl	8001be8 <HAL_GetTick>
 8003252:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003254:	e00b      	b.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003256:	f7fe fcc7 	bl	8001be8 <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003264:	4293      	cmp	r3, r2
 8003266:	d902      	bls.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	74fb      	strb	r3, [r7, #19]
            break;
 800326c:	e006      	b.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800326e:	4b0d      	ldr	r3, [pc, #52]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003270:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d0ec      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800327c:	7cfb      	ldrb	r3, [r7, #19]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d10c      	bne.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003282:	4b08      	ldr	r3, [pc, #32]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003284:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003288:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003292:	4904      	ldr	r1, [pc, #16]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003294:	4313      	orrs	r3, r2
 8003296:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800329a:	e009      	b.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800329c:	7cfb      	ldrb	r3, [r7, #19]
 800329e:	74bb      	strb	r3, [r7, #18]
 80032a0:	e006      	b.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80032a2:	bf00      	nop
 80032a4:	40021000 	.word	0x40021000
 80032a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032ac:	7cfb      	ldrb	r3, [r7, #19]
 80032ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032b0:	7c7b      	ldrb	r3, [r7, #17]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d105      	bne.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032b6:	4b9e      	ldr	r3, [pc, #632]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ba:	4a9d      	ldr	r2, [pc, #628]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032c0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00a      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032ce:	4b98      	ldr	r3, [pc, #608]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032d4:	f023 0203 	bic.w	r2, r3, #3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032dc:	4994      	ldr	r1, [pc, #592]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0302 	and.w	r3, r3, #2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d00a      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80032f0:	4b8f      	ldr	r3, [pc, #572]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032f6:	f023 020c 	bic.w	r2, r3, #12
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032fe:	498c      	ldr	r1, [pc, #560]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003300:	4313      	orrs	r3, r2
 8003302:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0304 	and.w	r3, r3, #4
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00a      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003312:	4b87      	ldr	r3, [pc, #540]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003314:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003318:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003320:	4983      	ldr	r1, [pc, #524]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003322:	4313      	orrs	r3, r2
 8003324:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0308 	and.w	r3, r3, #8
 8003330:	2b00      	cmp	r3, #0
 8003332:	d00a      	beq.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003334:	4b7e      	ldr	r3, [pc, #504]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003336:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800333a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003342:	497b      	ldr	r1, [pc, #492]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003344:	4313      	orrs	r3, r2
 8003346:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0310 	and.w	r3, r3, #16
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00a      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003356:	4b76      	ldr	r3, [pc, #472]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003358:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800335c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003364:	4972      	ldr	r1, [pc, #456]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003366:	4313      	orrs	r3, r2
 8003368:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0320 	and.w	r3, r3, #32
 8003374:	2b00      	cmp	r3, #0
 8003376:	d00a      	beq.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003378:	4b6d      	ldr	r3, [pc, #436]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800337a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800337e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003386:	496a      	ldr	r1, [pc, #424]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003388:	4313      	orrs	r3, r2
 800338a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00a      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800339a:	4b65      	ldr	r3, [pc, #404]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800339c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033a0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033a8:	4961      	ldr	r1, [pc, #388]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00a      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80033bc:	4b5c      	ldr	r3, [pc, #368]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033c2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033ca:	4959      	ldr	r1, [pc, #356]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00a      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033de:	4b54      	ldr	r3, [pc, #336]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033e4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033ec:	4950      	ldr	r1, [pc, #320]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00a      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003400:	4b4b      	ldr	r3, [pc, #300]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003402:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003406:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800340e:	4948      	ldr	r1, [pc, #288]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003410:	4313      	orrs	r3, r2
 8003412:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00a      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003422:	4b43      	ldr	r3, [pc, #268]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003424:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003428:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003430:	493f      	ldr	r1, [pc, #252]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003432:	4313      	orrs	r3, r2
 8003434:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d028      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003444:	4b3a      	ldr	r3, [pc, #232]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003446:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800344a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003452:	4937      	ldr	r1, [pc, #220]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003454:	4313      	orrs	r3, r2
 8003456:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800345e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003462:	d106      	bne.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003464:	4b32      	ldr	r3, [pc, #200]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	4a31      	ldr	r2, [pc, #196]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800346a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800346e:	60d3      	str	r3, [r2, #12]
 8003470:	e011      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003476:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800347a:	d10c      	bne.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	3304      	adds	r3, #4
 8003480:	2101      	movs	r1, #1
 8003482:	4618      	mov	r0, r3
 8003484:	f000 f8c8 	bl	8003618 <RCCEx_PLLSAI1_Config>
 8003488:	4603      	mov	r3, r0
 800348a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800348c:	7cfb      	ldrb	r3, [r7, #19]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d001      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003492:	7cfb      	ldrb	r3, [r7, #19]
 8003494:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d028      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80034a2:	4b23      	ldr	r3, [pc, #140]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034a8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034b0:	491f      	ldr	r1, [pc, #124]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80034c0:	d106      	bne.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034c2:	4b1b      	ldr	r3, [pc, #108]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	4a1a      	ldr	r2, [pc, #104]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80034cc:	60d3      	str	r3, [r2, #12]
 80034ce:	e011      	b.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034d4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80034d8:	d10c      	bne.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	3304      	adds	r3, #4
 80034de:	2101      	movs	r1, #1
 80034e0:	4618      	mov	r0, r3
 80034e2:	f000 f899 	bl	8003618 <RCCEx_PLLSAI1_Config>
 80034e6:	4603      	mov	r3, r0
 80034e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034ea:	7cfb      	ldrb	r3, [r7, #19]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d001      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80034f0:	7cfb      	ldrb	r3, [r7, #19]
 80034f2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d02b      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003500:	4b0b      	ldr	r3, [pc, #44]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003502:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003506:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800350e:	4908      	ldr	r1, [pc, #32]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003510:	4313      	orrs	r3, r2
 8003512:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800351a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800351e:	d109      	bne.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003520:	4b03      	ldr	r3, [pc, #12]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	4a02      	ldr	r2, [pc, #8]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003526:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800352a:	60d3      	str	r3, [r2, #12]
 800352c:	e014      	b.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800352e:	bf00      	nop
 8003530:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003538:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800353c:	d10c      	bne.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	3304      	adds	r3, #4
 8003542:	2101      	movs	r1, #1
 8003544:	4618      	mov	r0, r3
 8003546:	f000 f867 	bl	8003618 <RCCEx_PLLSAI1_Config>
 800354a:	4603      	mov	r3, r0
 800354c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800354e:	7cfb      	ldrb	r3, [r7, #19]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d001      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003554:	7cfb      	ldrb	r3, [r7, #19]
 8003556:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d02f      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003564:	4b2b      	ldr	r3, [pc, #172]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003566:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800356a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003572:	4928      	ldr	r1, [pc, #160]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003574:	4313      	orrs	r3, r2
 8003576:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800357e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003582:	d10d      	bne.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	3304      	adds	r3, #4
 8003588:	2102      	movs	r1, #2
 800358a:	4618      	mov	r0, r3
 800358c:	f000 f844 	bl	8003618 <RCCEx_PLLSAI1_Config>
 8003590:	4603      	mov	r3, r0
 8003592:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003594:	7cfb      	ldrb	r3, [r7, #19]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d014      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800359a:	7cfb      	ldrb	r3, [r7, #19]
 800359c:	74bb      	strb	r3, [r7, #18]
 800359e:	e011      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80035a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80035a8:	d10c      	bne.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	3320      	adds	r3, #32
 80035ae:	2102      	movs	r1, #2
 80035b0:	4618      	mov	r0, r3
 80035b2:	f000 f925 	bl	8003800 <RCCEx_PLLSAI2_Config>
 80035b6:	4603      	mov	r3, r0
 80035b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035ba:	7cfb      	ldrb	r3, [r7, #19]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d001      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80035c0:	7cfb      	ldrb	r3, [r7, #19]
 80035c2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00a      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80035d0:	4b10      	ldr	r3, [pc, #64]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035d6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80035de:	490d      	ldr	r1, [pc, #52]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035e0:	4313      	orrs	r3, r2
 80035e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00b      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80035f2:	4b08      	ldr	r3, [pc, #32]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035f8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003602:	4904      	ldr	r1, [pc, #16]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003604:	4313      	orrs	r3, r2
 8003606:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800360a:	7cbb      	ldrb	r3, [r7, #18]
}
 800360c:	4618      	mov	r0, r3
 800360e:	3718      	adds	r7, #24
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	40021000 	.word	0x40021000

08003618 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003622:	2300      	movs	r3, #0
 8003624:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003626:	4b75      	ldr	r3, [pc, #468]	@ (80037fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	f003 0303 	and.w	r3, r3, #3
 800362e:	2b00      	cmp	r3, #0
 8003630:	d018      	beq.n	8003664 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003632:	4b72      	ldr	r3, [pc, #456]	@ (80037fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	f003 0203 	and.w	r2, r3, #3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	429a      	cmp	r2, r3
 8003640:	d10d      	bne.n	800365e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
       ||
 8003646:	2b00      	cmp	r3, #0
 8003648:	d009      	beq.n	800365e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800364a:	4b6c      	ldr	r3, [pc, #432]	@ (80037fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	091b      	lsrs	r3, r3, #4
 8003650:	f003 0307 	and.w	r3, r3, #7
 8003654:	1c5a      	adds	r2, r3, #1
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
       ||
 800365a:	429a      	cmp	r2, r3
 800365c:	d047      	beq.n	80036ee <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	73fb      	strb	r3, [r7, #15]
 8003662:	e044      	b.n	80036ee <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2b03      	cmp	r3, #3
 800366a:	d018      	beq.n	800369e <RCCEx_PLLSAI1_Config+0x86>
 800366c:	2b03      	cmp	r3, #3
 800366e:	d825      	bhi.n	80036bc <RCCEx_PLLSAI1_Config+0xa4>
 8003670:	2b01      	cmp	r3, #1
 8003672:	d002      	beq.n	800367a <RCCEx_PLLSAI1_Config+0x62>
 8003674:	2b02      	cmp	r3, #2
 8003676:	d009      	beq.n	800368c <RCCEx_PLLSAI1_Config+0x74>
 8003678:	e020      	b.n	80036bc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800367a:	4b60      	ldr	r3, [pc, #384]	@ (80037fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0302 	and.w	r3, r3, #2
 8003682:	2b00      	cmp	r3, #0
 8003684:	d11d      	bne.n	80036c2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800368a:	e01a      	b.n	80036c2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800368c:	4b5b      	ldr	r3, [pc, #364]	@ (80037fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003694:	2b00      	cmp	r3, #0
 8003696:	d116      	bne.n	80036c6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800369c:	e013      	b.n	80036c6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800369e:	4b57      	ldr	r3, [pc, #348]	@ (80037fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d10f      	bne.n	80036ca <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80036aa:	4b54      	ldr	r3, [pc, #336]	@ (80037fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d109      	bne.n	80036ca <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80036ba:	e006      	b.n	80036ca <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	73fb      	strb	r3, [r7, #15]
      break;
 80036c0:	e004      	b.n	80036cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80036c2:	bf00      	nop
 80036c4:	e002      	b.n	80036cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80036c6:	bf00      	nop
 80036c8:	e000      	b.n	80036cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80036ca:	bf00      	nop
    }

    if(status == HAL_OK)
 80036cc:	7bfb      	ldrb	r3, [r7, #15]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d10d      	bne.n	80036ee <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80036d2:	4b4a      	ldr	r3, [pc, #296]	@ (80037fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6819      	ldr	r1, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	3b01      	subs	r3, #1
 80036e4:	011b      	lsls	r3, r3, #4
 80036e6:	430b      	orrs	r3, r1
 80036e8:	4944      	ldr	r1, [pc, #272]	@ (80037fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80036ee:	7bfb      	ldrb	r3, [r7, #15]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d17d      	bne.n	80037f0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80036f4:	4b41      	ldr	r3, [pc, #260]	@ (80037fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a40      	ldr	r2, [pc, #256]	@ (80037fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80036fa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80036fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003700:	f7fe fa72 	bl	8001be8 <HAL_GetTick>
 8003704:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003706:	e009      	b.n	800371c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003708:	f7fe fa6e 	bl	8001be8 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b02      	cmp	r3, #2
 8003714:	d902      	bls.n	800371c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	73fb      	strb	r3, [r7, #15]
        break;
 800371a:	e005      	b.n	8003728 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800371c:	4b37      	ldr	r3, [pc, #220]	@ (80037fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d1ef      	bne.n	8003708 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003728:	7bfb      	ldrb	r3, [r7, #15]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d160      	bne.n	80037f0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d111      	bne.n	8003758 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003734:	4b31      	ldr	r3, [pc, #196]	@ (80037fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800373c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	6892      	ldr	r2, [r2, #8]
 8003744:	0211      	lsls	r1, r2, #8
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	68d2      	ldr	r2, [r2, #12]
 800374a:	0912      	lsrs	r2, r2, #4
 800374c:	0452      	lsls	r2, r2, #17
 800374e:	430a      	orrs	r2, r1
 8003750:	492a      	ldr	r1, [pc, #168]	@ (80037fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003752:	4313      	orrs	r3, r2
 8003754:	610b      	str	r3, [r1, #16]
 8003756:	e027      	b.n	80037a8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	2b01      	cmp	r3, #1
 800375c:	d112      	bne.n	8003784 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800375e:	4b27      	ldr	r3, [pc, #156]	@ (80037fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003766:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	6892      	ldr	r2, [r2, #8]
 800376e:	0211      	lsls	r1, r2, #8
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	6912      	ldr	r2, [r2, #16]
 8003774:	0852      	lsrs	r2, r2, #1
 8003776:	3a01      	subs	r2, #1
 8003778:	0552      	lsls	r2, r2, #21
 800377a:	430a      	orrs	r2, r1
 800377c:	491f      	ldr	r1, [pc, #124]	@ (80037fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800377e:	4313      	orrs	r3, r2
 8003780:	610b      	str	r3, [r1, #16]
 8003782:	e011      	b.n	80037a8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003784:	4b1d      	ldr	r3, [pc, #116]	@ (80037fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003786:	691b      	ldr	r3, [r3, #16]
 8003788:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800378c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	6892      	ldr	r2, [r2, #8]
 8003794:	0211      	lsls	r1, r2, #8
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	6952      	ldr	r2, [r2, #20]
 800379a:	0852      	lsrs	r2, r2, #1
 800379c:	3a01      	subs	r2, #1
 800379e:	0652      	lsls	r2, r2, #25
 80037a0:	430a      	orrs	r2, r1
 80037a2:	4916      	ldr	r1, [pc, #88]	@ (80037fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80037a8:	4b14      	ldr	r3, [pc, #80]	@ (80037fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a13      	ldr	r2, [pc, #76]	@ (80037fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80037ae:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80037b2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037b4:	f7fe fa18 	bl	8001be8 <HAL_GetTick>
 80037b8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80037ba:	e009      	b.n	80037d0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037bc:	f7fe fa14 	bl	8001be8 <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d902      	bls.n	80037d0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	73fb      	strb	r3, [r7, #15]
          break;
 80037ce:	e005      	b.n	80037dc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80037d0:	4b0a      	ldr	r3, [pc, #40]	@ (80037fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d0ef      	beq.n	80037bc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80037dc:	7bfb      	ldrb	r3, [r7, #15]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d106      	bne.n	80037f0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80037e2:	4b06      	ldr	r3, [pc, #24]	@ (80037fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80037e4:	691a      	ldr	r2, [r3, #16]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	4904      	ldr	r1, [pc, #16]	@ (80037fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80037f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3710      	adds	r7, #16
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	40021000 	.word	0x40021000

08003800 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800380a:	2300      	movs	r3, #0
 800380c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800380e:	4b6a      	ldr	r3, [pc, #424]	@ (80039b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	f003 0303 	and.w	r3, r3, #3
 8003816:	2b00      	cmp	r3, #0
 8003818:	d018      	beq.n	800384c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800381a:	4b67      	ldr	r3, [pc, #412]	@ (80039b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	f003 0203 	and.w	r2, r3, #3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	429a      	cmp	r2, r3
 8003828:	d10d      	bne.n	8003846 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
       ||
 800382e:	2b00      	cmp	r3, #0
 8003830:	d009      	beq.n	8003846 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003832:	4b61      	ldr	r3, [pc, #388]	@ (80039b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	091b      	lsrs	r3, r3, #4
 8003838:	f003 0307 	and.w	r3, r3, #7
 800383c:	1c5a      	adds	r2, r3, #1
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
       ||
 8003842:	429a      	cmp	r2, r3
 8003844:	d047      	beq.n	80038d6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	73fb      	strb	r3, [r7, #15]
 800384a:	e044      	b.n	80038d6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2b03      	cmp	r3, #3
 8003852:	d018      	beq.n	8003886 <RCCEx_PLLSAI2_Config+0x86>
 8003854:	2b03      	cmp	r3, #3
 8003856:	d825      	bhi.n	80038a4 <RCCEx_PLLSAI2_Config+0xa4>
 8003858:	2b01      	cmp	r3, #1
 800385a:	d002      	beq.n	8003862 <RCCEx_PLLSAI2_Config+0x62>
 800385c:	2b02      	cmp	r3, #2
 800385e:	d009      	beq.n	8003874 <RCCEx_PLLSAI2_Config+0x74>
 8003860:	e020      	b.n	80038a4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003862:	4b55      	ldr	r3, [pc, #340]	@ (80039b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d11d      	bne.n	80038aa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003872:	e01a      	b.n	80038aa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003874:	4b50      	ldr	r3, [pc, #320]	@ (80039b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800387c:	2b00      	cmp	r3, #0
 800387e:	d116      	bne.n	80038ae <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003884:	e013      	b.n	80038ae <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003886:	4b4c      	ldr	r3, [pc, #304]	@ (80039b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d10f      	bne.n	80038b2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003892:	4b49      	ldr	r3, [pc, #292]	@ (80039b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d109      	bne.n	80038b2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80038a2:	e006      	b.n	80038b2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	73fb      	strb	r3, [r7, #15]
      break;
 80038a8:	e004      	b.n	80038b4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80038aa:	bf00      	nop
 80038ac:	e002      	b.n	80038b4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80038ae:	bf00      	nop
 80038b0:	e000      	b.n	80038b4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80038b2:	bf00      	nop
    }

    if(status == HAL_OK)
 80038b4:	7bfb      	ldrb	r3, [r7, #15]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d10d      	bne.n	80038d6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80038ba:	4b3f      	ldr	r3, [pc, #252]	@ (80039b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6819      	ldr	r1, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	3b01      	subs	r3, #1
 80038cc:	011b      	lsls	r3, r3, #4
 80038ce:	430b      	orrs	r3, r1
 80038d0:	4939      	ldr	r1, [pc, #228]	@ (80039b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80038d6:	7bfb      	ldrb	r3, [r7, #15]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d167      	bne.n	80039ac <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80038dc:	4b36      	ldr	r3, [pc, #216]	@ (80039b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a35      	ldr	r2, [pc, #212]	@ (80039b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038e8:	f7fe f97e 	bl	8001be8 <HAL_GetTick>
 80038ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80038ee:	e009      	b.n	8003904 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80038f0:	f7fe f97a 	bl	8001be8 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d902      	bls.n	8003904 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	73fb      	strb	r3, [r7, #15]
        break;
 8003902:	e005      	b.n	8003910 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003904:	4b2c      	ldr	r3, [pc, #176]	@ (80039b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d1ef      	bne.n	80038f0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003910:	7bfb      	ldrb	r3, [r7, #15]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d14a      	bne.n	80039ac <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d111      	bne.n	8003940 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800391c:	4b26      	ldr	r3, [pc, #152]	@ (80039b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800391e:	695b      	ldr	r3, [r3, #20]
 8003920:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003924:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	6892      	ldr	r2, [r2, #8]
 800392c:	0211      	lsls	r1, r2, #8
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	68d2      	ldr	r2, [r2, #12]
 8003932:	0912      	lsrs	r2, r2, #4
 8003934:	0452      	lsls	r2, r2, #17
 8003936:	430a      	orrs	r2, r1
 8003938:	491f      	ldr	r1, [pc, #124]	@ (80039b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800393a:	4313      	orrs	r3, r2
 800393c:	614b      	str	r3, [r1, #20]
 800393e:	e011      	b.n	8003964 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003940:	4b1d      	ldr	r3, [pc, #116]	@ (80039b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003942:	695b      	ldr	r3, [r3, #20]
 8003944:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003948:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	6892      	ldr	r2, [r2, #8]
 8003950:	0211      	lsls	r1, r2, #8
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	6912      	ldr	r2, [r2, #16]
 8003956:	0852      	lsrs	r2, r2, #1
 8003958:	3a01      	subs	r2, #1
 800395a:	0652      	lsls	r2, r2, #25
 800395c:	430a      	orrs	r2, r1
 800395e:	4916      	ldr	r1, [pc, #88]	@ (80039b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003960:	4313      	orrs	r3, r2
 8003962:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003964:	4b14      	ldr	r3, [pc, #80]	@ (80039b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a13      	ldr	r2, [pc, #76]	@ (80039b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800396a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800396e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003970:	f7fe f93a 	bl	8001be8 <HAL_GetTick>
 8003974:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003976:	e009      	b.n	800398c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003978:	f7fe f936 	bl	8001be8 <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	2b02      	cmp	r3, #2
 8003984:	d902      	bls.n	800398c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	73fb      	strb	r3, [r7, #15]
          break;
 800398a:	e005      	b.n	8003998 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800398c:	4b0a      	ldr	r3, [pc, #40]	@ (80039b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d0ef      	beq.n	8003978 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003998:	7bfb      	ldrb	r3, [r7, #15]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d106      	bne.n	80039ac <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800399e:	4b06      	ldr	r3, [pc, #24]	@ (80039b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039a0:	695a      	ldr	r2, [r3, #20]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	695b      	ldr	r3, [r3, #20]
 80039a6:	4904      	ldr	r1, [pc, #16]	@ (80039b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039a8:	4313      	orrs	r3, r2
 80039aa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80039ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3710      	adds	r7, #16
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	40021000 	.word	0x40021000

080039bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d101      	bne.n	80039ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e095      	b.n	8003afa <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d108      	bne.n	80039e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80039de:	d009      	beq.n	80039f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	61da      	str	r2, [r3, #28]
 80039e6:	e005      	b.n	80039f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d106      	bne.n	8003a14 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f7fd ff2a 	bl	8001868 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2202      	movs	r2, #2
 8003a18:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a2a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003a34:	d902      	bls.n	8003a3c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003a36:	2300      	movs	r3, #0
 8003a38:	60fb      	str	r3, [r7, #12]
 8003a3a:	e002      	b.n	8003a42 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003a3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a40:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003a4a:	d007      	beq.n	8003a5c <HAL_SPI_Init+0xa0>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003a54:	d002      	beq.n	8003a5c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003a6c:	431a      	orrs	r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	431a      	orrs	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	695b      	ldr	r3, [r3, #20]
 8003a7c:	f003 0301 	and.w	r3, r3, #1
 8003a80:	431a      	orrs	r2, r3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a8a:	431a      	orrs	r2, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	69db      	ldr	r3, [r3, #28]
 8003a90:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003a94:	431a      	orrs	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a1b      	ldr	r3, [r3, #32]
 8003a9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a9e:	ea42 0103 	orr.w	r1, r2, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aa6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	699b      	ldr	r3, [r3, #24]
 8003ab6:	0c1b      	lsrs	r3, r3, #16
 8003ab8:	f003 0204 	and.w	r2, r3, #4
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac0:	f003 0310 	and.w	r3, r3, #16
 8003ac4:	431a      	orrs	r2, r3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003aca:	f003 0308 	and.w	r3, r3, #8
 8003ace:	431a      	orrs	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003ad8:	ea42 0103 	orr.w	r1, r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3710      	adds	r7, #16
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}

08003b02 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b02:	b580      	push	{r7, lr}
 8003b04:	b088      	sub	sp, #32
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	60f8      	str	r0, [r7, #12]
 8003b0a:	60b9      	str	r1, [r7, #8]
 8003b0c:	603b      	str	r3, [r7, #0]
 8003b0e:	4613      	mov	r3, r2
 8003b10:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b12:	f7fe f869 	bl	8001be8 <HAL_GetTick>
 8003b16:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003b18:	88fb      	ldrh	r3, [r7, #6]
 8003b1a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d001      	beq.n	8003b2c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003b28:	2302      	movs	r3, #2
 8003b2a:	e15c      	b.n	8003de6 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d002      	beq.n	8003b38 <HAL_SPI_Transmit+0x36>
 8003b32:	88fb      	ldrh	r3, [r7, #6]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d101      	bne.n	8003b3c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e154      	b.n	8003de6 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d101      	bne.n	8003b4a <HAL_SPI_Transmit+0x48>
 8003b46:	2302      	movs	r3, #2
 8003b48:	e14d      	b.n	8003de6 <HAL_SPI_Transmit+0x2e4>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2203      	movs	r2, #3
 8003b56:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	68ba      	ldr	r2, [r7, #8]
 8003b64:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	88fa      	ldrh	r2, [r7, #6]
 8003b6a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	88fa      	ldrh	r2, [r7, #6]
 8003b70:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2200      	movs	r2, #0
 8003b92:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b9c:	d10f      	bne.n	8003bbe <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003bac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003bbc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bc8:	2b40      	cmp	r3, #64	@ 0x40
 8003bca:	d007      	beq.n	8003bdc <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003bda:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003be4:	d952      	bls.n	8003c8c <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d002      	beq.n	8003bf4 <HAL_SPI_Transmit+0xf2>
 8003bee:	8b7b      	ldrh	r3, [r7, #26]
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d145      	bne.n	8003c80 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bf8:	881a      	ldrh	r2, [r3, #0]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c04:	1c9a      	adds	r2, r3, #2
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	3b01      	subs	r3, #1
 8003c12:	b29a      	uxth	r2, r3
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003c18:	e032      	b.n	8003c80 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	f003 0302 	and.w	r3, r3, #2
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d112      	bne.n	8003c4e <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c2c:	881a      	ldrh	r2, [r3, #0]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c38:	1c9a      	adds	r2, r3, #2
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	3b01      	subs	r3, #1
 8003c46:	b29a      	uxth	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003c4c:	e018      	b.n	8003c80 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c4e:	f7fd ffcb 	bl	8001be8 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	683a      	ldr	r2, [r7, #0]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d803      	bhi.n	8003c66 <HAL_SPI_Transmit+0x164>
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c64:	d102      	bne.n	8003c6c <HAL_SPI_Transmit+0x16a>
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d109      	bne.n	8003c80 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e0b2      	b.n	8003de6 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d1c7      	bne.n	8003c1a <HAL_SPI_Transmit+0x118>
 8003c8a:	e083      	b.n	8003d94 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d002      	beq.n	8003c9a <HAL_SPI_Transmit+0x198>
 8003c94:	8b7b      	ldrh	r3, [r7, #26]
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d177      	bne.n	8003d8a <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d912      	bls.n	8003cca <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ca8:	881a      	ldrh	r2, [r3, #0]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cb4:	1c9a      	adds	r2, r3, #2
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	3b02      	subs	r3, #2
 8003cc2:	b29a      	uxth	r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003cc8:	e05f      	b.n	8003d8a <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	330c      	adds	r3, #12
 8003cd4:	7812      	ldrb	r2, [r2, #0]
 8003cd6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cdc:	1c5a      	adds	r2, r3, #1
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	3b01      	subs	r3, #1
 8003cea:	b29a      	uxth	r2, r3
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003cf0:	e04b      	b.n	8003d8a <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	f003 0302 	and.w	r3, r3, #2
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d12b      	bne.n	8003d58 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d912      	bls.n	8003d30 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d0e:	881a      	ldrh	r2, [r3, #0]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d1a:	1c9a      	adds	r2, r3, #2
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	3b02      	subs	r3, #2
 8003d28:	b29a      	uxth	r2, r3
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003d2e:	e02c      	b.n	8003d8a <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	330c      	adds	r3, #12
 8003d3a:	7812      	ldrb	r2, [r2, #0]
 8003d3c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d42:	1c5a      	adds	r2, r3, #1
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	b29a      	uxth	r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003d56:	e018      	b.n	8003d8a <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d58:	f7fd ff46 	bl	8001be8 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	683a      	ldr	r2, [r7, #0]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d803      	bhi.n	8003d70 <HAL_SPI_Transmit+0x26e>
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d6e:	d102      	bne.n	8003d76 <HAL_SPI_Transmit+0x274>
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d109      	bne.n	8003d8a <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2201      	movs	r2, #1
 8003d7a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e02d      	b.n	8003de6 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d1ae      	bne.n	8003cf2 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d94:	69fa      	ldr	r2, [r7, #28]
 8003d96:	6839      	ldr	r1, [r7, #0]
 8003d98:	68f8      	ldr	r0, [r7, #12]
 8003d9a:	f000 fcf5 	bl	8004788 <SPI_EndRxTxTransaction>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d002      	beq.n	8003daa <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2220      	movs	r2, #32
 8003da8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d10a      	bne.n	8003dc8 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003db2:	2300      	movs	r3, #0
 8003db4:	617b      	str	r3, [r7, #20]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	617b      	str	r3, [r7, #20]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	617b      	str	r3, [r7, #20]
 8003dc6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d001      	beq.n	8003de4 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e000      	b.n	8003de6 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8003de4:	2300      	movs	r3, #0
  }
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3720      	adds	r7, #32
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b088      	sub	sp, #32
 8003df2:	af02      	add	r7, sp, #8
 8003df4:	60f8      	str	r0, [r7, #12]
 8003df6:	60b9      	str	r1, [r7, #8]
 8003df8:	603b      	str	r3, [r7, #0]
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d001      	beq.n	8003e0e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	e123      	b.n	8004056 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e16:	d112      	bne.n	8003e3e <HAL_SPI_Receive+0x50>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d10e      	bne.n	8003e3e <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2204      	movs	r2, #4
 8003e24:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003e28:	88fa      	ldrh	r2, [r7, #6]
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	9300      	str	r3, [sp, #0]
 8003e2e:	4613      	mov	r3, r2
 8003e30:	68ba      	ldr	r2, [r7, #8]
 8003e32:	68b9      	ldr	r1, [r7, #8]
 8003e34:	68f8      	ldr	r0, [r7, #12]
 8003e36:	f000 f912 	bl	800405e <HAL_SPI_TransmitReceive>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	e10b      	b.n	8004056 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e3e:	f7fd fed3 	bl	8001be8 <HAL_GetTick>
 8003e42:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d002      	beq.n	8003e50 <HAL_SPI_Receive+0x62>
 8003e4a:	88fb      	ldrh	r3, [r7, #6]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d101      	bne.n	8003e54 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e100      	b.n	8004056 <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d101      	bne.n	8003e62 <HAL_SPI_Receive+0x74>
 8003e5e:	2302      	movs	r3, #2
 8003e60:	e0f9      	b.n	8004056 <HAL_SPI_Receive+0x268>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2201      	movs	r2, #1
 8003e66:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2204      	movs	r2, #4
 8003e6e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2200      	movs	r2, #0
 8003e76:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	68ba      	ldr	r2, [r7, #8]
 8003e7c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	88fa      	ldrh	r2, [r7, #6]
 8003e82:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	88fa      	ldrh	r2, [r7, #6]
 8003e8a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2200      	movs	r2, #0
 8003e92:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2200      	movs	r2, #0
 8003e98:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003eb4:	d908      	bls.n	8003ec8 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	685a      	ldr	r2, [r3, #4]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003ec4:	605a      	str	r2, [r3, #4]
 8003ec6:	e007      	b.n	8003ed8 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	685a      	ldr	r2, [r3, #4]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003ed6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ee0:	d10f      	bne.n	8003f02 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ef0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003f00:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f0c:	2b40      	cmp	r3, #64	@ 0x40
 8003f0e:	d007      	beq.n	8003f20 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003f1e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003f28:	d875      	bhi.n	8004016 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003f2a:	e037      	b.n	8003f9c <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d117      	bne.n	8003f6a <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f103 020c 	add.w	r2, r3, #12
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f46:	7812      	ldrb	r2, [r2, #0]
 8003f48:	b2d2      	uxtb	r2, r2
 8003f4a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f50:	1c5a      	adds	r2, r3, #1
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003f68:	e018      	b.n	8003f9c <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f6a:	f7fd fe3d 	bl	8001be8 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	683a      	ldr	r2, [r7, #0]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d803      	bhi.n	8003f82 <HAL_SPI_Receive+0x194>
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f80:	d102      	bne.n	8003f88 <HAL_SPI_Receive+0x19a>
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d109      	bne.n	8003f9c <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	e05c      	b.n	8004056 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d1c1      	bne.n	8003f2c <HAL_SPI_Receive+0x13e>
 8003fa8:	e03b      	b.n	8004022 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f003 0301 	and.w	r3, r3, #1
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d115      	bne.n	8003fe4 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68da      	ldr	r2, [r3, #12]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc2:	b292      	uxth	r2, r2
 8003fc4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fca:	1c9a      	adds	r2, r3, #2
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	b29a      	uxth	r2, r3
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003fe2:	e018      	b.n	8004016 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fe4:	f7fd fe00 	bl	8001be8 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	683a      	ldr	r2, [r7, #0]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d803      	bhi.n	8003ffc <HAL_SPI_Receive+0x20e>
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ffa:	d102      	bne.n	8004002 <HAL_SPI_Receive+0x214>
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d109      	bne.n	8004016 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2201      	movs	r2, #1
 8004006:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e01f      	b.n	8004056 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800401c:	b29b      	uxth	r3, r3
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1c3      	bne.n	8003faa <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004022:	697a      	ldr	r2, [r7, #20]
 8004024:	6839      	ldr	r1, [r7, #0]
 8004026:	68f8      	ldr	r0, [r7, #12]
 8004028:	f000 fb56 	bl	80046d8 <SPI_EndRxTransaction>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d002      	beq.n	8004038 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2220      	movs	r2, #32
 8004036:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800404c:	2b00      	cmp	r3, #0
 800404e:	d001      	beq.n	8004054 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e000      	b.n	8004056 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8004054:	2300      	movs	r3, #0
  }
}
 8004056:	4618      	mov	r0, r3
 8004058:	3718      	adds	r7, #24
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}

0800405e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800405e:	b580      	push	{r7, lr}
 8004060:	b08a      	sub	sp, #40	@ 0x28
 8004062:	af00      	add	r7, sp, #0
 8004064:	60f8      	str	r0, [r7, #12]
 8004066:	60b9      	str	r1, [r7, #8]
 8004068:	607a      	str	r2, [r7, #4]
 800406a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800406c:	2301      	movs	r3, #1
 800406e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004070:	f7fd fdba 	bl	8001be8 <HAL_GetTick>
 8004074:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800407c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004084:	887b      	ldrh	r3, [r7, #2]
 8004086:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8004088:	887b      	ldrh	r3, [r7, #2]
 800408a:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800408c:	7ffb      	ldrb	r3, [r7, #31]
 800408e:	2b01      	cmp	r3, #1
 8004090:	d00c      	beq.n	80040ac <HAL_SPI_TransmitReceive+0x4e>
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004098:	d106      	bne.n	80040a8 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d102      	bne.n	80040a8 <HAL_SPI_TransmitReceive+0x4a>
 80040a2:	7ffb      	ldrb	r3, [r7, #31]
 80040a4:	2b04      	cmp	r3, #4
 80040a6:	d001      	beq.n	80040ac <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80040a8:	2302      	movs	r3, #2
 80040aa:	e1f3      	b.n	8004494 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d005      	beq.n	80040be <HAL_SPI_TransmitReceive+0x60>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d002      	beq.n	80040be <HAL_SPI_TransmitReceive+0x60>
 80040b8:	887b      	ldrh	r3, [r7, #2]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d101      	bne.n	80040c2 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e1e8      	b.n	8004494 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d101      	bne.n	80040d0 <HAL_SPI_TransmitReceive+0x72>
 80040cc:	2302      	movs	r3, #2
 80040ce:	e1e1      	b.n	8004494 <HAL_SPI_TransmitReceive+0x436>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	2b04      	cmp	r3, #4
 80040e2:	d003      	beq.n	80040ec <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2205      	movs	r2, #5
 80040e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	887a      	ldrh	r2, [r7, #2]
 80040fc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	887a      	ldrh	r2, [r7, #2]
 8004104:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	68ba      	ldr	r2, [r7, #8]
 800410c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	887a      	ldrh	r2, [r7, #2]
 8004112:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	887a      	ldrh	r2, [r7, #2]
 8004118:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2200      	movs	r2, #0
 800411e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800412e:	d802      	bhi.n	8004136 <HAL_SPI_TransmitReceive+0xd8>
 8004130:	8abb      	ldrh	r3, [r7, #20]
 8004132:	2b01      	cmp	r3, #1
 8004134:	d908      	bls.n	8004148 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	685a      	ldr	r2, [r3, #4]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004144:	605a      	str	r2, [r3, #4]
 8004146:	e007      	b.n	8004158 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	685a      	ldr	r2, [r3, #4]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004156:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004162:	2b40      	cmp	r3, #64	@ 0x40
 8004164:	d007      	beq.n	8004176 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004174:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800417e:	f240 8083 	bls.w	8004288 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d002      	beq.n	8004190 <HAL_SPI_TransmitReceive+0x132>
 800418a:	8afb      	ldrh	r3, [r7, #22]
 800418c:	2b01      	cmp	r3, #1
 800418e:	d16f      	bne.n	8004270 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004194:	881a      	ldrh	r2, [r3, #0]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041a0:	1c9a      	adds	r2, r3, #2
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	3b01      	subs	r3, #1
 80041ae:	b29a      	uxth	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041b4:	e05c      	b.n	8004270 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f003 0302 	and.w	r3, r3, #2
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d11b      	bne.n	80041fc <HAL_SPI_TransmitReceive+0x19e>
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d016      	beq.n	80041fc <HAL_SPI_TransmitReceive+0x19e>
 80041ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d113      	bne.n	80041fc <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041d8:	881a      	ldrh	r2, [r3, #0]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041e4:	1c9a      	adds	r2, r3, #2
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	3b01      	subs	r3, #1
 80041f2:	b29a      	uxth	r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80041f8:	2300      	movs	r3, #0
 80041fa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f003 0301 	and.w	r3, r3, #1
 8004206:	2b01      	cmp	r3, #1
 8004208:	d11c      	bne.n	8004244 <HAL_SPI_TransmitReceive+0x1e6>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004210:	b29b      	uxth	r3, r3
 8004212:	2b00      	cmp	r3, #0
 8004214:	d016      	beq.n	8004244 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	68da      	ldr	r2, [r3, #12]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004220:	b292      	uxth	r2, r2
 8004222:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004228:	1c9a      	adds	r2, r3, #2
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004234:	b29b      	uxth	r3, r3
 8004236:	3b01      	subs	r3, #1
 8004238:	b29a      	uxth	r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004240:	2301      	movs	r3, #1
 8004242:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004244:	f7fd fcd0 	bl	8001be8 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	6a3b      	ldr	r3, [r7, #32]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004250:	429a      	cmp	r2, r3
 8004252:	d80d      	bhi.n	8004270 <HAL_SPI_TransmitReceive+0x212>
 8004254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800425a:	d009      	beq.n	8004270 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e111      	b.n	8004494 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004274:	b29b      	uxth	r3, r3
 8004276:	2b00      	cmp	r3, #0
 8004278:	d19d      	bne.n	80041b6 <HAL_SPI_TransmitReceive+0x158>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004280:	b29b      	uxth	r3, r3
 8004282:	2b00      	cmp	r3, #0
 8004284:	d197      	bne.n	80041b6 <HAL_SPI_TransmitReceive+0x158>
 8004286:	e0e5      	b.n	8004454 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d003      	beq.n	8004298 <HAL_SPI_TransmitReceive+0x23a>
 8004290:	8afb      	ldrh	r3, [r7, #22]
 8004292:	2b01      	cmp	r3, #1
 8004294:	f040 80d1 	bne.w	800443a <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800429c:	b29b      	uxth	r3, r3
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d912      	bls.n	80042c8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042a6:	881a      	ldrh	r2, [r3, #0]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042b2:	1c9a      	adds	r2, r3, #2
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042bc:	b29b      	uxth	r3, r3
 80042be:	3b02      	subs	r3, #2
 80042c0:	b29a      	uxth	r2, r3
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80042c6:	e0b8      	b.n	800443a <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	330c      	adds	r3, #12
 80042d2:	7812      	ldrb	r2, [r2, #0]
 80042d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042da:	1c5a      	adds	r2, r3, #1
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	3b01      	subs	r3, #1
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042ee:	e0a4      	b.n	800443a <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f003 0302 	and.w	r3, r3, #2
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d134      	bne.n	8004368 <HAL_SPI_TransmitReceive+0x30a>
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004302:	b29b      	uxth	r3, r3
 8004304:	2b00      	cmp	r3, #0
 8004306:	d02f      	beq.n	8004368 <HAL_SPI_TransmitReceive+0x30a>
 8004308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800430a:	2b01      	cmp	r3, #1
 800430c:	d12c      	bne.n	8004368 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004312:	b29b      	uxth	r3, r3
 8004314:	2b01      	cmp	r3, #1
 8004316:	d912      	bls.n	800433e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800431c:	881a      	ldrh	r2, [r3, #0]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004328:	1c9a      	adds	r2, r3, #2
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004332:	b29b      	uxth	r3, r3
 8004334:	3b02      	subs	r3, #2
 8004336:	b29a      	uxth	r2, r3
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800433c:	e012      	b.n	8004364 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	330c      	adds	r3, #12
 8004348:	7812      	ldrb	r2, [r2, #0]
 800434a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004350:	1c5a      	adds	r2, r3, #1
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800435a:	b29b      	uxth	r3, r3
 800435c:	3b01      	subs	r3, #1
 800435e:	b29a      	uxth	r2, r3
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004364:	2300      	movs	r3, #0
 8004366:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f003 0301 	and.w	r3, r3, #1
 8004372:	2b01      	cmp	r3, #1
 8004374:	d148      	bne.n	8004408 <HAL_SPI_TransmitReceive+0x3aa>
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800437c:	b29b      	uxth	r3, r3
 800437e:	2b00      	cmp	r3, #0
 8004380:	d042      	beq.n	8004408 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004388:	b29b      	uxth	r3, r3
 800438a:	2b01      	cmp	r3, #1
 800438c:	d923      	bls.n	80043d6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68da      	ldr	r2, [r3, #12]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004398:	b292      	uxth	r2, r2
 800439a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a0:	1c9a      	adds	r2, r3, #2
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	3b02      	subs	r3, #2
 80043b0:	b29a      	uxth	r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80043be:	b29b      	uxth	r3, r3
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d81f      	bhi.n	8004404 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	685a      	ldr	r2, [r3, #4]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80043d2:	605a      	str	r2, [r3, #4]
 80043d4:	e016      	b.n	8004404 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f103 020c 	add.w	r2, r3, #12
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e2:	7812      	ldrb	r2, [r2, #0]
 80043e4:	b2d2      	uxtb	r2, r2
 80043e6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ec:	1c5a      	adds	r2, r3, #1
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	3b01      	subs	r3, #1
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004404:	2301      	movs	r3, #1
 8004406:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004408:	f7fd fbee 	bl	8001be8 <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	6a3b      	ldr	r3, [r7, #32]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004414:	429a      	cmp	r2, r3
 8004416:	d803      	bhi.n	8004420 <HAL_SPI_TransmitReceive+0x3c2>
 8004418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800441a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800441e:	d102      	bne.n	8004426 <HAL_SPI_TransmitReceive+0x3c8>
 8004420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004422:	2b00      	cmp	r3, #0
 8004424:	d109      	bne.n	800443a <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2201      	movs	r2, #1
 800442a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e02c      	b.n	8004494 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800443e:	b29b      	uxth	r3, r3
 8004440:	2b00      	cmp	r3, #0
 8004442:	f47f af55 	bne.w	80042f0 <HAL_SPI_TransmitReceive+0x292>
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800444c:	b29b      	uxth	r3, r3
 800444e:	2b00      	cmp	r3, #0
 8004450:	f47f af4e 	bne.w	80042f0 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004454:	6a3a      	ldr	r2, [r7, #32]
 8004456:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004458:	68f8      	ldr	r0, [r7, #12]
 800445a:	f000 f995 	bl	8004788 <SPI_EndRxTxTransaction>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d008      	beq.n	8004476 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2220      	movs	r2, #32
 8004468:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e00e      	b.n	8004494 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2201      	movs	r2, #1
 800447a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800448a:	2b00      	cmp	r3, #0
 800448c:	d001      	beq.n	8004492 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e000      	b.n	8004494 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8004492:	2300      	movs	r3, #0
  }
}
 8004494:	4618      	mov	r0, r3
 8004496:	3728      	adds	r7, #40	@ 0x28
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b088      	sub	sp, #32
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	603b      	str	r3, [r7, #0]
 80044a8:	4613      	mov	r3, r2
 80044aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80044ac:	f7fd fb9c 	bl	8001be8 <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044b4:	1a9b      	subs	r3, r3, r2
 80044b6:	683a      	ldr	r2, [r7, #0]
 80044b8:	4413      	add	r3, r2
 80044ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80044bc:	f7fd fb94 	bl	8001be8 <HAL_GetTick>
 80044c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80044c2:	4b39      	ldr	r3, [pc, #228]	@ (80045a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	015b      	lsls	r3, r3, #5
 80044c8:	0d1b      	lsrs	r3, r3, #20
 80044ca:	69fa      	ldr	r2, [r7, #28]
 80044cc:	fb02 f303 	mul.w	r3, r2, r3
 80044d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80044d2:	e054      	b.n	800457e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044da:	d050      	beq.n	800457e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80044dc:	f7fd fb84 	bl	8001be8 <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	69fa      	ldr	r2, [r7, #28]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d902      	bls.n	80044f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d13d      	bne.n	800456e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	685a      	ldr	r2, [r3, #4]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004500:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800450a:	d111      	bne.n	8004530 <SPI_WaitFlagStateUntilTimeout+0x94>
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004514:	d004      	beq.n	8004520 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800451e:	d107      	bne.n	8004530 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800452e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004534:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004538:	d10f      	bne.n	800455a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004548:	601a      	str	r2, [r3, #0]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004558:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2201      	movs	r2, #1
 800455e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2200      	movs	r2, #0
 8004566:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e017      	b.n	800459e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d101      	bne.n	8004578 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004574:	2300      	movs	r3, #0
 8004576:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	3b01      	subs	r3, #1
 800457c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	689a      	ldr	r2, [r3, #8]
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	4013      	ands	r3, r2
 8004588:	68ba      	ldr	r2, [r7, #8]
 800458a:	429a      	cmp	r2, r3
 800458c:	bf0c      	ite	eq
 800458e:	2301      	moveq	r3, #1
 8004590:	2300      	movne	r3, #0
 8004592:	b2db      	uxtb	r3, r3
 8004594:	461a      	mov	r2, r3
 8004596:	79fb      	ldrb	r3, [r7, #7]
 8004598:	429a      	cmp	r2, r3
 800459a:	d19b      	bne.n	80044d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3720      	adds	r7, #32
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	20000000 	.word	0x20000000

080045ac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b08a      	sub	sp, #40	@ 0x28
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	607a      	str	r2, [r7, #4]
 80045b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80045ba:	2300      	movs	r3, #0
 80045bc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80045be:	f7fd fb13 	bl	8001be8 <HAL_GetTick>
 80045c2:	4602      	mov	r2, r0
 80045c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045c6:	1a9b      	subs	r3, r3, r2
 80045c8:	683a      	ldr	r2, [r7, #0]
 80045ca:	4413      	add	r3, r2
 80045cc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80045ce:	f7fd fb0b 	bl	8001be8 <HAL_GetTick>
 80045d2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	330c      	adds	r3, #12
 80045da:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80045dc:	4b3d      	ldr	r3, [pc, #244]	@ (80046d4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	4613      	mov	r3, r2
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	4413      	add	r3, r2
 80045e6:	00da      	lsls	r2, r3, #3
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	0d1b      	lsrs	r3, r3, #20
 80045ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045ee:	fb02 f303 	mul.w	r3, r2, r3
 80045f2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80045f4:	e060      	b.n	80046b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80045fc:	d107      	bne.n	800460e <SPI_WaitFifoStateUntilTimeout+0x62>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d104      	bne.n	800460e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	b2db      	uxtb	r3, r3
 800460a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800460c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004614:	d050      	beq.n	80046b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004616:	f7fd fae7 	bl	8001be8 <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	6a3b      	ldr	r3, [r7, #32]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004622:	429a      	cmp	r2, r3
 8004624:	d902      	bls.n	800462c <SPI_WaitFifoStateUntilTimeout+0x80>
 8004626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004628:	2b00      	cmp	r3, #0
 800462a:	d13d      	bne.n	80046a8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	685a      	ldr	r2, [r3, #4]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800463a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004644:	d111      	bne.n	800466a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800464e:	d004      	beq.n	800465a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004658:	d107      	bne.n	800466a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004668:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800466e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004672:	d10f      	bne.n	8004694 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004682:	601a      	str	r2, [r3, #0]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004692:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	e010      	b.n	80046ca <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d101      	bne.n	80046b2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80046ae:	2300      	movs	r3, #0
 80046b0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80046b2:	69bb      	ldr	r3, [r7, #24]
 80046b4:	3b01      	subs	r3, #1
 80046b6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	689a      	ldr	r2, [r3, #8]
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	4013      	ands	r3, r2
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d196      	bne.n	80045f6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3728      	adds	r7, #40	@ 0x28
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	20000000 	.word	0x20000000

080046d8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b086      	sub	sp, #24
 80046dc:	af02      	add	r7, sp, #8
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	60b9      	str	r1, [r7, #8]
 80046e2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80046ec:	d111      	bne.n	8004712 <SPI_EndRxTransaction+0x3a>
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046f6:	d004      	beq.n	8004702 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004700:	d107      	bne.n	8004712 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004710:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	9300      	str	r3, [sp, #0]
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	2200      	movs	r2, #0
 800471a:	2180      	movs	r1, #128	@ 0x80
 800471c:	68f8      	ldr	r0, [r7, #12]
 800471e:	f7ff febd 	bl	800449c <SPI_WaitFlagStateUntilTimeout>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d007      	beq.n	8004738 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800472c:	f043 0220 	orr.w	r2, r3, #32
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004734:	2303      	movs	r3, #3
 8004736:	e023      	b.n	8004780 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004740:	d11d      	bne.n	800477e <SPI_EndRxTransaction+0xa6>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800474a:	d004      	beq.n	8004756 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004754:	d113      	bne.n	800477e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	9300      	str	r3, [sp, #0]
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	2200      	movs	r2, #0
 800475e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004762:	68f8      	ldr	r0, [r7, #12]
 8004764:	f7ff ff22 	bl	80045ac <SPI_WaitFifoStateUntilTimeout>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d007      	beq.n	800477e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004772:	f043 0220 	orr.w	r2, r3, #32
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e000      	b.n	8004780 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800477e:	2300      	movs	r3, #0
}
 8004780:	4618      	mov	r0, r3
 8004782:	3710      	adds	r7, #16
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b086      	sub	sp, #24
 800478c:	af02      	add	r7, sp, #8
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	9300      	str	r3, [sp, #0]
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	2200      	movs	r2, #0
 800479c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80047a0:	68f8      	ldr	r0, [r7, #12]
 80047a2:	f7ff ff03 	bl	80045ac <SPI_WaitFifoStateUntilTimeout>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d007      	beq.n	80047bc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047b0:	f043 0220 	orr.w	r2, r3, #32
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	e027      	b.n	800480c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	9300      	str	r3, [sp, #0]
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	2200      	movs	r2, #0
 80047c4:	2180      	movs	r1, #128	@ 0x80
 80047c6:	68f8      	ldr	r0, [r7, #12]
 80047c8:	f7ff fe68 	bl	800449c <SPI_WaitFlagStateUntilTimeout>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d007      	beq.n	80047e2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047d6:	f043 0220 	orr.w	r2, r3, #32
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e014      	b.n	800480c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	9300      	str	r3, [sp, #0]
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80047ee:	68f8      	ldr	r0, [r7, #12]
 80047f0:	f7ff fedc 	bl	80045ac <SPI_WaitFifoStateUntilTimeout>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d007      	beq.n	800480a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047fe:	f043 0220 	orr.w	r2, r3, #32
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e000      	b.n	800480c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800480a:	2300      	movs	r3, #0
}
 800480c:	4618      	mov	r0, r3
 800480e:	3710      	adds	r7, #16
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}

08004814 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b082      	sub	sp, #8
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d101      	bne.n	8004826 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e040      	b.n	80048a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800482a:	2b00      	cmp	r3, #0
 800482c:	d106      	bne.n	800483c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f7fd f858 	bl	80018ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2224      	movs	r2, #36	@ 0x24
 8004840:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f022 0201 	bic.w	r2, r2, #1
 8004850:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004856:	2b00      	cmp	r3, #0
 8004858:	d002      	beq.n	8004860 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 fb6a 	bl	8004f34 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f000 f8af 	bl	80049c4 <UART_SetConfig>
 8004866:	4603      	mov	r3, r0
 8004868:	2b01      	cmp	r3, #1
 800486a:	d101      	bne.n	8004870 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e01b      	b.n	80048a8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	685a      	ldr	r2, [r3, #4]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800487e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	689a      	ldr	r2, [r3, #8]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800488e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f042 0201 	orr.w	r2, r2, #1
 800489e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f000 fbe9 	bl	8005078 <UART_CheckIdleState>
 80048a6:	4603      	mov	r3, r0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3708      	adds	r7, #8
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b08a      	sub	sp, #40	@ 0x28
 80048b4:	af02      	add	r7, sp, #8
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	60b9      	str	r1, [r7, #8]
 80048ba:	603b      	str	r3, [r7, #0]
 80048bc:	4613      	mov	r3, r2
 80048be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80048c4:	2b20      	cmp	r3, #32
 80048c6:	d177      	bne.n	80049b8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d002      	beq.n	80048d4 <HAL_UART_Transmit+0x24>
 80048ce:	88fb      	ldrh	r3, [r7, #6]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d101      	bne.n	80048d8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e070      	b.n	80049ba <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2200      	movs	r2, #0
 80048dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2221      	movs	r2, #33	@ 0x21
 80048e4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048e6:	f7fd f97f 	bl	8001be8 <HAL_GetTick>
 80048ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	88fa      	ldrh	r2, [r7, #6]
 80048f0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	88fa      	ldrh	r2, [r7, #6]
 80048f8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004904:	d108      	bne.n	8004918 <HAL_UART_Transmit+0x68>
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d104      	bne.n	8004918 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800490e:	2300      	movs	r3, #0
 8004910:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	61bb      	str	r3, [r7, #24]
 8004916:	e003      	b.n	8004920 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800491c:	2300      	movs	r3, #0
 800491e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004920:	e02f      	b.n	8004982 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	9300      	str	r3, [sp, #0]
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	2200      	movs	r2, #0
 800492a:	2180      	movs	r1, #128	@ 0x80
 800492c:	68f8      	ldr	r0, [r7, #12]
 800492e:	f000 fc4b 	bl	80051c8 <UART_WaitOnFlagUntilTimeout>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d004      	beq.n	8004942 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2220      	movs	r2, #32
 800493c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e03b      	b.n	80049ba <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d10b      	bne.n	8004960 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	881a      	ldrh	r2, [r3, #0]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004954:	b292      	uxth	r2, r2
 8004956:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	3302      	adds	r3, #2
 800495c:	61bb      	str	r3, [r7, #24]
 800495e:	e007      	b.n	8004970 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	781a      	ldrb	r2, [r3, #0]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	3301      	adds	r3, #1
 800496e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004976:	b29b      	uxth	r3, r3
 8004978:	3b01      	subs	r3, #1
 800497a:	b29a      	uxth	r2, r3
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004988:	b29b      	uxth	r3, r3
 800498a:	2b00      	cmp	r3, #0
 800498c:	d1c9      	bne.n	8004922 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	9300      	str	r3, [sp, #0]
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	2200      	movs	r2, #0
 8004996:	2140      	movs	r1, #64	@ 0x40
 8004998:	68f8      	ldr	r0, [r7, #12]
 800499a:	f000 fc15 	bl	80051c8 <UART_WaitOnFlagUntilTimeout>
 800499e:	4603      	mov	r3, r0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d004      	beq.n	80049ae <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2220      	movs	r2, #32
 80049a8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e005      	b.n	80049ba <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2220      	movs	r2, #32
 80049b2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80049b4:	2300      	movs	r3, #0
 80049b6:	e000      	b.n	80049ba <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80049b8:	2302      	movs	r3, #2
  }
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3720      	adds	r7, #32
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
	...

080049c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049c8:	b08a      	sub	sp, #40	@ 0x28
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80049ce:	2300      	movs	r3, #0
 80049d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	689a      	ldr	r2, [r3, #8]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	431a      	orrs	r2, r3
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	695b      	ldr	r3, [r3, #20]
 80049e2:	431a      	orrs	r2, r3
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	69db      	ldr	r3, [r3, #28]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	4ba4      	ldr	r3, [pc, #656]	@ (8004c84 <UART_SetConfig+0x2c0>)
 80049f4:	4013      	ands	r3, r2
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	6812      	ldr	r2, [r2, #0]
 80049fa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80049fc:	430b      	orrs	r3, r1
 80049fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	68da      	ldr	r2, [r3, #12]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	430a      	orrs	r2, r1
 8004a14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	699b      	ldr	r3, [r3, #24]
 8004a1a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a99      	ldr	r2, [pc, #612]	@ (8004c88 <UART_SetConfig+0x2c4>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d004      	beq.n	8004a30 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6a1b      	ldr	r3, [r3, #32]
 8004a2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a40:	430a      	orrs	r2, r1
 8004a42:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a90      	ldr	r2, [pc, #576]	@ (8004c8c <UART_SetConfig+0x2c8>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d126      	bne.n	8004a9c <UART_SetConfig+0xd8>
 8004a4e:	4b90      	ldr	r3, [pc, #576]	@ (8004c90 <UART_SetConfig+0x2cc>)
 8004a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a54:	f003 0303 	and.w	r3, r3, #3
 8004a58:	2b03      	cmp	r3, #3
 8004a5a:	d81b      	bhi.n	8004a94 <UART_SetConfig+0xd0>
 8004a5c:	a201      	add	r2, pc, #4	@ (adr r2, 8004a64 <UART_SetConfig+0xa0>)
 8004a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a62:	bf00      	nop
 8004a64:	08004a75 	.word	0x08004a75
 8004a68:	08004a85 	.word	0x08004a85
 8004a6c:	08004a7d 	.word	0x08004a7d
 8004a70:	08004a8d 	.word	0x08004a8d
 8004a74:	2301      	movs	r3, #1
 8004a76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a7a:	e116      	b.n	8004caa <UART_SetConfig+0x2e6>
 8004a7c:	2302      	movs	r3, #2
 8004a7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a82:	e112      	b.n	8004caa <UART_SetConfig+0x2e6>
 8004a84:	2304      	movs	r3, #4
 8004a86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a8a:	e10e      	b.n	8004caa <UART_SetConfig+0x2e6>
 8004a8c:	2308      	movs	r3, #8
 8004a8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a92:	e10a      	b.n	8004caa <UART_SetConfig+0x2e6>
 8004a94:	2310      	movs	r3, #16
 8004a96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a9a:	e106      	b.n	8004caa <UART_SetConfig+0x2e6>
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a7c      	ldr	r2, [pc, #496]	@ (8004c94 <UART_SetConfig+0x2d0>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d138      	bne.n	8004b18 <UART_SetConfig+0x154>
 8004aa6:	4b7a      	ldr	r3, [pc, #488]	@ (8004c90 <UART_SetConfig+0x2cc>)
 8004aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aac:	f003 030c 	and.w	r3, r3, #12
 8004ab0:	2b0c      	cmp	r3, #12
 8004ab2:	d82d      	bhi.n	8004b10 <UART_SetConfig+0x14c>
 8004ab4:	a201      	add	r2, pc, #4	@ (adr r2, 8004abc <UART_SetConfig+0xf8>)
 8004ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aba:	bf00      	nop
 8004abc:	08004af1 	.word	0x08004af1
 8004ac0:	08004b11 	.word	0x08004b11
 8004ac4:	08004b11 	.word	0x08004b11
 8004ac8:	08004b11 	.word	0x08004b11
 8004acc:	08004b01 	.word	0x08004b01
 8004ad0:	08004b11 	.word	0x08004b11
 8004ad4:	08004b11 	.word	0x08004b11
 8004ad8:	08004b11 	.word	0x08004b11
 8004adc:	08004af9 	.word	0x08004af9
 8004ae0:	08004b11 	.word	0x08004b11
 8004ae4:	08004b11 	.word	0x08004b11
 8004ae8:	08004b11 	.word	0x08004b11
 8004aec:	08004b09 	.word	0x08004b09
 8004af0:	2300      	movs	r3, #0
 8004af2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004af6:	e0d8      	b.n	8004caa <UART_SetConfig+0x2e6>
 8004af8:	2302      	movs	r3, #2
 8004afa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004afe:	e0d4      	b.n	8004caa <UART_SetConfig+0x2e6>
 8004b00:	2304      	movs	r3, #4
 8004b02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b06:	e0d0      	b.n	8004caa <UART_SetConfig+0x2e6>
 8004b08:	2308      	movs	r3, #8
 8004b0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b0e:	e0cc      	b.n	8004caa <UART_SetConfig+0x2e6>
 8004b10:	2310      	movs	r3, #16
 8004b12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b16:	e0c8      	b.n	8004caa <UART_SetConfig+0x2e6>
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a5e      	ldr	r2, [pc, #376]	@ (8004c98 <UART_SetConfig+0x2d4>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d125      	bne.n	8004b6e <UART_SetConfig+0x1aa>
 8004b22:	4b5b      	ldr	r3, [pc, #364]	@ (8004c90 <UART_SetConfig+0x2cc>)
 8004b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b28:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004b2c:	2b30      	cmp	r3, #48	@ 0x30
 8004b2e:	d016      	beq.n	8004b5e <UART_SetConfig+0x19a>
 8004b30:	2b30      	cmp	r3, #48	@ 0x30
 8004b32:	d818      	bhi.n	8004b66 <UART_SetConfig+0x1a2>
 8004b34:	2b20      	cmp	r3, #32
 8004b36:	d00a      	beq.n	8004b4e <UART_SetConfig+0x18a>
 8004b38:	2b20      	cmp	r3, #32
 8004b3a:	d814      	bhi.n	8004b66 <UART_SetConfig+0x1a2>
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d002      	beq.n	8004b46 <UART_SetConfig+0x182>
 8004b40:	2b10      	cmp	r3, #16
 8004b42:	d008      	beq.n	8004b56 <UART_SetConfig+0x192>
 8004b44:	e00f      	b.n	8004b66 <UART_SetConfig+0x1a2>
 8004b46:	2300      	movs	r3, #0
 8004b48:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b4c:	e0ad      	b.n	8004caa <UART_SetConfig+0x2e6>
 8004b4e:	2302      	movs	r3, #2
 8004b50:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b54:	e0a9      	b.n	8004caa <UART_SetConfig+0x2e6>
 8004b56:	2304      	movs	r3, #4
 8004b58:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b5c:	e0a5      	b.n	8004caa <UART_SetConfig+0x2e6>
 8004b5e:	2308      	movs	r3, #8
 8004b60:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b64:	e0a1      	b.n	8004caa <UART_SetConfig+0x2e6>
 8004b66:	2310      	movs	r3, #16
 8004b68:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b6c:	e09d      	b.n	8004caa <UART_SetConfig+0x2e6>
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a4a      	ldr	r2, [pc, #296]	@ (8004c9c <UART_SetConfig+0x2d8>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d125      	bne.n	8004bc4 <UART_SetConfig+0x200>
 8004b78:	4b45      	ldr	r3, [pc, #276]	@ (8004c90 <UART_SetConfig+0x2cc>)
 8004b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b7e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004b82:	2bc0      	cmp	r3, #192	@ 0xc0
 8004b84:	d016      	beq.n	8004bb4 <UART_SetConfig+0x1f0>
 8004b86:	2bc0      	cmp	r3, #192	@ 0xc0
 8004b88:	d818      	bhi.n	8004bbc <UART_SetConfig+0x1f8>
 8004b8a:	2b80      	cmp	r3, #128	@ 0x80
 8004b8c:	d00a      	beq.n	8004ba4 <UART_SetConfig+0x1e0>
 8004b8e:	2b80      	cmp	r3, #128	@ 0x80
 8004b90:	d814      	bhi.n	8004bbc <UART_SetConfig+0x1f8>
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d002      	beq.n	8004b9c <UART_SetConfig+0x1d8>
 8004b96:	2b40      	cmp	r3, #64	@ 0x40
 8004b98:	d008      	beq.n	8004bac <UART_SetConfig+0x1e8>
 8004b9a:	e00f      	b.n	8004bbc <UART_SetConfig+0x1f8>
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ba2:	e082      	b.n	8004caa <UART_SetConfig+0x2e6>
 8004ba4:	2302      	movs	r3, #2
 8004ba6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004baa:	e07e      	b.n	8004caa <UART_SetConfig+0x2e6>
 8004bac:	2304      	movs	r3, #4
 8004bae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bb2:	e07a      	b.n	8004caa <UART_SetConfig+0x2e6>
 8004bb4:	2308      	movs	r3, #8
 8004bb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bba:	e076      	b.n	8004caa <UART_SetConfig+0x2e6>
 8004bbc:	2310      	movs	r3, #16
 8004bbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bc2:	e072      	b.n	8004caa <UART_SetConfig+0x2e6>
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a35      	ldr	r2, [pc, #212]	@ (8004ca0 <UART_SetConfig+0x2dc>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d12a      	bne.n	8004c24 <UART_SetConfig+0x260>
 8004bce:	4b30      	ldr	r3, [pc, #192]	@ (8004c90 <UART_SetConfig+0x2cc>)
 8004bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bd4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bd8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004bdc:	d01a      	beq.n	8004c14 <UART_SetConfig+0x250>
 8004bde:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004be2:	d81b      	bhi.n	8004c1c <UART_SetConfig+0x258>
 8004be4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004be8:	d00c      	beq.n	8004c04 <UART_SetConfig+0x240>
 8004bea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bee:	d815      	bhi.n	8004c1c <UART_SetConfig+0x258>
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d003      	beq.n	8004bfc <UART_SetConfig+0x238>
 8004bf4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bf8:	d008      	beq.n	8004c0c <UART_SetConfig+0x248>
 8004bfa:	e00f      	b.n	8004c1c <UART_SetConfig+0x258>
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c02:	e052      	b.n	8004caa <UART_SetConfig+0x2e6>
 8004c04:	2302      	movs	r3, #2
 8004c06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c0a:	e04e      	b.n	8004caa <UART_SetConfig+0x2e6>
 8004c0c:	2304      	movs	r3, #4
 8004c0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c12:	e04a      	b.n	8004caa <UART_SetConfig+0x2e6>
 8004c14:	2308      	movs	r3, #8
 8004c16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c1a:	e046      	b.n	8004caa <UART_SetConfig+0x2e6>
 8004c1c:	2310      	movs	r3, #16
 8004c1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c22:	e042      	b.n	8004caa <UART_SetConfig+0x2e6>
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a17      	ldr	r2, [pc, #92]	@ (8004c88 <UART_SetConfig+0x2c4>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d13a      	bne.n	8004ca4 <UART_SetConfig+0x2e0>
 8004c2e:	4b18      	ldr	r3, [pc, #96]	@ (8004c90 <UART_SetConfig+0x2cc>)
 8004c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c34:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004c38:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004c3c:	d01a      	beq.n	8004c74 <UART_SetConfig+0x2b0>
 8004c3e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004c42:	d81b      	bhi.n	8004c7c <UART_SetConfig+0x2b8>
 8004c44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c48:	d00c      	beq.n	8004c64 <UART_SetConfig+0x2a0>
 8004c4a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c4e:	d815      	bhi.n	8004c7c <UART_SetConfig+0x2b8>
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d003      	beq.n	8004c5c <UART_SetConfig+0x298>
 8004c54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c58:	d008      	beq.n	8004c6c <UART_SetConfig+0x2a8>
 8004c5a:	e00f      	b.n	8004c7c <UART_SetConfig+0x2b8>
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c62:	e022      	b.n	8004caa <UART_SetConfig+0x2e6>
 8004c64:	2302      	movs	r3, #2
 8004c66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c6a:	e01e      	b.n	8004caa <UART_SetConfig+0x2e6>
 8004c6c:	2304      	movs	r3, #4
 8004c6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c72:	e01a      	b.n	8004caa <UART_SetConfig+0x2e6>
 8004c74:	2308      	movs	r3, #8
 8004c76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c7a:	e016      	b.n	8004caa <UART_SetConfig+0x2e6>
 8004c7c:	2310      	movs	r3, #16
 8004c7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c82:	e012      	b.n	8004caa <UART_SetConfig+0x2e6>
 8004c84:	efff69f3 	.word	0xefff69f3
 8004c88:	40008000 	.word	0x40008000
 8004c8c:	40013800 	.word	0x40013800
 8004c90:	40021000 	.word	0x40021000
 8004c94:	40004400 	.word	0x40004400
 8004c98:	40004800 	.word	0x40004800
 8004c9c:	40004c00 	.word	0x40004c00
 8004ca0:	40005000 	.word	0x40005000
 8004ca4:	2310      	movs	r3, #16
 8004ca6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a9f      	ldr	r2, [pc, #636]	@ (8004f2c <UART_SetConfig+0x568>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d17a      	bne.n	8004daa <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004cb4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004cb8:	2b08      	cmp	r3, #8
 8004cba:	d824      	bhi.n	8004d06 <UART_SetConfig+0x342>
 8004cbc:	a201      	add	r2, pc, #4	@ (adr r2, 8004cc4 <UART_SetConfig+0x300>)
 8004cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc2:	bf00      	nop
 8004cc4:	08004ce9 	.word	0x08004ce9
 8004cc8:	08004d07 	.word	0x08004d07
 8004ccc:	08004cf1 	.word	0x08004cf1
 8004cd0:	08004d07 	.word	0x08004d07
 8004cd4:	08004cf7 	.word	0x08004cf7
 8004cd8:	08004d07 	.word	0x08004d07
 8004cdc:	08004d07 	.word	0x08004d07
 8004ce0:	08004d07 	.word	0x08004d07
 8004ce4:	08004cff 	.word	0x08004cff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ce8:	f7fe f920 	bl	8002f2c <HAL_RCC_GetPCLK1Freq>
 8004cec:	61f8      	str	r0, [r7, #28]
        break;
 8004cee:	e010      	b.n	8004d12 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cf0:	4b8f      	ldr	r3, [pc, #572]	@ (8004f30 <UART_SetConfig+0x56c>)
 8004cf2:	61fb      	str	r3, [r7, #28]
        break;
 8004cf4:	e00d      	b.n	8004d12 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cf6:	f7fe f881 	bl	8002dfc <HAL_RCC_GetSysClockFreq>
 8004cfa:	61f8      	str	r0, [r7, #28]
        break;
 8004cfc:	e009      	b.n	8004d12 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cfe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d02:	61fb      	str	r3, [r7, #28]
        break;
 8004d04:	e005      	b.n	8004d12 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004d06:	2300      	movs	r3, #0
 8004d08:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004d10:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	f000 80fb 	beq.w	8004f10 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	685a      	ldr	r2, [r3, #4]
 8004d1e:	4613      	mov	r3, r2
 8004d20:	005b      	lsls	r3, r3, #1
 8004d22:	4413      	add	r3, r2
 8004d24:	69fa      	ldr	r2, [r7, #28]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d305      	bcc.n	8004d36 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d30:	69fa      	ldr	r2, [r7, #28]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d903      	bls.n	8004d3e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004d3c:	e0e8      	b.n	8004f10 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	2200      	movs	r2, #0
 8004d42:	461c      	mov	r4, r3
 8004d44:	4615      	mov	r5, r2
 8004d46:	f04f 0200 	mov.w	r2, #0
 8004d4a:	f04f 0300 	mov.w	r3, #0
 8004d4e:	022b      	lsls	r3, r5, #8
 8004d50:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004d54:	0222      	lsls	r2, r4, #8
 8004d56:	68f9      	ldr	r1, [r7, #12]
 8004d58:	6849      	ldr	r1, [r1, #4]
 8004d5a:	0849      	lsrs	r1, r1, #1
 8004d5c:	2000      	movs	r0, #0
 8004d5e:	4688      	mov	r8, r1
 8004d60:	4681      	mov	r9, r0
 8004d62:	eb12 0a08 	adds.w	sl, r2, r8
 8004d66:	eb43 0b09 	adc.w	fp, r3, r9
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	603b      	str	r3, [r7, #0]
 8004d72:	607a      	str	r2, [r7, #4]
 8004d74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d78:	4650      	mov	r0, sl
 8004d7a:	4659      	mov	r1, fp
 8004d7c:	f7fb ff14 	bl	8000ba8 <__aeabi_uldivmod>
 8004d80:	4602      	mov	r2, r0
 8004d82:	460b      	mov	r3, r1
 8004d84:	4613      	mov	r3, r2
 8004d86:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004d88:	69bb      	ldr	r3, [r7, #24]
 8004d8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d8e:	d308      	bcc.n	8004da2 <UART_SetConfig+0x3de>
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d96:	d204      	bcs.n	8004da2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	69ba      	ldr	r2, [r7, #24]
 8004d9e:	60da      	str	r2, [r3, #12]
 8004da0:	e0b6      	b.n	8004f10 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004da8:	e0b2      	b.n	8004f10 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	69db      	ldr	r3, [r3, #28]
 8004dae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004db2:	d15e      	bne.n	8004e72 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004db4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004db8:	2b08      	cmp	r3, #8
 8004dba:	d828      	bhi.n	8004e0e <UART_SetConfig+0x44a>
 8004dbc:	a201      	add	r2, pc, #4	@ (adr r2, 8004dc4 <UART_SetConfig+0x400>)
 8004dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dc2:	bf00      	nop
 8004dc4:	08004de9 	.word	0x08004de9
 8004dc8:	08004df1 	.word	0x08004df1
 8004dcc:	08004df9 	.word	0x08004df9
 8004dd0:	08004e0f 	.word	0x08004e0f
 8004dd4:	08004dff 	.word	0x08004dff
 8004dd8:	08004e0f 	.word	0x08004e0f
 8004ddc:	08004e0f 	.word	0x08004e0f
 8004de0:	08004e0f 	.word	0x08004e0f
 8004de4:	08004e07 	.word	0x08004e07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004de8:	f7fe f8a0 	bl	8002f2c <HAL_RCC_GetPCLK1Freq>
 8004dec:	61f8      	str	r0, [r7, #28]
        break;
 8004dee:	e014      	b.n	8004e1a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004df0:	f7fe f8b2 	bl	8002f58 <HAL_RCC_GetPCLK2Freq>
 8004df4:	61f8      	str	r0, [r7, #28]
        break;
 8004df6:	e010      	b.n	8004e1a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004df8:	4b4d      	ldr	r3, [pc, #308]	@ (8004f30 <UART_SetConfig+0x56c>)
 8004dfa:	61fb      	str	r3, [r7, #28]
        break;
 8004dfc:	e00d      	b.n	8004e1a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dfe:	f7fd fffd 	bl	8002dfc <HAL_RCC_GetSysClockFreq>
 8004e02:	61f8      	str	r0, [r7, #28]
        break;
 8004e04:	e009      	b.n	8004e1a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e0a:	61fb      	str	r3, [r7, #28]
        break;
 8004e0c:	e005      	b.n	8004e1a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004e18:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d077      	beq.n	8004f10 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	005a      	lsls	r2, r3, #1
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	085b      	lsrs	r3, r3, #1
 8004e2a:	441a      	add	r2, r3
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e34:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e36:	69bb      	ldr	r3, [r7, #24]
 8004e38:	2b0f      	cmp	r3, #15
 8004e3a:	d916      	bls.n	8004e6a <UART_SetConfig+0x4a6>
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e42:	d212      	bcs.n	8004e6a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	f023 030f 	bic.w	r3, r3, #15
 8004e4c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	085b      	lsrs	r3, r3, #1
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	f003 0307 	and.w	r3, r3, #7
 8004e58:	b29a      	uxth	r2, r3
 8004e5a:	8afb      	ldrh	r3, [r7, #22]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	8afa      	ldrh	r2, [r7, #22]
 8004e66:	60da      	str	r2, [r3, #12]
 8004e68:	e052      	b.n	8004f10 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004e70:	e04e      	b.n	8004f10 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e72:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004e76:	2b08      	cmp	r3, #8
 8004e78:	d827      	bhi.n	8004eca <UART_SetConfig+0x506>
 8004e7a:	a201      	add	r2, pc, #4	@ (adr r2, 8004e80 <UART_SetConfig+0x4bc>)
 8004e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e80:	08004ea5 	.word	0x08004ea5
 8004e84:	08004ead 	.word	0x08004ead
 8004e88:	08004eb5 	.word	0x08004eb5
 8004e8c:	08004ecb 	.word	0x08004ecb
 8004e90:	08004ebb 	.word	0x08004ebb
 8004e94:	08004ecb 	.word	0x08004ecb
 8004e98:	08004ecb 	.word	0x08004ecb
 8004e9c:	08004ecb 	.word	0x08004ecb
 8004ea0:	08004ec3 	.word	0x08004ec3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ea4:	f7fe f842 	bl	8002f2c <HAL_RCC_GetPCLK1Freq>
 8004ea8:	61f8      	str	r0, [r7, #28]
        break;
 8004eaa:	e014      	b.n	8004ed6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004eac:	f7fe f854 	bl	8002f58 <HAL_RCC_GetPCLK2Freq>
 8004eb0:	61f8      	str	r0, [r7, #28]
        break;
 8004eb2:	e010      	b.n	8004ed6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004eb4:	4b1e      	ldr	r3, [pc, #120]	@ (8004f30 <UART_SetConfig+0x56c>)
 8004eb6:	61fb      	str	r3, [r7, #28]
        break;
 8004eb8:	e00d      	b.n	8004ed6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004eba:	f7fd ff9f 	bl	8002dfc <HAL_RCC_GetSysClockFreq>
 8004ebe:	61f8      	str	r0, [r7, #28]
        break;
 8004ec0:	e009      	b.n	8004ed6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ec2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ec6:	61fb      	str	r3, [r7, #28]
        break;
 8004ec8:	e005      	b.n	8004ed6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004ed4:	bf00      	nop
    }

    if (pclk != 0U)
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d019      	beq.n	8004f10 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	085a      	lsrs	r2, r3, #1
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	441a      	add	r2, r3
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eee:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	2b0f      	cmp	r3, #15
 8004ef4:	d909      	bls.n	8004f0a <UART_SetConfig+0x546>
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004efc:	d205      	bcs.n	8004f0a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	b29a      	uxth	r2, r3
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	60da      	str	r2, [r3, #12]
 8004f08:	e002      	b.n	8004f10 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2200      	movs	r2, #0
 8004f14:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004f1c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3728      	adds	r7, #40	@ 0x28
 8004f24:	46bd      	mov	sp, r7
 8004f26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f2a:	bf00      	nop
 8004f2c:	40008000 	.word	0x40008000
 8004f30:	00f42400 	.word	0x00f42400

08004f34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f40:	f003 0308 	and.w	r3, r3, #8
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d00a      	beq.n	8004f5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	430a      	orrs	r2, r1
 8004f5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f62:	f003 0301 	and.w	r3, r3, #1
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00a      	beq.n	8004f80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	430a      	orrs	r2, r1
 8004f7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f84:	f003 0302 	and.w	r3, r3, #2
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d00a      	beq.n	8004fa2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	430a      	orrs	r2, r1
 8004fa0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fa6:	f003 0304 	and.w	r3, r3, #4
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00a      	beq.n	8004fc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	430a      	orrs	r2, r1
 8004fc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fc8:	f003 0310 	and.w	r3, r3, #16
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d00a      	beq.n	8004fe6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	430a      	orrs	r2, r1
 8004fe4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fea:	f003 0320 	and.w	r3, r3, #32
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00a      	beq.n	8005008 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	430a      	orrs	r2, r1
 8005006:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800500c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005010:	2b00      	cmp	r3, #0
 8005012:	d01a      	beq.n	800504a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	430a      	orrs	r2, r1
 8005028:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800502e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005032:	d10a      	bne.n	800504a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	430a      	orrs	r2, r1
 8005048:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800504e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005052:	2b00      	cmp	r3, #0
 8005054:	d00a      	beq.n	800506c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	430a      	orrs	r2, r1
 800506a:	605a      	str	r2, [r3, #4]
  }
}
 800506c:	bf00      	nop
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b098      	sub	sp, #96	@ 0x60
 800507c:	af02      	add	r7, sp, #8
 800507e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005088:	f7fc fdae 	bl	8001be8 <HAL_GetTick>
 800508c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 0308 	and.w	r3, r3, #8
 8005098:	2b08      	cmp	r3, #8
 800509a:	d12e      	bne.n	80050fa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800509c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80050a0:	9300      	str	r3, [sp, #0]
 80050a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050a4:	2200      	movs	r2, #0
 80050a6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 f88c 	bl	80051c8 <UART_WaitOnFlagUntilTimeout>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d021      	beq.n	80050fa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050be:	e853 3f00 	ldrex	r3, [r3]
 80050c2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80050c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	461a      	mov	r2, r3
 80050d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80050d6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80050da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80050dc:	e841 2300 	strex	r3, r2, [r1]
 80050e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80050e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d1e6      	bne.n	80050b6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2220      	movs	r2, #32
 80050ec:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e062      	b.n	80051c0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0304 	and.w	r3, r3, #4
 8005104:	2b04      	cmp	r3, #4
 8005106:	d149      	bne.n	800519c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005108:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800510c:	9300      	str	r3, [sp, #0]
 800510e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005110:	2200      	movs	r2, #0
 8005112:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f000 f856 	bl	80051c8 <UART_WaitOnFlagUntilTimeout>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d03c      	beq.n	800519c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800512a:	e853 3f00 	ldrex	r3, [r3]
 800512e:	623b      	str	r3, [r7, #32]
   return(result);
 8005130:	6a3b      	ldr	r3, [r7, #32]
 8005132:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005136:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	461a      	mov	r2, r3
 800513e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005140:	633b      	str	r3, [r7, #48]	@ 0x30
 8005142:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005144:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005146:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005148:	e841 2300 	strex	r3, r2, [r1]
 800514c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800514e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005150:	2b00      	cmp	r3, #0
 8005152:	d1e6      	bne.n	8005122 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	3308      	adds	r3, #8
 800515a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	e853 3f00 	ldrex	r3, [r3]
 8005162:	60fb      	str	r3, [r7, #12]
   return(result);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f023 0301 	bic.w	r3, r3, #1
 800516a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	3308      	adds	r3, #8
 8005172:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005174:	61fa      	str	r2, [r7, #28]
 8005176:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005178:	69b9      	ldr	r1, [r7, #24]
 800517a:	69fa      	ldr	r2, [r7, #28]
 800517c:	e841 2300 	strex	r3, r2, [r1]
 8005180:	617b      	str	r3, [r7, #20]
   return(result);
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d1e5      	bne.n	8005154 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2220      	movs	r2, #32
 800518c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005198:	2303      	movs	r3, #3
 800519a:	e011      	b.n	80051c0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2220      	movs	r2, #32
 80051a0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2220      	movs	r2, #32
 80051a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80051be:	2300      	movs	r3, #0
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3758      	adds	r7, #88	@ 0x58
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	603b      	str	r3, [r7, #0]
 80051d4:	4613      	mov	r3, r2
 80051d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051d8:	e04f      	b.n	800527a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051e0:	d04b      	beq.n	800527a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051e2:	f7fc fd01 	bl	8001be8 <HAL_GetTick>
 80051e6:	4602      	mov	r2, r0
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	69ba      	ldr	r2, [r7, #24]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d302      	bcc.n	80051f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d101      	bne.n	80051fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80051f8:	2303      	movs	r3, #3
 80051fa:	e04e      	b.n	800529a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 0304 	and.w	r3, r3, #4
 8005206:	2b00      	cmp	r3, #0
 8005208:	d037      	beq.n	800527a <UART_WaitOnFlagUntilTimeout+0xb2>
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	2b80      	cmp	r3, #128	@ 0x80
 800520e:	d034      	beq.n	800527a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	2b40      	cmp	r3, #64	@ 0x40
 8005214:	d031      	beq.n	800527a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	69db      	ldr	r3, [r3, #28]
 800521c:	f003 0308 	and.w	r3, r3, #8
 8005220:	2b08      	cmp	r3, #8
 8005222:	d110      	bne.n	8005246 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2208      	movs	r2, #8
 800522a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800522c:	68f8      	ldr	r0, [r7, #12]
 800522e:	f000 f838 	bl	80052a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2208      	movs	r2, #8
 8005236:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e029      	b.n	800529a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	69db      	ldr	r3, [r3, #28]
 800524c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005250:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005254:	d111      	bne.n	800527a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800525e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005260:	68f8      	ldr	r0, [r7, #12]
 8005262:	f000 f81e 	bl	80052a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2220      	movs	r2, #32
 800526a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2200      	movs	r2, #0
 8005272:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e00f      	b.n	800529a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	69da      	ldr	r2, [r3, #28]
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	4013      	ands	r3, r2
 8005284:	68ba      	ldr	r2, [r7, #8]
 8005286:	429a      	cmp	r2, r3
 8005288:	bf0c      	ite	eq
 800528a:	2301      	moveq	r3, #1
 800528c:	2300      	movne	r3, #0
 800528e:	b2db      	uxtb	r3, r3
 8005290:	461a      	mov	r2, r3
 8005292:	79fb      	ldrb	r3, [r7, #7]
 8005294:	429a      	cmp	r2, r3
 8005296:	d0a0      	beq.n	80051da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	3710      	adds	r7, #16
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}

080052a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052a2:	b480      	push	{r7}
 80052a4:	b095      	sub	sp, #84	@ 0x54
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052b2:	e853 3f00 	ldrex	r3, [r3]
 80052b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80052b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	461a      	mov	r2, r3
 80052c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80052ca:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80052ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80052d0:	e841 2300 	strex	r3, r2, [r1]
 80052d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80052d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d1e6      	bne.n	80052aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	3308      	adds	r3, #8
 80052e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e4:	6a3b      	ldr	r3, [r7, #32]
 80052e6:	e853 3f00 	ldrex	r3, [r3]
 80052ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	f023 0301 	bic.w	r3, r3, #1
 80052f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	3308      	adds	r3, #8
 80052fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80052fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80052fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005300:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005302:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005304:	e841 2300 	strex	r3, r2, [r1]
 8005308:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800530a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800530c:	2b00      	cmp	r3, #0
 800530e:	d1e5      	bne.n	80052dc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005314:	2b01      	cmp	r3, #1
 8005316:	d118      	bne.n	800534a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	e853 3f00 	ldrex	r3, [r3]
 8005324:	60bb      	str	r3, [r7, #8]
   return(result);
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	f023 0310 	bic.w	r3, r3, #16
 800532c:	647b      	str	r3, [r7, #68]	@ 0x44
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	461a      	mov	r2, r3
 8005334:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005336:	61bb      	str	r3, [r7, #24]
 8005338:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533a:	6979      	ldr	r1, [r7, #20]
 800533c:	69ba      	ldr	r2, [r7, #24]
 800533e:	e841 2300 	strex	r3, r2, [r1]
 8005342:	613b      	str	r3, [r7, #16]
   return(result);
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d1e6      	bne.n	8005318 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2220      	movs	r2, #32
 800534e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800535e:	bf00      	nop
 8005360:	3754      	adds	r7, #84	@ 0x54
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr
	...

0800536c <ai_model_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool ai_model_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_ai_model_activations_map, 1, params)) {
 8005376:	683a      	ldr	r2, [r7, #0]
 8005378:	2101      	movs	r1, #1
 800537a:	4859      	ldr	r0, [pc, #356]	@ (80054e0 <ai_model_configure_activations+0x174>)
 800537c:	f000 fb9a 	bl	8005ab4 <ai_platform_get_activations_map>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	f000 80a2 	beq.w	80054cc <ai_model_configure_activations+0x160>
    /* Updating activations (byte) offsets */
    
    accelerometer_data_output_array.data = AI_PTR(g_ai_model_activations_map[0] + 768);
 8005388:	4b55      	ldr	r3, [pc, #340]	@ (80054e0 <ai_model_configure_activations+0x174>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8005390:	4a54      	ldr	r2, [pc, #336]	@ (80054e4 <ai_model_configure_activations+0x178>)
 8005392:	6093      	str	r3, [r2, #8]
    accelerometer_data_output_array.data_start = AI_PTR(g_ai_model_activations_map[0] + 768);
 8005394:	4b52      	ldr	r3, [pc, #328]	@ (80054e0 <ai_model_configure_activations+0x174>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800539c:	4a51      	ldr	r2, [pc, #324]	@ (80054e4 <ai_model_configure_activations+0x178>)
 800539e:	60d3      	str	r3, [r2, #12]
    accelerometer_data_Transpose_output_array.data = AI_PTR(g_ai_model_activations_map[0] + 1728);
 80053a0:	4b4f      	ldr	r3, [pc, #316]	@ (80054e0 <ai_model_configure_activations+0x174>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f503 63d8 	add.w	r3, r3, #1728	@ 0x6c0
 80053a8:	4a4f      	ldr	r2, [pc, #316]	@ (80054e8 <ai_model_configure_activations+0x17c>)
 80053aa:	6093      	str	r3, [r2, #8]
    accelerometer_data_Transpose_output_array.data_start = AI_PTR(g_ai_model_activations_map[0] + 1728);
 80053ac:	4b4c      	ldr	r3, [pc, #304]	@ (80054e0 <ai_model_configure_activations+0x174>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f503 63d8 	add.w	r3, r3, #1728	@ 0x6c0
 80053b4:	4a4c      	ldr	r2, [pc, #304]	@ (80054e8 <ai_model_configure_activations+0x17c>)
 80053b6:	60d3      	str	r3, [r2, #12]
    _conv1_Conv_output_0_scratch0_array.data = AI_PTR(g_ai_model_activations_map[0] + 768);
 80053b8:	4b49      	ldr	r3, [pc, #292]	@ (80054e0 <ai_model_configure_activations+0x174>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80053c0:	4a4a      	ldr	r2, [pc, #296]	@ (80054ec <ai_model_configure_activations+0x180>)
 80053c2:	6093      	str	r3, [r2, #8]
    _conv1_Conv_output_0_scratch0_array.data_start = AI_PTR(g_ai_model_activations_map[0] + 768);
 80053c4:	4b46      	ldr	r3, [pc, #280]	@ (80054e0 <ai_model_configure_activations+0x174>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80053cc:	4a47      	ldr	r2, [pc, #284]	@ (80054ec <ai_model_configure_activations+0x180>)
 80053ce:	60d3      	str	r3, [r2, #12]
    _conv1_Conv_output_0_scratch1_array.data = AI_PTR(g_ai_model_activations_map[0] + 804);
 80053d0:	4b43      	ldr	r3, [pc, #268]	@ (80054e0 <ai_model_configure_activations+0x174>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 80053d8:	4a45      	ldr	r2, [pc, #276]	@ (80054f0 <ai_model_configure_activations+0x184>)
 80053da:	6093      	str	r3, [r2, #8]
    _conv1_Conv_output_0_scratch1_array.data_start = AI_PTR(g_ai_model_activations_map[0] + 804);
 80053dc:	4b40      	ldr	r3, [pc, #256]	@ (80054e0 <ai_model_configure_activations+0x174>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 80053e4:	4a42      	ldr	r2, [pc, #264]	@ (80054f0 <ai_model_configure_activations+0x184>)
 80053e6:	60d3      	str	r3, [r2, #12]
    _conv1_Conv_output_0_output_array.data = AI_PTR(g_ai_model_activations_map[0] + 2688);
 80053e8:	4b3d      	ldr	r3, [pc, #244]	@ (80054e0 <ai_model_configure_activations+0x174>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f503 6328 	add.w	r3, r3, #2688	@ 0xa80
 80053f0:	4a40      	ldr	r2, [pc, #256]	@ (80054f4 <ai_model_configure_activations+0x188>)
 80053f2:	6093      	str	r3, [r2, #8]
    _conv1_Conv_output_0_output_array.data_start = AI_PTR(g_ai_model_activations_map[0] + 2688);
 80053f4:	4b3a      	ldr	r3, [pc, #232]	@ (80054e0 <ai_model_configure_activations+0x174>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f503 6328 	add.w	r3, r3, #2688	@ 0xa80
 80053fc:	4a3d      	ldr	r2, [pc, #244]	@ (80054f4 <ai_model_configure_activations+0x188>)
 80053fe:	60d3      	str	r3, [r2, #12]
    _conv2_Conv_output_0_scratch0_array.data = AI_PTR(g_ai_model_activations_map[0] + 768);
 8005400:	4b37      	ldr	r3, [pc, #220]	@ (80054e0 <ai_model_configure_activations+0x174>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8005408:	4a3b      	ldr	r2, [pc, #236]	@ (80054f8 <ai_model_configure_activations+0x18c>)
 800540a:	6093      	str	r3, [r2, #8]
    _conv2_Conv_output_0_scratch0_array.data_start = AI_PTR(g_ai_model_activations_map[0] + 768);
 800540c:	4b34      	ldr	r3, [pc, #208]	@ (80054e0 <ai_model_configure_activations+0x174>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8005414:	4a38      	ldr	r2, [pc, #224]	@ (80054f8 <ai_model_configure_activations+0x18c>)
 8005416:	60d3      	str	r3, [r2, #12]
    _conv2_Conv_output_0_scratch1_array.data = AI_PTR(g_ai_model_activations_map[0] + 1152);
 8005418:	4b31      	ldr	r3, [pc, #196]	@ (80054e0 <ai_model_configure_activations+0x174>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 8005420:	4a36      	ldr	r2, [pc, #216]	@ (80054fc <ai_model_configure_activations+0x190>)
 8005422:	6093      	str	r3, [r2, #8]
    _conv2_Conv_output_0_scratch1_array.data_start = AI_PTR(g_ai_model_activations_map[0] + 1152);
 8005424:	4b2e      	ldr	r3, [pc, #184]	@ (80054e0 <ai_model_configure_activations+0x174>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 800542c:	4a33      	ldr	r2, [pc, #204]	@ (80054fc <ai_model_configure_activations+0x190>)
 800542e:	60d3      	str	r3, [r2, #12]
    _conv2_Conv_output_0_output_array.data = AI_PTR(g_ai_model_activations_map[0] + 1792);
 8005430:	4b2b      	ldr	r3, [pc, #172]	@ (80054e0 <ai_model_configure_activations+0x174>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f503 63e0 	add.w	r3, r3, #1792	@ 0x700
 8005438:	4a31      	ldr	r2, [pc, #196]	@ (8005500 <ai_model_configure_activations+0x194>)
 800543a:	6093      	str	r3, [r2, #8]
    _conv2_Conv_output_0_output_array.data_start = AI_PTR(g_ai_model_activations_map[0] + 1792);
 800543c:	4b28      	ldr	r3, [pc, #160]	@ (80054e0 <ai_model_configure_activations+0x174>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f503 63e0 	add.w	r3, r3, #1792	@ 0x700
 8005444:	4a2e      	ldr	r2, [pc, #184]	@ (8005500 <ai_model_configure_activations+0x194>)
 8005446:	60d3      	str	r3, [r2, #12]
    _conv3_Conv_output_0_scratch0_array.data = AI_PTR(g_ai_model_activations_map[0] + 6912);
 8005448:	4b25      	ldr	r3, [pc, #148]	@ (80054e0 <ai_model_configure_activations+0x174>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f503 53d8 	add.w	r3, r3, #6912	@ 0x1b00
 8005450:	4a2c      	ldr	r2, [pc, #176]	@ (8005504 <ai_model_configure_activations+0x198>)
 8005452:	6093      	str	r3, [r2, #8]
    _conv3_Conv_output_0_scratch0_array.data_start = AI_PTR(g_ai_model_activations_map[0] + 6912);
 8005454:	4b22      	ldr	r3, [pc, #136]	@ (80054e0 <ai_model_configure_activations+0x174>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f503 53d8 	add.w	r3, r3, #6912	@ 0x1b00
 800545c:	4a29      	ldr	r2, [pc, #164]	@ (8005504 <ai_model_configure_activations+0x198>)
 800545e:	60d3      	str	r3, [r2, #12]
    _conv3_Conv_output_0_scratch1_array.data = AI_PTR(g_ai_model_activations_map[0] + 7680);
 8005460:	4b1f      	ldr	r3, [pc, #124]	@ (80054e0 <ai_model_configure_activations+0x174>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 8005468:	4a27      	ldr	r2, [pc, #156]	@ (8005508 <ai_model_configure_activations+0x19c>)
 800546a:	6093      	str	r3, [r2, #8]
    _conv3_Conv_output_0_scratch1_array.data_start = AI_PTR(g_ai_model_activations_map[0] + 7680);
 800546c:	4b1c      	ldr	r3, [pc, #112]	@ (80054e0 <ai_model_configure_activations+0x174>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 8005474:	4a24      	ldr	r2, [pc, #144]	@ (8005508 <ai_model_configure_activations+0x19c>)
 8005476:	60d3      	str	r3, [r2, #12]
    _conv3_Conv_output_0_output_array.data = AI_PTR(g_ai_model_activations_map[0] + 0);
 8005478:	4b19      	ldr	r3, [pc, #100]	@ (80054e0 <ai_model_configure_activations+0x174>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a23      	ldr	r2, [pc, #140]	@ (800550c <ai_model_configure_activations+0x1a0>)
 800547e:	6093      	str	r3, [r2, #8]
    _conv3_Conv_output_0_output_array.data_start = AI_PTR(g_ai_model_activations_map[0] + 0);
 8005480:	4b17      	ldr	r3, [pc, #92]	@ (80054e0 <ai_model_configure_activations+0x174>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a21      	ldr	r2, [pc, #132]	@ (800550c <ai_model_configure_activations+0x1a0>)
 8005486:	60d3      	str	r3, [r2, #12]
    _fc1_Gemm_output_0_output_array.data = AI_PTR(g_ai_model_activations_map[0] + 5120);
 8005488:	4b15      	ldr	r3, [pc, #84]	@ (80054e0 <ai_model_configure_activations+0x174>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f503 53a0 	add.w	r3, r3, #5120	@ 0x1400
 8005490:	4a1f      	ldr	r2, [pc, #124]	@ (8005510 <ai_model_configure_activations+0x1a4>)
 8005492:	6093      	str	r3, [r2, #8]
    _fc1_Gemm_output_0_output_array.data_start = AI_PTR(g_ai_model_activations_map[0] + 5120);
 8005494:	4b12      	ldr	r3, [pc, #72]	@ (80054e0 <ai_model_configure_activations+0x174>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f503 53a0 	add.w	r3, r3, #5120	@ 0x1400
 800549c:	4a1c      	ldr	r2, [pc, #112]	@ (8005510 <ai_model_configure_activations+0x1a4>)
 800549e:	60d3      	str	r3, [r2, #12]
    _relu_3_Relu_output_0_output_array.data = AI_PTR(g_ai_model_activations_map[0] + 0);
 80054a0:	4b0f      	ldr	r3, [pc, #60]	@ (80054e0 <ai_model_configure_activations+0x174>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a1b      	ldr	r2, [pc, #108]	@ (8005514 <ai_model_configure_activations+0x1a8>)
 80054a6:	6093      	str	r3, [r2, #8]
    _relu_3_Relu_output_0_output_array.data_start = AI_PTR(g_ai_model_activations_map[0] + 0);
 80054a8:	4b0d      	ldr	r3, [pc, #52]	@ (80054e0 <ai_model_configure_activations+0x174>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a19      	ldr	r2, [pc, #100]	@ (8005514 <ai_model_configure_activations+0x1a8>)
 80054ae:	60d3      	str	r3, [r2, #12]
    gesture_prediction_output_array.data = AI_PTR(g_ai_model_activations_map[0] + 256);
 80054b0:	4b0b      	ldr	r3, [pc, #44]	@ (80054e0 <ai_model_configure_activations+0x174>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80054b8:	4a17      	ldr	r2, [pc, #92]	@ (8005518 <ai_model_configure_activations+0x1ac>)
 80054ba:	6093      	str	r3, [r2, #8]
    gesture_prediction_output_array.data_start = AI_PTR(g_ai_model_activations_map[0] + 256);
 80054bc:	4b08      	ldr	r3, [pc, #32]	@ (80054e0 <ai_model_configure_activations+0x174>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80054c4:	4a14      	ldr	r2, [pc, #80]	@ (8005518 <ai_model_configure_activations+0x1ac>)
 80054c6:	60d3      	str	r3, [r2, #12]
    return true;
 80054c8:	2301      	movs	r3, #1
 80054ca:	e005      	b.n	80054d8 <ai_model_configure_activations+0x16c>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 80054cc:	2213      	movs	r2, #19
 80054ce:	2130      	movs	r1, #48	@ 0x30
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f000 fb71 	bl	8005bb8 <ai_platform_network_set_error>
  return false;
 80054d6:	2300      	movs	r3, #0
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3708      	adds	r7, #8
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	20001374 	.word	0x20001374
 80054e4:	2000000c 	.word	0x2000000c
 80054e8:	2000001c 	.word	0x2000001c
 80054ec:	2000012c 	.word	0x2000012c
 80054f0:	2000013c 	.word	0x2000013c
 80054f4:	2000002c 	.word	0x2000002c
 80054f8:	2000014c 	.word	0x2000014c
 80054fc:	2000015c 	.word	0x2000015c
 8005500:	2000003c 	.word	0x2000003c
 8005504:	2000016c 	.word	0x2000016c
 8005508:	2000017c 	.word	0x2000017c
 800550c:	2000004c 	.word	0x2000004c
 8005510:	2000005c 	.word	0x2000005c
 8005514:	2000006c 	.word	0x2000006c
 8005518:	2000007c 	.word	0x2000007c

0800551c <ai_model_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool ai_model_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b082      	sub	sp, #8
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_ai_model_weights_map, 1, params)) {
 8005526:	683a      	ldr	r2, [r7, #0]
 8005528:	2101      	movs	r1, #1
 800552a:	4865      	ldr	r0, [pc, #404]	@ (80056c0 <ai_model_configure_weights+0x1a4>)
 800552c:	f000 fa70 	bl	8005a10 <ai_platform_get_weights_map>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	f000 80ba 	beq.w	80056ac <ai_model_configure_weights+0x190>
    /* Updating weights (byte) offsets */
    
    _conv1_Conv_output_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8005538:	4b62      	ldr	r3, [pc, #392]	@ (80056c4 <ai_model_configure_weights+0x1a8>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005540:	4a60      	ldr	r2, [pc, #384]	@ (80056c4 <ai_model_configure_weights+0x1a8>)
 8005542:	6013      	str	r3, [r2, #0]
    _conv1_Conv_output_0_weights_array.data = AI_PTR(g_ai_model_weights_map[0] + 0);
 8005544:	4b5e      	ldr	r3, [pc, #376]	@ (80056c0 <ai_model_configure_weights+0x1a4>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a5e      	ldr	r2, [pc, #376]	@ (80056c4 <ai_model_configure_weights+0x1a8>)
 800554a:	6093      	str	r3, [r2, #8]
    _conv1_Conv_output_0_weights_array.data_start = AI_PTR(g_ai_model_weights_map[0] + 0);
 800554c:	4b5c      	ldr	r3, [pc, #368]	@ (80056c0 <ai_model_configure_weights+0x1a4>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a5c      	ldr	r2, [pc, #368]	@ (80056c4 <ai_model_configure_weights+0x1a8>)
 8005552:	60d3      	str	r3, [r2, #12]
    _conv1_Conv_output_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8005554:	4b5c      	ldr	r3, [pc, #368]	@ (80056c8 <ai_model_configure_weights+0x1ac>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800555c:	4a5a      	ldr	r2, [pc, #360]	@ (80056c8 <ai_model_configure_weights+0x1ac>)
 800555e:	6013      	str	r3, [r2, #0]
    _conv1_Conv_output_0_bias_array.data = AI_PTR(g_ai_model_weights_map[0] + 1152);
 8005560:	4b57      	ldr	r3, [pc, #348]	@ (80056c0 <ai_model_configure_weights+0x1a4>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 8005568:	4a57      	ldr	r2, [pc, #348]	@ (80056c8 <ai_model_configure_weights+0x1ac>)
 800556a:	6093      	str	r3, [r2, #8]
    _conv1_Conv_output_0_bias_array.data_start = AI_PTR(g_ai_model_weights_map[0] + 1152);
 800556c:	4b54      	ldr	r3, [pc, #336]	@ (80056c0 <ai_model_configure_weights+0x1a4>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 8005574:	4a54      	ldr	r2, [pc, #336]	@ (80056c8 <ai_model_configure_weights+0x1ac>)
 8005576:	60d3      	str	r3, [r2, #12]
    _conv2_Conv_output_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8005578:	4b54      	ldr	r3, [pc, #336]	@ (80056cc <ai_model_configure_weights+0x1b0>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005580:	4a52      	ldr	r2, [pc, #328]	@ (80056cc <ai_model_configure_weights+0x1b0>)
 8005582:	6013      	str	r3, [r2, #0]
    _conv2_Conv_output_0_weights_array.data = AI_PTR(g_ai_model_weights_map[0] + 1280);
 8005584:	4b4e      	ldr	r3, [pc, #312]	@ (80056c0 <ai_model_configure_weights+0x1a4>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800558c:	4a4f      	ldr	r2, [pc, #316]	@ (80056cc <ai_model_configure_weights+0x1b0>)
 800558e:	6093      	str	r3, [r2, #8]
    _conv2_Conv_output_0_weights_array.data_start = AI_PTR(g_ai_model_weights_map[0] + 1280);
 8005590:	4b4b      	ldr	r3, [pc, #300]	@ (80056c0 <ai_model_configure_weights+0x1a4>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005598:	4a4c      	ldr	r2, [pc, #304]	@ (80056cc <ai_model_configure_weights+0x1b0>)
 800559a:	60d3      	str	r3, [r2, #12]
    _conv2_Conv_output_0_bias_array.format |= AI_FMT_FLAG_CONST;
 800559c:	4b4c      	ldr	r3, [pc, #304]	@ (80056d0 <ai_model_configure_weights+0x1b4>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80055a4:	4a4a      	ldr	r2, [pc, #296]	@ (80056d0 <ai_model_configure_weights+0x1b4>)
 80055a6:	6013      	str	r3, [r2, #0]
    _conv2_Conv_output_0_bias_array.data = AI_PTR(g_ai_model_weights_map[0] + 25856);
 80055a8:	4b45      	ldr	r3, [pc, #276]	@ (80056c0 <ai_model_configure_weights+0x1a4>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f503 43ca 	add.w	r3, r3, #25856	@ 0x6500
 80055b0:	4a47      	ldr	r2, [pc, #284]	@ (80056d0 <ai_model_configure_weights+0x1b4>)
 80055b2:	6093      	str	r3, [r2, #8]
    _conv2_Conv_output_0_bias_array.data_start = AI_PTR(g_ai_model_weights_map[0] + 25856);
 80055b4:	4b42      	ldr	r3, [pc, #264]	@ (80056c0 <ai_model_configure_weights+0x1a4>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f503 43ca 	add.w	r3, r3, #25856	@ 0x6500
 80055bc:	4a44      	ldr	r2, [pc, #272]	@ (80056d0 <ai_model_configure_weights+0x1b4>)
 80055be:	60d3      	str	r3, [r2, #12]
    _conv3_Conv_output_0_weights_array.format |= AI_FMT_FLAG_CONST;
 80055c0:	4b44      	ldr	r3, [pc, #272]	@ (80056d4 <ai_model_configure_weights+0x1b8>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80055c8:	4a42      	ldr	r2, [pc, #264]	@ (80056d4 <ai_model_configure_weights+0x1b8>)
 80055ca:	6013      	str	r3, [r2, #0]
    _conv3_Conv_output_0_weights_array.data = AI_PTR(g_ai_model_weights_map[0] + 26112);
 80055cc:	4b3c      	ldr	r3, [pc, #240]	@ (80056c0 <ai_model_configure_weights+0x1a4>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f503 43cc 	add.w	r3, r3, #26112	@ 0x6600
 80055d4:	4a3f      	ldr	r2, [pc, #252]	@ (80056d4 <ai_model_configure_weights+0x1b8>)
 80055d6:	6093      	str	r3, [r2, #8]
    _conv3_Conv_output_0_weights_array.data_start = AI_PTR(g_ai_model_weights_map[0] + 26112);
 80055d8:	4b39      	ldr	r3, [pc, #228]	@ (80056c0 <ai_model_configure_weights+0x1a4>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f503 43cc 	add.w	r3, r3, #26112	@ 0x6600
 80055e0:	4a3c      	ldr	r2, [pc, #240]	@ (80056d4 <ai_model_configure_weights+0x1b8>)
 80055e2:	60d3      	str	r3, [r2, #12]
    _conv3_Conv_output_0_bias_array.format |= AI_FMT_FLAG_CONST;
 80055e4:	4b3c      	ldr	r3, [pc, #240]	@ (80056d8 <ai_model_configure_weights+0x1bc>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80055ec:	4a3a      	ldr	r2, [pc, #232]	@ (80056d8 <ai_model_configure_weights+0x1bc>)
 80055ee:	6013      	str	r3, [r2, #0]
    _conv3_Conv_output_0_bias_array.data = AI_PTR(g_ai_model_weights_map[0] + 124416);
 80055f0:	4b33      	ldr	r3, [pc, #204]	@ (80056c0 <ai_model_configure_weights+0x1a4>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f503 33f3 	add.w	r3, r3, #124416	@ 0x1e600
 80055f8:	4a37      	ldr	r2, [pc, #220]	@ (80056d8 <ai_model_configure_weights+0x1bc>)
 80055fa:	6093      	str	r3, [r2, #8]
    _conv3_Conv_output_0_bias_array.data_start = AI_PTR(g_ai_model_weights_map[0] + 124416);
 80055fc:	4b30      	ldr	r3, [pc, #192]	@ (80056c0 <ai_model_configure_weights+0x1a4>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f503 33f3 	add.w	r3, r3, #124416	@ 0x1e600
 8005604:	4a34      	ldr	r2, [pc, #208]	@ (80056d8 <ai_model_configure_weights+0x1bc>)
 8005606:	60d3      	str	r3, [r2, #12]
    _fc1_Gemm_output_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8005608:	4b34      	ldr	r3, [pc, #208]	@ (80056dc <ai_model_configure_weights+0x1c0>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005610:	4a32      	ldr	r2, [pc, #200]	@ (80056dc <ai_model_configure_weights+0x1c0>)
 8005612:	6013      	str	r3, [r2, #0]
    _fc1_Gemm_output_0_weights_array.data = AI_PTR(g_ai_model_weights_map[0] + 124928);
 8005614:	4b2a      	ldr	r3, [pc, #168]	@ (80056c0 <ai_model_configure_weights+0x1a4>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f503 33f4 	add.w	r3, r3, #124928	@ 0x1e800
 800561c:	4a2f      	ldr	r2, [pc, #188]	@ (80056dc <ai_model_configure_weights+0x1c0>)
 800561e:	6093      	str	r3, [r2, #8]
    _fc1_Gemm_output_0_weights_array.data_start = AI_PTR(g_ai_model_weights_map[0] + 124928);
 8005620:	4b27      	ldr	r3, [pc, #156]	@ (80056c0 <ai_model_configure_weights+0x1a4>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f503 33f4 	add.w	r3, r3, #124928	@ 0x1e800
 8005628:	4a2c      	ldr	r2, [pc, #176]	@ (80056dc <ai_model_configure_weights+0x1c0>)
 800562a:	60d3      	str	r3, [r2, #12]
    _fc1_Gemm_output_0_bias_array.format |= AI_FMT_FLAG_CONST;
 800562c:	4b2c      	ldr	r3, [pc, #176]	@ (80056e0 <ai_model_configure_weights+0x1c4>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005634:	4a2a      	ldr	r2, [pc, #168]	@ (80056e0 <ai_model_configure_weights+0x1c4>)
 8005636:	6013      	str	r3, [r2, #0]
    _fc1_Gemm_output_0_bias_array.data = AI_PTR(g_ai_model_weights_map[0] + 452608);
 8005638:	4b21      	ldr	r3, [pc, #132]	@ (80056c0 <ai_model_configure_weights+0x1a4>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f503 23dd 	add.w	r3, r3, #452608	@ 0x6e800
 8005640:	4a27      	ldr	r2, [pc, #156]	@ (80056e0 <ai_model_configure_weights+0x1c4>)
 8005642:	6093      	str	r3, [r2, #8]
    _fc1_Gemm_output_0_bias_array.data_start = AI_PTR(g_ai_model_weights_map[0] + 452608);
 8005644:	4b1e      	ldr	r3, [pc, #120]	@ (80056c0 <ai_model_configure_weights+0x1a4>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f503 23dd 	add.w	r3, r3, #452608	@ 0x6e800
 800564c:	4a24      	ldr	r2, [pc, #144]	@ (80056e0 <ai_model_configure_weights+0x1c4>)
 800564e:	60d3      	str	r3, [r2, #12]
    gesture_prediction_weights_array.format |= AI_FMT_FLAG_CONST;
 8005650:	4b24      	ldr	r3, [pc, #144]	@ (80056e4 <ai_model_configure_weights+0x1c8>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005658:	4a22      	ldr	r2, [pc, #136]	@ (80056e4 <ai_model_configure_weights+0x1c8>)
 800565a:	6013      	str	r3, [r2, #0]
    gesture_prediction_weights_array.data = AI_PTR(g_ai_model_weights_map[0] + 452864);
 800565c:	4b18      	ldr	r3, [pc, #96]	@ (80056c0 <ai_model_configure_weights+0x1a4>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f503 23dd 	add.w	r3, r3, #452608	@ 0x6e800
 8005664:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005668:	4a1e      	ldr	r2, [pc, #120]	@ (80056e4 <ai_model_configure_weights+0x1c8>)
 800566a:	6093      	str	r3, [r2, #8]
    gesture_prediction_weights_array.data_start = AI_PTR(g_ai_model_weights_map[0] + 452864);
 800566c:	4b14      	ldr	r3, [pc, #80]	@ (80056c0 <ai_model_configure_weights+0x1a4>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f503 23dd 	add.w	r3, r3, #452608	@ 0x6e800
 8005674:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005678:	4a1a      	ldr	r2, [pc, #104]	@ (80056e4 <ai_model_configure_weights+0x1c8>)
 800567a:	60d3      	str	r3, [r2, #12]
    gesture_prediction_bias_array.format |= AI_FMT_FLAG_CONST;
 800567c:	4b1a      	ldr	r3, [pc, #104]	@ (80056e8 <ai_model_configure_weights+0x1cc>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005684:	4a18      	ldr	r2, [pc, #96]	@ (80056e8 <ai_model_configure_weights+0x1cc>)
 8005686:	6013      	str	r3, [r2, #0]
    gesture_prediction_bias_array.data = AI_PTR(g_ai_model_weights_map[0] + 454912);
 8005688:	4b0d      	ldr	r3, [pc, #52]	@ (80056c0 <ai_model_configure_weights+0x1a4>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f503 23de 	add.w	r3, r3, #454656	@ 0x6f000
 8005690:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005694:	4a14      	ldr	r2, [pc, #80]	@ (80056e8 <ai_model_configure_weights+0x1cc>)
 8005696:	6093      	str	r3, [r2, #8]
    gesture_prediction_bias_array.data_start = AI_PTR(g_ai_model_weights_map[0] + 454912);
 8005698:	4b09      	ldr	r3, [pc, #36]	@ (80056c0 <ai_model_configure_weights+0x1a4>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f503 23de 	add.w	r3, r3, #454656	@ 0x6f000
 80056a0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80056a4:	4a10      	ldr	r2, [pc, #64]	@ (80056e8 <ai_model_configure_weights+0x1cc>)
 80056a6:	60d3      	str	r3, [r2, #12]
    return true;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e005      	b.n	80056b8 <ai_model_configure_weights+0x19c>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 80056ac:	2212      	movs	r2, #18
 80056ae:	2130      	movs	r1, #48	@ 0x30
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f000 fa81 	bl	8005bb8 <ai_platform_network_set_error>
  return false;
 80056b6:	2300      	movs	r3, #0
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3708      	adds	r7, #8
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	20001378 	.word	0x20001378
 80056c4:	2000008c 	.word	0x2000008c
 80056c8:	2000009c 	.word	0x2000009c
 80056cc:	200000ac 	.word	0x200000ac
 80056d0:	200000bc 	.word	0x200000bc
 80056d4:	200000cc 	.word	0x200000cc
 80056d8:	200000dc 	.word	0x200000dc
 80056dc:	200000ec 	.word	0x200000ec
 80056e0:	200000fc 	.word	0x200000fc
 80056e4:	2000010c 	.word	0x2000010c
 80056e8:	2000011c 	.word	0x2000011c

080056ec <ai_ai_model_get_error>:
}


AI_API_ENTRY
ai_error ai_ai_model_get_error(ai_handle network)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b082      	sub	sp, #8
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f000 fa53 	bl	8005ba0 <ai_platform_network_get_error>
 80056fa:	4603      	mov	r3, r0
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3708      	adds	r7, #8
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}

08005704 <ai_ai_model_create>:


AI_API_ENTRY
ai_error ai_ai_model_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af02      	add	r7, sp, #8
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800570e:	2300      	movs	r3, #0
 8005710:	9301      	str	r3, [sp, #4]
 8005712:	2305      	movs	r3, #5
 8005714:	9300      	str	r3, [sp, #0]
 8005716:	2301      	movs	r3, #1
 8005718:	4a04      	ldr	r2, [pc, #16]	@ (800572c <ai_ai_model_create+0x28>)
 800571a:	6839      	ldr	r1, [r7, #0]
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f000 fb39 	bl	8005d94 <ai_platform_network_create>
 8005722:	4603      	mov	r3, r0
    network, network_config, 
    AI_CONTEXT_OBJ(&AI_NET_OBJ_INSTANCE),
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8005724:	4618      	mov	r0, r3
 8005726:	3708      	adds	r7, #8
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}
 800572c:	20000bb0 	.word	0x20000bb0

08005730 <ai_ai_model_create_and_init>:


AI_API_ENTRY
ai_error ai_ai_model_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b094      	sub	sp, #80	@ 0x50
 8005734:	af00      	add	r7, sp, #0
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	60b9      	str	r1, [r7, #8]
 800573a:	607a      	str	r2, [r7, #4]
  ai_error err;
  ai_network_params params;

  err = ai_ai_model_create(network, AI_AI_MODEL_DATA_CONFIG);
 800573c:	2100      	movs	r1, #0
 800573e:	68f8      	ldr	r0, [r7, #12]
 8005740:	f7ff ffe0 	bl	8005704 <ai_ai_model_create>
 8005744:	4603      	mov	r3, r0
 8005746:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (err.type != AI_ERROR_NONE) {
 8005748:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800574c:	2b00      	cmp	r3, #0
 800574e:	d001      	beq.n	8005754 <ai_ai_model_create_and_init+0x24>
    return err;
 8005750:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005752:	e067      	b.n	8005824 <ai_ai_model_create_and_init+0xf4>
  }
  
  if (ai_ai_model_data_params_get(&params) != true) {
 8005754:	f107 0310 	add.w	r3, r7, #16
 8005758:	4618      	mov	r0, r3
 800575a:	f000 f8e7 	bl	800592c <ai_ai_model_data_params_get>
 800575e:	4603      	mov	r3, r0
 8005760:	f083 0301 	eor.w	r3, r3, #1
 8005764:	b2db      	uxtb	r3, r3
 8005766:	2b00      	cmp	r3, #0
 8005768:	d008      	beq.n	800577c <ai_ai_model_create_and_init+0x4c>
    err = ai_ai_model_get_error(*network);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4618      	mov	r0, r3
 8005770:	f7ff ffbc 	bl	80056ec <ai_ai_model_get_error>
 8005774:	4603      	mov	r3, r0
 8005776:	64bb      	str	r3, [r7, #72]	@ 0x48
    return err;
 8005778:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800577a:	e053      	b.n	8005824 <ai_ai_model_create_and_init+0xf4>
  }
#if defined(AI_AI_MODEL_DATA_ACTIVATIONS_COUNT)
  /* set the addresses of the activations buffers */
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 800577c:	2300      	movs	r3, #0
 800577e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005782:	e012      	b.n	80057aa <ai_ai_model_create_and_init+0x7a>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8005784:	f8b7 104e 	ldrh.w	r1, [r7, #78]	@ 0x4e
 8005788:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	68ba      	ldr	r2, [r7, #8]
 8005790:	4413      	add	r3, r2
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	f107 0310 	add.w	r3, r7, #16
 8005798:	330c      	adds	r3, #12
 800579a:	4618      	mov	r0, r3
 800579c:	f000 f92a 	bl	80059f4 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 80057a0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80057a4:	3301      	adds	r3, #1
 80057a6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d004      	beq.n	80057ba <ai_ai_model_create_and_init+0x8a>
 80057b0:	8bfb      	ldrh	r3, [r7, #30]
 80057b2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d3e4      	bcc.n	8005784 <ai_ai_model_create_and_init+0x54>
  }
#endif
#if defined(AI_AI_MODEL_DATA_WEIGHTS_COUNT)
  /* set the addresses of the weight buffers */
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 80057ba:	2300      	movs	r3, #0
 80057bc:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80057c0:	e012      	b.n	80057e8 <ai_ai_model_create_and_init+0xb8>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 80057c2:	f8b7 104c 	ldrh.w	r1, [r7, #76]	@ 0x4c
 80057c6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	4413      	add	r3, r2
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	f107 0310 	add.w	r3, r7, #16
 80057d6:	3304      	adds	r3, #4
 80057d8:	4618      	mov	r0, r3
 80057da:	f000 f90b 	bl	80059f4 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 80057de:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80057e2:	3301      	adds	r3, #1
 80057e4:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d004      	beq.n	80057f8 <ai_ai_model_create_and_init+0xc8>
 80057ee:	8afb      	ldrh	r3, [r7, #22]
 80057f0:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d3e4      	bcc.n	80057c2 <ai_ai_model_create_and_init+0x92>
  }
#endif
  if (ai_ai_model_init(*network, &params) != true) {
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f107 0210 	add.w	r2, r7, #16
 8005800:	4611      	mov	r1, r2
 8005802:	4618      	mov	r0, r3
 8005804:	f000 f846 	bl	8005894 <ai_ai_model_init>
 8005808:	4603      	mov	r3, r0
 800580a:	f083 0301 	eor.w	r3, r3, #1
 800580e:	b2db      	uxtb	r3, r3
 8005810:	2b00      	cmp	r3, #0
 8005812:	d006      	beq.n	8005822 <ai_ai_model_create_and_init+0xf2>
    err = ai_ai_model_get_error(*network);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4618      	mov	r0, r3
 800581a:	f7ff ff67 	bl	80056ec <ai_ai_model_get_error>
 800581e:	4603      	mov	r3, r0
 8005820:	64bb      	str	r3, [r7, #72]	@ 0x48
  }
  return err;
 8005822:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005824:	4618      	mov	r0, r3
 8005826:	3750      	adds	r7, #80	@ 0x50
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <ai_ai_model_inputs_get>:


AI_API_ENTRY
ai_buffer* ai_ai_model_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b082      	sub	sp, #8
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d104      	bne.n	8005846 <ai_ai_model_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800583c:	4b06      	ldr	r3, [pc, #24]	@ (8005858 <ai_ai_model_inputs_get+0x2c>)
 800583e:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a06      	ldr	r2, [pc, #24]	@ (800585c <ai_ai_model_inputs_get+0x30>)
 8005844:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8005846:	6839      	ldr	r1, [r7, #0]
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f000 f9bb 	bl	8005bc4 <ai_platform_inputs_get>
 800584e:	4603      	mov	r3, r0
}
 8005850:	4618      	mov	r0, r3
 8005852:	3708      	adds	r7, #8
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}
 8005858:	20000bb0 	.word	0x20000bb0
 800585c:	a1c00100 	.word	0xa1c00100

08005860 <ai_ai_model_outputs_get>:


AI_API_ENTRY
ai_buffer* ai_ai_model_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b082      	sub	sp, #8
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d104      	bne.n	800587a <ai_ai_model_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8005870:	4b06      	ldr	r3, [pc, #24]	@ (800588c <ai_ai_model_outputs_get+0x2c>)
 8005872:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	4a06      	ldr	r2, [pc, #24]	@ (8005890 <ai_ai_model_outputs_get+0x30>)
 8005878:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 800587a:	6839      	ldr	r1, [r7, #0]
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f000 fa17 	bl	8005cb0 <ai_platform_outputs_get>
 8005882:	4603      	mov	r3, r0
}
 8005884:	4618      	mov	r0, r3
 8005886:	3708      	adds	r7, #8
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}
 800588c:	20000bb0 	.word	0x20000bb0
 8005890:	a1c00100 	.word	0xa1c00100

08005894 <ai_ai_model_init>:


AI_API_ENTRY
ai_bool ai_ai_model_init(
  ai_handle network, const ai_network_params* params)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 800589e:	6839      	ldr	r1, [r7, #0]
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f000 fab9 	bl	8005e18 <ai_platform_network_init>
 80058a6:	60f8      	str	r0, [r7, #12]
  ai_bool ok = true;
 80058a8:	2301      	movs	r3, #1
 80058aa:	72fb      	strb	r3, [r7, #11]

  if (!net_ctx) return false;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d101      	bne.n	80058b6 <ai_ai_model_init+0x22>
 80058b2:	2300      	movs	r3, #0
 80058b4:	e026      	b.n	8005904 <ai_ai_model_init+0x70>
  ok &= ai_model_configure_weights(net_ctx, params);
 80058b6:	6839      	ldr	r1, [r7, #0]
 80058b8:	68f8      	ldr	r0, [r7, #12]
 80058ba:	f7ff fe2f 	bl	800551c <ai_model_configure_weights>
 80058be:	4603      	mov	r3, r0
 80058c0:	461a      	mov	r2, r3
 80058c2:	7afb      	ldrb	r3, [r7, #11]
 80058c4:	4013      	ands	r3, r2
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	bf14      	ite	ne
 80058ca:	2301      	movne	r3, #1
 80058cc:	2300      	moveq	r3, #0
 80058ce:	72fb      	strb	r3, [r7, #11]
  ok &= ai_model_configure_activations(net_ctx, params);
 80058d0:	6839      	ldr	r1, [r7, #0]
 80058d2:	68f8      	ldr	r0, [r7, #12]
 80058d4:	f7ff fd4a 	bl	800536c <ai_model_configure_activations>
 80058d8:	4603      	mov	r3, r0
 80058da:	461a      	mov	r2, r3
 80058dc:	7afb      	ldrb	r3, [r7, #11]
 80058de:	4013      	ands	r3, r2
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	bf14      	ite	ne
 80058e4:	2301      	movne	r3, #1
 80058e6:	2300      	moveq	r3, #0
 80058e8:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 fb2c 	bl	8005f48 <ai_platform_network_post_init>
 80058f0:	4603      	mov	r3, r0
 80058f2:	461a      	mov	r2, r3
 80058f4:	7afb      	ldrb	r3, [r7, #11]
 80058f6:	4013      	ands	r3, r2
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	bf14      	ite	ne
 80058fc:	2301      	movne	r3, #1
 80058fe:	2300      	moveq	r3, #0
 8005900:	72fb      	strb	r3, [r7, #11]

  return ok;
 8005902:	7afb      	ldrb	r3, [r7, #11]
}
 8005904:	4618      	mov	r0, r3
 8005906:	3710      	adds	r7, #16
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}

0800590c <ai_ai_model_run>:


AI_API_ENTRY
ai_i32 ai_ai_model_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	60b9      	str	r1, [r7, #8]
 8005916:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	68b9      	ldr	r1, [r7, #8]
 800591c:	68f8      	ldr	r0, [r7, #12]
 800591e:	f000 fb41 	bl	8005fa4 <ai_platform_network_process>
 8005922:	4603      	mov	r3, r0
}
 8005924:	4618      	mov	r0, r3
 8005926:	3710      	adds	r7, #16
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}

0800592c <ai_ai_model_data_params_get>:
 * @ingroup ai_model_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_ai_model_data_params_get(ai_network_params* params)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b086      	sub	sp, #24
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d101      	bne.n	800593e <ai_ai_model_data_params_get+0x12>
 800593a:	2300      	movs	r3, #0
 800593c:	e016      	b.n	800596c <ai_ai_model_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 800593e:	4a0d      	ldr	r2, [pc, #52]	@ (8005974 <ai_ai_model_data_params_get+0x48>)
 8005940:	f107 0310 	add.w	r3, r7, #16
 8005944:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005948:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_AI_MODEL_DATA_ACTIVATIONS_COUNT, g_ai_model_data_map_activations);
  
  const ai_buffer_array map_weights = 
 800594c:	4a0a      	ldr	r2, [pc, #40]	@ (8005978 <ai_ai_model_data_params_get+0x4c>)
 800594e:	f107 0308 	add.w	r3, r7, #8
 8005952:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005956:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_AI_MODEL_DATA_WEIGHTS_COUNT, g_ai_model_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 800595a:	f107 0210 	add.w	r2, r7, #16
 800595e:	f107 0308 	add.w	r3, r7, #8
 8005962:	4619      	mov	r1, r3
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f000 f8f9 	bl	8005b5c <ai_platform_bind_network_params>
 800596a:	4603      	mov	r3, r0
}
 800596c:	4618      	mov	r0, r3
 800596e:	3718      	adds	r7, #24
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}
 8005974:	0800b3a0 	.word	0x0800b3a0
 8005978:	0800b3a8 	.word	0x0800b3a8

0800597c <ai_buffer_get_size>:
 800597c:	b360      	cbz	r0, 80059d8 <ai_buffer_get_size+0x5c>
 800597e:	b430      	push	{r4, r5}
 8005980:	6803      	ldr	r3, [r0, #0]
 8005982:	4d16      	ldr	r5, [pc, #88]	@ (80059dc <ai_buffer_get_size+0x60>)
 8005984:	6984      	ldr	r4, [r0, #24]
 8005986:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 800598a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800598e:	42ab      	cmp	r3, r5
 8005990:	6862      	ldr	r2, [r4, #4]
 8005992:	d01b      	beq.n	80059cc <ai_buffer_get_size+0x50>
 8005994:	7d03      	ldrb	r3, [r0, #20]
 8005996:	6941      	ldr	r1, [r0, #20]
 8005998:	f1a3 0301 	sub.w	r3, r3, #1
 800599c:	fab3 f383 	clz	r3, r3
 80059a0:	095b      	lsrs	r3, r3, #5
 80059a2:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 80059a6:	f3c1 2017 	ubfx	r0, r1, #8, #24
 80059aa:	da0b      	bge.n	80059c4 <ai_buffer_get_size+0x48>
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d102      	bne.n	80059b6 <ai_buffer_get_size+0x3a>
 80059b0:	2802      	cmp	r0, #2
 80059b2:	d007      	beq.n	80059c4 <ai_buffer_get_size+0x48>
 80059b4:	2302      	movs	r3, #2
 80059b6:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 80059ba:	3301      	adds	r3, #1
 80059bc:	4298      	cmp	r0, r3
 80059be:	fb01 f202 	mul.w	r2, r1, r2
 80059c2:	d1f3      	bne.n	80059ac <ai_buffer_get_size+0x30>
 80059c4:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 80059c8:	bc30      	pop	{r4, r5}
 80059ca:	4770      	bx	lr
 80059cc:	2900      	cmp	r1, #0
 80059ce:	d0e1      	beq.n	8005994 <ai_buffer_get_size+0x18>
 80059d0:	321f      	adds	r2, #31
 80059d2:	f022 021f 	bic.w	r2, r2, #31
 80059d6:	e7dd      	b.n	8005994 <ai_buffer_get_size+0x18>
 80059d8:	4770      	bx	lr
 80059da:	bf00      	nop
 80059dc:	000400c0 	.word	0x000400c0

080059e0 <ai_buffer_array_sane>:
 80059e0:	b138      	cbz	r0, 80059f2 <ai_buffer_array_sane+0x12>
 80059e2:	6843      	ldr	r3, [r0, #4]
 80059e4:	b123      	cbz	r3, 80059f0 <ai_buffer_array_sane+0x10>
 80059e6:	8840      	ldrh	r0, [r0, #2]
 80059e8:	3800      	subs	r0, #0
 80059ea:	bf18      	it	ne
 80059ec:	2001      	movne	r0, #1
 80059ee:	4770      	bx	lr
 80059f0:	4618      	mov	r0, r3
 80059f2:	4770      	bx	lr

080059f4 <ai_buffer_array_item_set_address>:
 80059f4:	b158      	cbz	r0, 8005a0e <ai_buffer_array_item_set_address+0x1a>
 80059f6:	6843      	ldr	r3, [r0, #4]
 80059f8:	b143      	cbz	r3, 8005a0c <ai_buffer_array_item_set_address+0x18>
 80059fa:	8840      	ldrh	r0, [r0, #2]
 80059fc:	b138      	cbz	r0, 8005a0e <ai_buffer_array_item_set_address+0x1a>
 80059fe:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8005a02:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8005a06:	2001      	movs	r0, #1
 8005a08:	605a      	str	r2, [r3, #4]
 8005a0a:	4770      	bx	lr
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	4770      	bx	lr

08005a10 <ai_platform_get_weights_map>:
 8005a10:	b1f2      	cbz	r2, 8005a50 <ai_platform_get_weights_map+0x40>
 8005a12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a14:	4605      	mov	r5, r0
 8005a16:	b1c8      	cbz	r0, 8005a4c <ai_platform_get_weights_map+0x3c>
 8005a18:	460c      	mov	r4, r1
 8005a1a:	b1b9      	cbz	r1, 8005a4c <ai_platform_get_weights_map+0x3c>
 8005a1c:	4b24      	ldr	r3, [pc, #144]	@ (8005ab0 <ai_platform_get_weights_map+0xa0>)
 8005a1e:	6811      	ldr	r1, [r2, #0]
 8005a20:	4299      	cmp	r1, r3
 8005a22:	4616      	mov	r6, r2
 8005a24:	d00b      	beq.n	8005a3e <ai_platform_get_weights_map+0x2e>
 8005a26:	6856      	ldr	r6, [r2, #4]
 8005a28:	b186      	cbz	r6, 8005a4c <ai_platform_get_weights_map+0x3c>
 8005a2a:	6837      	ldr	r7, [r6, #0]
 8005a2c:	429f      	cmp	r7, r3
 8005a2e:	d011      	beq.n	8005a54 <ai_platform_get_weights_map+0x44>
 8005a30:	6006      	str	r6, [r0, #0]
 8005a32:	f1a4 0001 	sub.w	r0, r4, #1
 8005a36:	fab0 f080 	clz	r0, r0
 8005a3a:	0940      	lsrs	r0, r0, #5
 8005a3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a3e:	1d10      	adds	r0, r2, #4
 8005a40:	f7ff ffce 	bl	80059e0 <ai_buffer_array_sane>
 8005a44:	b110      	cbz	r0, 8005a4c <ai_platform_get_weights_map+0x3c>
 8005a46:	88f3      	ldrh	r3, [r6, #6]
 8005a48:	429c      	cmp	r4, r3
 8005a4a:	d01b      	beq.n	8005a84 <ai_platform_get_weights_map+0x74>
 8005a4c:	2000      	movs	r0, #0
 8005a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a50:	2000      	movs	r0, #0
 8005a52:	4770      	bx	lr
 8005a54:	4631      	mov	r1, r6
 8005a56:	3804      	subs	r0, #4
 8005a58:	2300      	movs	r3, #0
 8005a5a:	e004      	b.n	8005a66 <ai_platform_get_weights_map+0x56>
 8005a5c:	3301      	adds	r3, #1
 8005a5e:	429c      	cmp	r4, r3
 8005a60:	f840 2f04 	str.w	r2, [r0, #4]!
 8005a64:	d005      	beq.n	8005a72 <ai_platform_get_weights_map+0x62>
 8005a66:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8005a6a:	42ba      	cmp	r2, r7
 8005a6c:	d1f6      	bne.n	8005a5c <ai_platform_get_weights_map+0x4c>
 8005a6e:	429c      	cmp	r4, r3
 8005a70:	d1ec      	bne.n	8005a4c <ai_platform_get_weights_map+0x3c>
 8005a72:	3401      	adds	r4, #1
 8005a74:	4b0e      	ldr	r3, [pc, #56]	@ (8005ab0 <ai_platform_get_weights_map+0xa0>)
 8005a76:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005a7a:	1ac0      	subs	r0, r0, r3
 8005a7c:	fab0 f080 	clz	r0, r0
 8005a80:	0940      	lsrs	r0, r0, #5
 8005a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a84:	2100      	movs	r1, #0
 8005a86:	1f28      	subs	r0, r5, #4
 8005a88:	468c      	mov	ip, r1
 8005a8a:	e005      	b.n	8005a98 <ai_platform_get_weights_map+0x88>
 8005a8c:	f10c 0c01 	add.w	ip, ip, #1
 8005a90:	4564      	cmp	r4, ip
 8005a92:	f840 3f04 	str.w	r3, [r0, #4]!
 8005a96:	d005      	beq.n	8005aa4 <ai_platform_get_weights_map+0x94>
 8005a98:	68b3      	ldr	r3, [r6, #8]
 8005a9a:	440b      	add	r3, r1
 8005a9c:	311c      	adds	r1, #28
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d1f3      	bne.n	8005a8c <ai_platform_get_weights_map+0x7c>
 8005aa4:	eba4 000c 	sub.w	r0, r4, ip
 8005aa8:	fab0 f080 	clz	r0, r0
 8005aac:	0940      	lsrs	r0, r0, #5
 8005aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ab0:	a1facade 	.word	0xa1facade

08005ab4 <ai_platform_get_activations_map>:
 8005ab4:	b1fa      	cbz	r2, 8005af6 <ai_platform_get_activations_map+0x42>
 8005ab6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ab8:	4605      	mov	r5, r0
 8005aba:	b1d0      	cbz	r0, 8005af2 <ai_platform_get_activations_map+0x3e>
 8005abc:	460c      	mov	r4, r1
 8005abe:	b1c1      	cbz	r1, 8005af2 <ai_platform_get_activations_map+0x3e>
 8005ac0:	4b25      	ldr	r3, [pc, #148]	@ (8005b58 <ai_platform_get_activations_map+0xa4>)
 8005ac2:	6811      	ldr	r1, [r2, #0]
 8005ac4:	4299      	cmp	r1, r3
 8005ac6:	4616      	mov	r6, r2
 8005ac8:	d00b      	beq.n	8005ae2 <ai_platform_get_activations_map+0x2e>
 8005aca:	6a16      	ldr	r6, [r2, #32]
 8005acc:	b18e      	cbz	r6, 8005af2 <ai_platform_get_activations_map+0x3e>
 8005ace:	6837      	ldr	r7, [r6, #0]
 8005ad0:	429f      	cmp	r7, r3
 8005ad2:	d012      	beq.n	8005afa <ai_platform_get_activations_map+0x46>
 8005ad4:	6006      	str	r6, [r0, #0]
 8005ad6:	f1a4 0001 	sub.w	r0, r4, #1
 8005ada:	fab0 f080 	clz	r0, r0
 8005ade:	0940      	lsrs	r0, r0, #5
 8005ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ae2:	f102 000c 	add.w	r0, r2, #12
 8005ae6:	f7ff ff7b 	bl	80059e0 <ai_buffer_array_sane>
 8005aea:	b110      	cbz	r0, 8005af2 <ai_platform_get_activations_map+0x3e>
 8005aec:	89f3      	ldrh	r3, [r6, #14]
 8005aee:	429c      	cmp	r4, r3
 8005af0:	d01b      	beq.n	8005b2a <ai_platform_get_activations_map+0x76>
 8005af2:	2000      	movs	r0, #0
 8005af4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005af6:	2000      	movs	r0, #0
 8005af8:	4770      	bx	lr
 8005afa:	4631      	mov	r1, r6
 8005afc:	3804      	subs	r0, #4
 8005afe:	2300      	movs	r3, #0
 8005b00:	e004      	b.n	8005b0c <ai_platform_get_activations_map+0x58>
 8005b02:	3301      	adds	r3, #1
 8005b04:	429c      	cmp	r4, r3
 8005b06:	f840 2f04 	str.w	r2, [r0, #4]!
 8005b0a:	d005      	beq.n	8005b18 <ai_platform_get_activations_map+0x64>
 8005b0c:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8005b10:	42ba      	cmp	r2, r7
 8005b12:	d1f6      	bne.n	8005b02 <ai_platform_get_activations_map+0x4e>
 8005b14:	429c      	cmp	r4, r3
 8005b16:	d1ec      	bne.n	8005af2 <ai_platform_get_activations_map+0x3e>
 8005b18:	3401      	adds	r4, #1
 8005b1a:	4b0f      	ldr	r3, [pc, #60]	@ (8005b58 <ai_platform_get_activations_map+0xa4>)
 8005b1c:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005b20:	1ac0      	subs	r0, r0, r3
 8005b22:	fab0 f080 	clz	r0, r0
 8005b26:	0940      	lsrs	r0, r0, #5
 8005b28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b2a:	2100      	movs	r1, #0
 8005b2c:	1f28      	subs	r0, r5, #4
 8005b2e:	468c      	mov	ip, r1
 8005b30:	e005      	b.n	8005b3e <ai_platform_get_activations_map+0x8a>
 8005b32:	f10c 0c01 	add.w	ip, ip, #1
 8005b36:	4564      	cmp	r4, ip
 8005b38:	f840 3f04 	str.w	r3, [r0, #4]!
 8005b3c:	d005      	beq.n	8005b4a <ai_platform_get_activations_map+0x96>
 8005b3e:	6933      	ldr	r3, [r6, #16]
 8005b40:	440b      	add	r3, r1
 8005b42:	311c      	adds	r1, #28
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d1f3      	bne.n	8005b32 <ai_platform_get_activations_map+0x7e>
 8005b4a:	eba4 000c 	sub.w	r0, r4, ip
 8005b4e:	fab0 f080 	clz	r0, r0
 8005b52:	0940      	lsrs	r0, r0, #5
 8005b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b56:	bf00      	nop
 8005b58:	a1facade 	.word	0xa1facade

08005b5c <ai_platform_bind_network_params>:
 8005b5c:	b1a0      	cbz	r0, 8005b88 <ai_platform_bind_network_params+0x2c>
 8005b5e:	b1b1      	cbz	r1, 8005b8e <ai_platform_bind_network_params+0x32>
 8005b60:	b1c2      	cbz	r2, 8005b94 <ai_platform_bind_network_params+0x38>
 8005b62:	b410      	push	{r4}
 8005b64:	4603      	mov	r3, r0
 8005b66:	4c0d      	ldr	r4, [pc, #52]	@ (8005b9c <ai_platform_bind_network_params+0x40>)
 8005b68:	f843 4b04 	str.w	r4, [r3], #4
 8005b6c:	f100 0c0c 	add.w	ip, r0, #12
 8005b70:	c903      	ldmia	r1, {r0, r1}
 8005b72:	e883 0003 	stmia.w	r3, {r0, r1}
 8005b76:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005b7a:	e88c 0003 	stmia.w	ip, {r0, r1}
 8005b7e:	2301      	movs	r3, #1
 8005b80:	4618      	mov	r0, r3
 8005b82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b86:	4770      	bx	lr
 8005b88:	4603      	mov	r3, r0
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	4770      	bx	lr
 8005b8e:	460b      	mov	r3, r1
 8005b90:	4618      	mov	r0, r3
 8005b92:	4770      	bx	lr
 8005b94:	4613      	mov	r3, r2
 8005b96:	4618      	mov	r0, r3
 8005b98:	4770      	bx	lr
 8005b9a:	bf00      	nop
 8005b9c:	a1facade 	.word	0xa1facade

08005ba0 <ai_platform_network_get_error>:
 8005ba0:	4b04      	ldr	r3, [pc, #16]	@ (8005bb4 <ai_platform_network_get_error+0x14>)
 8005ba2:	6802      	ldr	r2, [r0, #0]
 8005ba4:	4393      	bics	r3, r2
 8005ba6:	d102      	bne.n	8005bae <ai_platform_network_get_error+0xe>
 8005ba8:	300c      	adds	r0, #12
 8005baa:	f000 bc19 	b.w	80063e0 <core_get_error>
 8005bae:	f241 0010 	movw	r0, #4112	@ 0x1010
 8005bb2:	4770      	bx	lr
 8005bb4:	a1c00100 	.word	0xa1c00100

08005bb8 <ai_platform_network_set_error>:
 8005bb8:	b110      	cbz	r0, 8005bc0 <ai_platform_network_set_error+0x8>
 8005bba:	300c      	adds	r0, #12
 8005bbc:	f000 bc16 	b.w	80063ec <core_set_error>
 8005bc0:	4770      	bx	lr
 8005bc2:	bf00      	nop

08005bc4 <ai_platform_inputs_get>:
 8005bc4:	4b39      	ldr	r3, [pc, #228]	@ (8005cac <ai_platform_inputs_get+0xe8>)
 8005bc6:	6802      	ldr	r2, [r0, #0]
 8005bc8:	4393      	bics	r3, r2
 8005bca:	d163      	bne.n	8005c94 <ai_platform_inputs_get+0xd0>
 8005bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bd0:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8005bd2:	b085      	sub	sp, #20
 8005bd4:	4605      	mov	r5, r0
 8005bd6:	460c      	mov	r4, r1
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d04e      	beq.n	8005c7a <ai_platform_inputs_get+0xb6>
 8005bdc:	6b47      	ldr	r7, [r0, #52]	@ 0x34
 8005bde:	2f00      	cmp	r7, #0
 8005be0:	d04b      	beq.n	8005c7a <ai_platform_inputs_get+0xb6>
 8005be2:	f04f 0b00 	mov.w	fp, #0
 8005be6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005bea:	465e      	mov	r6, fp
 8005bec:	46ba      	mov	sl, r7
 8005bee:	e016      	b.n	8005c1e <ai_platform_inputs_get+0x5a>
 8005bf0:	9901      	ldr	r1, [sp, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	507a      	str	r2, [r7, r1]
 8005bf6:	69a1      	ldr	r1, [r4, #24]
 8005bf8:	684c      	ldr	r4, [r1, #4]
 8005bfa:	6028      	str	r0, [r5, #0]
 8005bfc:	f04f 0201 	mov.w	r2, #1
 8005c00:	752a      	strb	r2, [r5, #20]
 8005c02:	6968      	ldr	r0, [r5, #20]
 8005c04:	60ab      	str	r3, [r5, #8]
 8005c06:	f368 201f 	bfi	r0, r8, #8, #24
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	e9c5 3403 	strd	r3, r4, [r5, #12]
 8005c10:	e9c5 0905 	strd	r0, r9, [r5, #20]
 8005c14:	f8c5 c004 	str.w	ip, [r5, #4]
 8005c18:	3601      	adds	r6, #1
 8005c1a:	f10b 0b1c 	add.w	fp, fp, #28
 8005c1e:	f8ba 3000 	ldrh.w	r3, [sl]
 8005c22:	00f2      	lsls	r2, r6, #3
 8005c24:	42b3      	cmp	r3, r6
 8005c26:	9201      	str	r2, [sp, #4]
 8005c28:	d936      	bls.n	8005c98 <ai_platform_inputs_get+0xd4>
 8005c2a:	f8da 3004 	ldr.w	r3, [sl, #4]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d032      	beq.n	8005c98 <ai_platform_inputs_get+0xd4>
 8005c32:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 8005c36:	b37c      	cbz	r4, 8005c98 <ai_platform_inputs_get+0xd4>
 8005c38:	f8da 3008 	ldr.w	r3, [sl, #8]
 8005c3c:	69a2      	ldr	r2, [r4, #24]
 8005c3e:	f8d4 900c 	ldr.w	r9, [r4, #12]
 8005c42:	6810      	ldr	r0, [r2, #0]
 8005c44:	e9d3 5701 	ldrd	r5, r7, [r3, #4]
 8005c48:	68a3      	ldr	r3, [r4, #8]
 8005c4a:	f3c3 2817 	ubfx	r8, r3, #8, #24
 8005c4e:	f002 fb1b 	bl	8008288 <ai_array_to_buffer_fmt>
 8005c52:	69a1      	ldr	r1, [r4, #24]
 8005c54:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
 8005c58:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8005c5c:	445d      	add	r5, fp
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d0ca      	beq.n	8005bf8 <ai_platform_inputs_get+0x34>
 8005c62:	2100      	movs	r1, #0
 8005c64:	f847 1036 	str.w	r1, [r7, r6, lsl #3]
 8005c68:	6821      	ldr	r1, [r4, #0]
 8005c6a:	6059      	str	r1, [r3, #4]
 8005c6c:	b111      	cbz	r1, 8005c74 <ai_platform_inputs_get+0xb0>
 8005c6e:	8849      	ldrh	r1, [r1, #2]
 8005c70:	2900      	cmp	r1, #0
 8005c72:	d1bd      	bne.n	8005bf0 <ai_platform_inputs_get+0x2c>
 8005c74:	69a1      	ldr	r1, [r4, #24]
 8005c76:	2300      	movs	r3, #0
 8005c78:	e7be      	b.n	8005bf8 <ai_platform_inputs_get+0x34>
 8005c7a:	2218      	movs	r2, #24
 8005c7c:	2111      	movs	r1, #17
 8005c7e:	f105 000c 	add.w	r0, r5, #12
 8005c82:	2600      	movs	r6, #0
 8005c84:	f000 fbb2 	bl	80063ec <core_set_error>
 8005c88:	4630      	mov	r0, r6
 8005c8a:	b104      	cbz	r4, 8005c8e <ai_platform_inputs_get+0xca>
 8005c8c:	8026      	strh	r6, [r4, #0]
 8005c8e:	b005      	add	sp, #20
 8005c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c94:	2000      	movs	r0, #0
 8005c96:	4770      	bx	lr
 8005c98:	b2b6      	uxth	r6, r6
 8005c9a:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 8005c9e:	2e00      	cmp	r6, #0
 8005ca0:	d0eb      	beq.n	8005c7a <ai_platform_inputs_get+0xb6>
 8005ca2:	f8da 3008 	ldr.w	r3, [sl, #8]
 8005ca6:	6858      	ldr	r0, [r3, #4]
 8005ca8:	e7ef      	b.n	8005c8a <ai_platform_inputs_get+0xc6>
 8005caa:	bf00      	nop
 8005cac:	a1c00100 	.word	0xa1c00100

08005cb0 <ai_platform_outputs_get>:
 8005cb0:	4b37      	ldr	r3, [pc, #220]	@ (8005d90 <ai_platform_outputs_get+0xe0>)
 8005cb2:	6802      	ldr	r2, [r0, #0]
 8005cb4:	4393      	bics	r3, r2
 8005cb6:	d169      	bne.n	8005d8c <ai_platform_outputs_get+0xdc>
 8005cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cbc:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	b085      	sub	sp, #20
 8005cc2:	4605      	mov	r5, r0
 8005cc4:	460c      	mov	r4, r1
 8005cc6:	d94b      	bls.n	8005d60 <ai_platform_outputs_get+0xb0>
 8005cc8:	6b47      	ldr	r7, [r0, #52]	@ 0x34
 8005cca:	f04f 0b00 	mov.w	fp, #0
 8005cce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005cd2:	465e      	mov	r6, fp
 8005cd4:	46d8      	mov	r8, fp
 8005cd6:	46ba      	mov	sl, r7
 8005cd8:	e016      	b.n	8005d08 <ai_platform_outputs_get+0x58>
 8005cda:	9901      	ldr	r1, [sp, #4]
 8005cdc:	2201      	movs	r2, #1
 8005cde:	507a      	str	r2, [r7, r1]
 8005ce0:	69a9      	ldr	r1, [r5, #24]
 8005ce2:	684d      	ldr	r5, [r1, #4]
 8005ce4:	6020      	str	r0, [r4, #0]
 8005ce6:	f04f 0201 	mov.w	r2, #1
 8005cea:	7522      	strb	r2, [r4, #20]
 8005cec:	6960      	ldr	r0, [r4, #20]
 8005cee:	f8c4 c004 	str.w	ip, [r4, #4]
 8005cf2:	f369 201f 	bfi	r0, r9, #8, #24
 8005cf6:	e9c4 5004 	strd	r5, r0, [r4, #16]
 8005cfa:	e9c4 3802 	strd	r3, r8, [r4, #8]
 8005cfe:	9b00      	ldr	r3, [sp, #0]
 8005d00:	61a3      	str	r3, [r4, #24]
 8005d02:	3601      	adds	r6, #1
 8005d04:	f10b 0b1c 	add.w	fp, fp, #28
 8005d08:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8005d0c:	00f2      	lsls	r2, r6, #3
 8005d0e:	42b3      	cmp	r3, r6
 8005d10:	9201      	str	r2, [sp, #4]
 8005d12:	d932      	bls.n	8005d7a <ai_platform_outputs_get+0xca>
 8005d14:	f8da 3010 	ldr.w	r3, [sl, #16]
 8005d18:	b37b      	cbz	r3, 8005d7a <ai_platform_outputs_get+0xca>
 8005d1a:	f853 5026 	ldr.w	r5, [r3, r6, lsl #2]
 8005d1e:	b365      	cbz	r5, 8005d7a <ai_platform_outputs_get+0xca>
 8005d20:	f8da 3014 	ldr.w	r3, [sl, #20]
 8005d24:	69aa      	ldr	r2, [r5, #24]
 8005d26:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8005d2a:	68ab      	ldr	r3, [r5, #8]
 8005d2c:	6810      	ldr	r0, [r2, #0]
 8005d2e:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8005d32:	68eb      	ldr	r3, [r5, #12]
 8005d34:	9300      	str	r3, [sp, #0]
 8005d36:	f002 faa7 	bl	8008288 <ai_array_to_buffer_fmt>
 8005d3a:	69a9      	ldr	r1, [r5, #24]
 8005d3c:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
 8005d40:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8005d44:	445c      	add	r4, fp
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d0cb      	beq.n	8005ce2 <ai_platform_outputs_get+0x32>
 8005d4a:	f847 8036 	str.w	r8, [r7, r6, lsl #3]
 8005d4e:	6829      	ldr	r1, [r5, #0]
 8005d50:	6059      	str	r1, [r3, #4]
 8005d52:	b111      	cbz	r1, 8005d5a <ai_platform_outputs_get+0xaa>
 8005d54:	8849      	ldrh	r1, [r1, #2]
 8005d56:	2900      	cmp	r1, #0
 8005d58:	d1bf      	bne.n	8005cda <ai_platform_outputs_get+0x2a>
 8005d5a:	69a9      	ldr	r1, [r5, #24]
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	e7c0      	b.n	8005ce2 <ai_platform_outputs_get+0x32>
 8005d60:	2218      	movs	r2, #24
 8005d62:	2111      	movs	r1, #17
 8005d64:	f105 000c 	add.w	r0, r5, #12
 8005d68:	2600      	movs	r6, #0
 8005d6a:	f000 fb3f 	bl	80063ec <core_set_error>
 8005d6e:	4630      	mov	r0, r6
 8005d70:	b104      	cbz	r4, 8005d74 <ai_platform_outputs_get+0xc4>
 8005d72:	8026      	strh	r6, [r4, #0]
 8005d74:	b005      	add	sp, #20
 8005d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d7a:	b2b6      	uxth	r6, r6
 8005d7c:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 8005d80:	2e00      	cmp	r6, #0
 8005d82:	d0ed      	beq.n	8005d60 <ai_platform_outputs_get+0xb0>
 8005d84:	f8da 3014 	ldr.w	r3, [sl, #20]
 8005d88:	6858      	ldr	r0, [r3, #4]
 8005d8a:	e7f1      	b.n	8005d70 <ai_platform_outputs_get+0xc0>
 8005d8c:	2000      	movs	r0, #0
 8005d8e:	4770      	bx	lr
 8005d90:	a1c00100 	.word	0xa1c00100

08005d94 <ai_platform_network_create>:
 8005d94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005d98:	b083      	sub	sp, #12
 8005d9a:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 8005d9e:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 8005da2:	b320      	cbz	r0, 8005dee <ai_platform_network_create+0x5a>
 8005da4:	6002      	str	r2, [r0, #0]
 8005da6:	4616      	mov	r6, r2
 8005da8:	461f      	mov	r7, r3
 8005daa:	4604      	mov	r4, r0
 8005dac:	f000 fb16 	bl	80063dc <core_init>
 8005db0:	b970      	cbnz	r0, 8005dd0 <ai_platform_network_create+0x3c>
 8005db2:	2530      	movs	r5, #48	@ 0x30
 8005db4:	2300      	movs	r3, #0
 8005db6:	6023      	str	r3, [r4, #0]
 8005db8:	2410      	movs	r4, #16
 8005dba:	464a      	mov	r2, r9
 8005dbc:	4641      	mov	r1, r8
 8005dbe:	4638      	mov	r0, r7
 8005dc0:	f002 fb02 	bl	80083c8 <ai_version_get>
 8005dc4:	60b0      	str	r0, [r6, #8]
 8005dc6:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 8005dca:	b003      	add	sp, #12
 8005dcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	4641      	mov	r1, r8
 8005dd4:	4638      	mov	r0, r7
 8005dd6:	f002 faf7 	bl	80083c8 <ai_version_get>
 8005dda:	2200      	movs	r2, #0
 8005ddc:	4605      	mov	r5, r0
 8005dde:	2105      	movs	r1, #5
 8005de0:	2001      	movs	r0, #1
 8005de2:	f002 faf1 	bl	80083c8 <ai_version_get>
 8005de6:	4285      	cmp	r5, r0
 8005de8:	d008      	beq.n	8005dfc <ai_platform_network_create+0x68>
 8005dea:	2501      	movs	r5, #1
 8005dec:	e7e2      	b.n	8005db4 <ai_platform_network_create+0x20>
 8005dee:	2510      	movs	r5, #16
 8005df0:	462c      	mov	r4, r5
 8005df2:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 8005df6:	b003      	add	sp, #12
 8005df8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005dfc:	4b05      	ldr	r3, [pc, #20]	@ (8005e14 <ai_platform_network_create+0x80>)
 8005dfe:	9301      	str	r3, [sp, #4]
 8005e00:	a801      	add	r0, sp, #4
 8005e02:	f000 faff 	bl	8006404 <ai_check_custom_types>
 8005e06:	b110      	cbz	r0, 8005e0e <ai_platform_network_create+0x7a>
 8005e08:	2400      	movs	r4, #0
 8005e0a:	4625      	mov	r5, r4
 8005e0c:	e7d5      	b.n	8005dba <ai_platform_network_create+0x26>
 8005e0e:	2502      	movs	r5, #2
 8005e10:	e7d0      	b.n	8005db4 <ai_platform_network_create+0x20>
 8005e12:	bf00      	nop
 8005e14:	84048403 	.word	0x84048403

08005e18 <ai_platform_network_init>:
 8005e18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e1c:	4a48      	ldr	r2, [pc, #288]	@ (8005f40 <ai_platform_network_init+0x128>)
 8005e1e:	4604      	mov	r4, r0
 8005e20:	6800      	ldr	r0, [r0, #0]
 8005e22:	460b      	mov	r3, r1
 8005e24:	ea00 0102 	and.w	r1, r0, r2
 8005e28:	4382      	bics	r2, r0
 8005e2a:	d13b      	bne.n	8005ea4 <ai_platform_network_init+0x8c>
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d078      	beq.n	8005f22 <ai_platform_network_init+0x10a>
 8005e30:	4a44      	ldr	r2, [pc, #272]	@ (8005f44 <ai_platform_network_init+0x12c>)
 8005e32:	681d      	ldr	r5, [r3, #0]
 8005e34:	4295      	cmp	r5, r2
 8005e36:	d10a      	bne.n	8005e4e <ai_platform_network_init+0x36>
 8005e38:	4288      	cmp	r0, r1
 8005e3a:	e9d3 2503 	ldrd	r2, r5, [r3, #12]
 8005e3e:	e9d3 6301 	ldrd	r6, r3, [r3, #4]
 8005e42:	d03d      	beq.n	8005ec0 <ai_platform_network_init+0xa8>
 8005e44:	2303      	movs	r3, #3
 8005e46:	6123      	str	r3, [r4, #16]
 8005e48:	4620      	mov	r0, r4
 8005e4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e4e:	2101      	movs	r1, #1
 8005e50:	4618      	mov	r0, r3
 8005e52:	461d      	mov	r5, r3
 8005e54:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8005e58:	f7ff fd90 	bl	800597c <ai_buffer_get_size>
 8005e5c:	f105 071c 	add.w	r7, r5, #28
 8005e60:	4606      	mov	r6, r0
 8005e62:	2101      	movs	r1, #1
 8005e64:	4638      	mov	r0, r7
 8005e66:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8005e6a:	f7ff fd87 	bl	800597c <ai_buffer_get_size>
 8005e6e:	2e00      	cmp	r6, #0
 8005e70:	bf0a      	itet	eq
 8005e72:	4631      	moveq	r1, r6
 8005e74:	2101      	movne	r1, #1
 8005e76:	4635      	moveq	r5, r6
 8005e78:	b1b0      	cbz	r0, 8005ea8 <ai_platform_network_init+0x90>
 8005e7a:	f1b9 0f00 	cmp.w	r9, #0
 8005e7e:	d057      	beq.n	8005f30 <ai_platform_network_init+0x118>
 8005e80:	f04f 0e01 	mov.w	lr, #1
 8005e84:	f1b8 0f00 	cmp.w	r8, #0
 8005e88:	d011      	beq.n	8005eae <ai_platform_network_init+0x96>
 8005e8a:	4b2d      	ldr	r3, [pc, #180]	@ (8005f40 <ai_platform_network_init+0x128>)
 8005e8c:	6822      	ldr	r2, [r4, #0]
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d1d8      	bne.n	8005e44 <ai_platform_network_init+0x2c>
 8005e92:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
 8005e94:	428b      	cmp	r3, r1
 8005e96:	d21b      	bcs.n	8005ed0 <ai_platform_network_init+0xb8>
 8005e98:	2212      	movs	r2, #18
 8005e9a:	2116      	movs	r1, #22
 8005e9c:	f104 000c 	add.w	r0, r4, #12
 8005ea0:	f000 faa4 	bl	80063ec <core_set_error>
 8005ea4:	2000      	movs	r0, #0
 8005ea6:	e7d0      	b.n	8005e4a <ai_platform_network_init+0x32>
 8005ea8:	4607      	mov	r7, r0
 8005eaa:	4686      	mov	lr, r0
 8005eac:	e7ea      	b.n	8005e84 <ai_platform_network_init+0x6c>
 8005eae:	2e00      	cmp	r6, #0
 8005eb0:	d0eb      	beq.n	8005e8a <ai_platform_network_init+0x72>
 8005eb2:	2212      	movs	r2, #18
 8005eb4:	2110      	movs	r1, #16
 8005eb6:	f104 000c 	add.w	r0, r4, #12
 8005eba:	f000 fa97 	bl	80063ec <core_set_error>
 8005ebe:	e7f1      	b.n	8005ea4 <ai_platform_network_init+0x8c>
 8005ec0:	e9c4 6308 	strd	r6, r3, [r4, #32]
 8005ec4:	62e5      	str	r5, [r4, #44]	@ 0x2c
 8005ec6:	62a2      	str	r2, [r4, #40]	@ 0x28
 8005ec8:	4620      	mov	r0, r4
 8005eca:	f000 fac5 	bl	8006458 <ai_layers_init_all>
 8005ece:	e7b9      	b.n	8005e44 <ai_platform_network_init+0x2c>
 8005ed0:	b1e1      	cbz	r1, 8005f0c <ai_platform_network_init+0xf4>
 8005ed2:	46ac      	mov	ip, r5
 8005ed4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8005ed8:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8005eda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005edc:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8005ee0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8005ee4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005ee6:	f44f 3680 	mov.w	r6, #65536	@ 0x10000
 8005eea:	4573      	cmp	r3, lr
 8005eec:	6226      	str	r6, [r4, #32]
 8005eee:	d311      	bcc.n	8005f14 <ai_platform_network_init+0xfc>
 8005ef0:	f1be 0f00 	cmp.w	lr, #0
 8005ef4:	d007      	beq.n	8005f06 <ai_platform_network_init+0xee>
 8005ef6:	463e      	mov	r6, r7
 8005ef8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005efa:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 8005efc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005efe:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8005f02:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8005f06:	ea4f 420e 	mov.w	r2, lr, lsl #16
 8005f0a:	e7dc      	b.n	8005ec6 <ai_platform_network_init+0xae>
 8005f0c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005f0e:	6221      	str	r1, [r4, #32]
 8005f10:	4573      	cmp	r3, lr
 8005f12:	d2ed      	bcs.n	8005ef0 <ai_platform_network_init+0xd8>
 8005f14:	2213      	movs	r2, #19
 8005f16:	2116      	movs	r1, #22
 8005f18:	f104 000c 	add.w	r0, r4, #12
 8005f1c:	f000 fa66 	bl	80063ec <core_set_error>
 8005f20:	e7c0      	b.n	8005ea4 <ai_platform_network_init+0x8c>
 8005f22:	2211      	movs	r2, #17
 8005f24:	2110      	movs	r1, #16
 8005f26:	f104 000c 	add.w	r0, r4, #12
 8005f2a:	f000 fa5f 	bl	80063ec <core_set_error>
 8005f2e:	e7b9      	b.n	8005ea4 <ai_platform_network_init+0x8c>
 8005f30:	2213      	movs	r2, #19
 8005f32:	2110      	movs	r1, #16
 8005f34:	f104 000c 	add.w	r0, r4, #12
 8005f38:	f000 fa58 	bl	80063ec <core_set_error>
 8005f3c:	e7b2      	b.n	8005ea4 <ai_platform_network_init+0x8c>
 8005f3e:	bf00      	nop
 8005f40:	a1c00100 	.word	0xa1c00100
 8005f44:	a1facade 	.word	0xa1facade

08005f48 <ai_platform_network_post_init>:
 8005f48:	4b15      	ldr	r3, [pc, #84]	@ (8005fa0 <ai_platform_network_post_init+0x58>)
 8005f4a:	6802      	ldr	r2, [r0, #0]
 8005f4c:	ea02 0103 	and.w	r1, r2, r3
 8005f50:	4393      	bics	r3, r2
 8005f52:	d123      	bne.n	8005f9c <ai_platform_network_post_init+0x54>
 8005f54:	b570      	push	{r4, r5, r6, lr}
 8005f56:	6903      	ldr	r3, [r0, #16]
 8005f58:	079b      	lsls	r3, r3, #30
 8005f5a:	4604      	mov	r4, r0
 8005f5c:	d503      	bpl.n	8005f66 <ai_platform_network_post_init+0x1e>
 8005f5e:	428a      	cmp	r2, r1
 8005f60:	d008      	beq.n	8005f74 <ai_platform_network_post_init+0x2c>
 8005f62:	2001      	movs	r0, #1
 8005f64:	bd70      	pop	{r4, r5, r6, pc}
 8005f66:	2210      	movs	r2, #16
 8005f68:	2111      	movs	r1, #17
 8005f6a:	300c      	adds	r0, #12
 8005f6c:	f000 fa3e 	bl	80063ec <core_set_error>
 8005f70:	2000      	movs	r0, #0
 8005f72:	bd70      	pop	{r4, r5, r6, pc}
 8005f74:	f000 fa80 	bl	8006478 <ai_layers_post_init_all>
 8005f78:	6c26      	ldr	r6, [r4, #64]	@ 0x40
 8005f7a:	2e00      	cmp	r6, #0
 8005f7c:	d0f1      	beq.n	8005f62 <ai_platform_network_post_init+0x1a>
 8005f7e:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 8005f80:	2d00      	cmp	r5, #0
 8005f82:	d0ee      	beq.n	8005f62 <ai_platform_network_post_init+0x1a>
 8005f84:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8005f86:	4629      	mov	r1, r5
 8005f88:	2000      	movs	r0, #0
 8005f8a:	47b0      	blx	r6
 8005f8c:	692b      	ldr	r3, [r5, #16]
 8005f8e:	42ab      	cmp	r3, r5
 8005f90:	d0e7      	beq.n	8005f62 <ai_platform_network_post_init+0x1a>
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d0e5      	beq.n	8005f62 <ai_platform_network_post_init+0x1a>
 8005f96:	6c26      	ldr	r6, [r4, #64]	@ 0x40
 8005f98:	461d      	mov	r5, r3
 8005f9a:	e7f3      	b.n	8005f84 <ai_platform_network_post_init+0x3c>
 8005f9c:	2000      	movs	r0, #0
 8005f9e:	4770      	bx	lr
 8005fa0:	a1c00100 	.word	0xa1c00100

08005fa4 <ai_platform_network_process>:
 8005fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fa8:	4bb7      	ldr	r3, [pc, #732]	@ (8006288 <ai_platform_network_process+0x2e4>)
 8005faa:	4607      	mov	r7, r0
 8005fac:	6800      	ldr	r0, [r0, #0]
 8005fae:	4383      	bics	r3, r0
 8005fb0:	b085      	sub	sp, #20
 8005fb2:	f040 812d 	bne.w	8006210 <ai_platform_network_process+0x26c>
 8005fb6:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	f000 811d 	beq.w	80061f8 <ai_platform_network_process+0x254>
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	f8d7 9034 	ldr.w	r9, [r7, #52]	@ 0x34
 8005fc4:	f003 0303 	and.w	r3, r3, #3
 8005fc8:	2600      	movs	r6, #0
 8005fca:	2b03      	cmp	r3, #3
 8005fcc:	61be      	str	r6, [r7, #24]
 8005fce:	f040 8129 	bne.w	8006224 <ai_platform_network_process+0x280>
 8005fd2:	2900      	cmp	r1, #0
 8005fd4:	f000 8116 	beq.w	8006204 <ai_platform_network_process+0x260>
 8005fd8:	f1b9 0f00 	cmp.w	r9, #0
 8005fdc:	f000 8112 	beq.w	8006204 <ai_platform_network_process+0x260>
 8005fe0:	f8b9 3000 	ldrh.w	r3, [r9]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	f000 810d 	beq.w	8006204 <ai_platform_network_process+0x260>
 8005fea:	698b      	ldr	r3, [r1, #24]
 8005fec:	e9cd 7202 	strd	r7, r2, [sp, #8]
 8005ff0:	f8d3 b000 	ldr.w	fp, [r3]
 8005ff4:	460c      	mov	r4, r1
 8005ff6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d072      	beq.n	80060e4 <ai_platform_network_process+0x140>
 8005ffe:	f853 5026 	ldr.w	r5, [r3, r6, lsl #2]
 8006002:	2d00      	cmp	r5, #0
 8006004:	d06e      	beq.n	80060e4 <ai_platform_network_process+0x140>
 8006006:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800600a:	f8d3 a000 	ldr.w	sl, [r3]
 800600e:	0133      	lsls	r3, r6, #4
 8006010:	eb1a 1806 	adds.w	r8, sl, r6, lsl #4
 8006014:	9301      	str	r3, [sp, #4]
 8006016:	f000 81ba 	beq.w	800638e <ai_platform_network_process+0x3ea>
 800601a:	69ab      	ldr	r3, [r5, #24]
 800601c:	2101      	movs	r1, #1
 800601e:	4620      	mov	r0, r4
 8006020:	685f      	ldr	r7, [r3, #4]
 8006022:	f7ff fcab 	bl	800597c <ai_buffer_get_size>
 8006026:	4287      	cmp	r7, r0
 8006028:	f0c0 8103 	bcc.w	8006232 <ai_platform_network_process+0x28e>
 800602c:	68e8      	ldr	r0, [r5, #12]
 800602e:	69a1      	ldr	r1, [r4, #24]
 8006030:	68c2      	ldr	r2, [r0, #12]
 8006032:	68cb      	ldr	r3, [r1, #12]
 8006034:	429a      	cmp	r2, r3
 8006036:	f040 80fc 	bne.w	8006232 <ai_platform_network_process+0x28e>
 800603a:	6882      	ldr	r2, [r0, #8]
 800603c:	688b      	ldr	r3, [r1, #8]
 800603e:	429a      	cmp	r2, r3
 8006040:	f040 80f7 	bne.w	8006232 <ai_platform_network_process+0x28e>
 8006044:	6842      	ldr	r2, [r0, #4]
 8006046:	684b      	ldr	r3, [r1, #4]
 8006048:	429a      	cmp	r2, r3
 800604a:	f040 80f2 	bne.w	8006232 <ai_platform_network_process+0x28e>
 800604e:	69ab      	ldr	r3, [r5, #24]
 8006050:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006054:	f002 f9a6 	bl	80083a4 <ai_array_get_data_byte_size>
 8006058:	9001      	str	r0, [sp, #4]
 800605a:	4628      	mov	r0, r5
 800605c:	f002 f9ba 	bl	80083d4 <get_tensor_byte_size>
 8006060:	9b01      	ldr	r3, [sp, #4]
 8006062:	4283      	cmp	r3, r0
 8006064:	f0c0 80e5 	bcc.w	8006232 <ai_platform_network_process+0x28e>
 8006068:	69ab      	ldr	r3, [r5, #24]
 800606a:	6818      	ldr	r0, [r3, #0]
 800606c:	f002 f90c 	bl	8008288 <ai_array_to_buffer_fmt>
 8006070:	6823      	ldr	r3, [r4, #0]
 8006072:	4058      	eors	r0, r3
 8006074:	f030 437e 	bics.w	r3, r0, #4261412864	@ 0xfe000000
 8006078:	f040 8193 	bne.w	80063a2 <ai_platform_network_process+0x3fe>
 800607c:	6863      	ldr	r3, [r4, #4]
 800607e:	2b00      	cmp	r3, #0
 8006080:	f000 8185 	beq.w	800638e <ai_platform_network_process+0x3ea>
 8006084:	69a3      	ldr	r3, [r4, #24]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	2b00      	cmp	r3, #0
 800608a:	f000 8182 	beq.w	8006392 <ai_platform_network_process+0x3ee>
 800608e:	459b      	cmp	fp, r3
 8006090:	4628      	mov	r0, r5
 8006092:	bf38      	it	cc
 8006094:	469b      	movcc	fp, r3
 8006096:	f002 f99d 	bl	80083d4 <get_tensor_byte_size>
 800609a:	f8c8 0008 	str.w	r0, [r8, #8]
 800609e:	69a3      	ldr	r3, [r4, #24]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	fb00 f303 	mul.w	r3, r0, r3
 80060a6:	f8c8 300c 	str.w	r3, [r8, #12]
 80060aa:	6861      	ldr	r1, [r4, #4]
 80060ac:	f8c8 1004 	str.w	r1, [r8, #4]
 80060b0:	0132      	lsls	r2, r6, #4
 80060b2:	440b      	add	r3, r1
 80060b4:	f84a 3002 	str.w	r3, [sl, r2]
 80060b8:	69a8      	ldr	r0, [r5, #24]
 80060ba:	6803      	ldr	r3, [r0, #0]
 80060bc:	009a      	lsls	r2, r3, #2
 80060be:	f106 0601 	add.w	r6, r6, #1
 80060c2:	f104 041c 	add.w	r4, r4, #28
 80060c6:	f100 80a7 	bmi.w	8006218 <ai_platform_network_process+0x274>
 80060ca:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80060ce:	1a9b      	subs	r3, r3, r2
 80060d0:	4419      	add	r1, r3
 80060d2:	6081      	str	r1, [r0, #8]
 80060d4:	69ab      	ldr	r3, [r5, #24]
 80060d6:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80060da:	60da      	str	r2, [r3, #12]
 80060dc:	f8b9 3000 	ldrh.w	r3, [r9]
 80060e0:	42b3      	cmp	r3, r6
 80060e2:	d888      	bhi.n	8005ff6 <ai_platform_network_process+0x52>
 80060e4:	e9dd 7802 	ldrd	r7, r8, [sp, #8]
 80060e8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80060ea:	f1b8 0f00 	cmp.w	r8, #0
 80060ee:	f000 80b5 	beq.w	800625c <ai_platform_network_process+0x2b8>
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	f240 80a5 	bls.w	8006242 <ai_platform_network_process+0x29e>
 80060f8:	f8d7 9034 	ldr.w	r9, [r7, #52]	@ 0x34
 80060fc:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8006100:	2b00      	cmp	r3, #0
 8006102:	f000 809e 	beq.w	8006242 <ai_platform_network_process+0x29e>
 8006106:	4645      	mov	r5, r8
 8006108:	2600      	movs	r6, #0
 800610a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800610e:	2b00      	cmp	r3, #0
 8006110:	f000 80a3 	beq.w	800625a <ai_platform_network_process+0x2b6>
 8006114:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 8006118:	2c00      	cmp	r4, #0
 800611a:	f000 809e 	beq.w	800625a <ai_platform_network_process+0x2b6>
 800611e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8006122:	f8d3 a000 	ldr.w	sl, [r3]
 8006126:	0133      	lsls	r3, r6, #4
 8006128:	eb1a 1806 	adds.w	r8, sl, r6, lsl #4
 800612c:	9301      	str	r3, [sp, #4]
 800612e:	f000 8140 	beq.w	80063b2 <ai_platform_network_process+0x40e>
 8006132:	69a3      	ldr	r3, [r4, #24]
 8006134:	2101      	movs	r1, #1
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	9301      	str	r3, [sp, #4]
 800613a:	4628      	mov	r0, r5
 800613c:	f7ff fc1e 	bl	800597c <ai_buffer_get_size>
 8006140:	9b01      	ldr	r3, [sp, #4]
 8006142:	4283      	cmp	r3, r0
 8006144:	d37d      	bcc.n	8006242 <ai_platform_network_process+0x29e>
 8006146:	68e0      	ldr	r0, [r4, #12]
 8006148:	69a9      	ldr	r1, [r5, #24]
 800614a:	68c2      	ldr	r2, [r0, #12]
 800614c:	68cb      	ldr	r3, [r1, #12]
 800614e:	429a      	cmp	r2, r3
 8006150:	d177      	bne.n	8006242 <ai_platform_network_process+0x29e>
 8006152:	6882      	ldr	r2, [r0, #8]
 8006154:	688b      	ldr	r3, [r1, #8]
 8006156:	429a      	cmp	r2, r3
 8006158:	d173      	bne.n	8006242 <ai_platform_network_process+0x29e>
 800615a:	6842      	ldr	r2, [r0, #4]
 800615c:	684b      	ldr	r3, [r1, #4]
 800615e:	429a      	cmp	r2, r3
 8006160:	d16f      	bne.n	8006242 <ai_platform_network_process+0x29e>
 8006162:	69a3      	ldr	r3, [r4, #24]
 8006164:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006168:	f002 f91c 	bl	80083a4 <ai_array_get_data_byte_size>
 800616c:	9001      	str	r0, [sp, #4]
 800616e:	4620      	mov	r0, r4
 8006170:	f002 f930 	bl	80083d4 <get_tensor_byte_size>
 8006174:	9b01      	ldr	r3, [sp, #4]
 8006176:	4283      	cmp	r3, r0
 8006178:	d363      	bcc.n	8006242 <ai_platform_network_process+0x29e>
 800617a:	69a3      	ldr	r3, [r4, #24]
 800617c:	6818      	ldr	r0, [r3, #0]
 800617e:	f002 f883 	bl	8008288 <ai_array_to_buffer_fmt>
 8006182:	682b      	ldr	r3, [r5, #0]
 8006184:	4043      	eors	r3, r0
 8006186:	f033 437e 	bics.w	r3, r3, #4261412864	@ 0xfe000000
 800618a:	f040 8119 	bne.w	80063c0 <ai_platform_network_process+0x41c>
 800618e:	686b      	ldr	r3, [r5, #4]
 8006190:	2b00      	cmp	r3, #0
 8006192:	f000 810e 	beq.w	80063b2 <ai_platform_network_process+0x40e>
 8006196:	69ab      	ldr	r3, [r5, #24]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	2b00      	cmp	r3, #0
 800619c:	f000 8117 	beq.w	80063ce <ai_platform_network_process+0x42a>
 80061a0:	459b      	cmp	fp, r3
 80061a2:	4620      	mov	r0, r4
 80061a4:	bf38      	it	cc
 80061a6:	469b      	movcc	fp, r3
 80061a8:	f002 f914 	bl	80083d4 <get_tensor_byte_size>
 80061ac:	f8c8 0008 	str.w	r0, [r8, #8]
 80061b0:	69aa      	ldr	r2, [r5, #24]
 80061b2:	6812      	ldr	r2, [r2, #0]
 80061b4:	4603      	mov	r3, r0
 80061b6:	fb02 f303 	mul.w	r3, r2, r3
 80061ba:	f8c8 300c 	str.w	r3, [r8, #12]
 80061be:	6869      	ldr	r1, [r5, #4]
 80061c0:	f8c8 1004 	str.w	r1, [r8, #4]
 80061c4:	0132      	lsls	r2, r6, #4
 80061c6:	440b      	add	r3, r1
 80061c8:	f84a 3002 	str.w	r3, [sl, r2]
 80061cc:	69a0      	ldr	r0, [r4, #24]
 80061ce:	6803      	ldr	r3, [r0, #0]
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	f106 0601 	add.w	r6, r6, #1
 80061d6:	f105 051c 	add.w	r5, r5, #28
 80061da:	d439      	bmi.n	8006250 <ai_platform_network_process+0x2ac>
 80061dc:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80061e0:	1a9b      	subs	r3, r3, r2
 80061e2:	4419      	add	r1, r3
 80061e4:	6081      	str	r1, [r0, #8]
 80061e6:	69a3      	ldr	r3, [r4, #24]
 80061e8:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80061ec:	60da      	str	r2, [r3, #12]
 80061ee:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80061f2:	429e      	cmp	r6, r3
 80061f4:	d389      	bcc.n	800610a <ai_platform_network_process+0x166>
 80061f6:	e030      	b.n	800625a <ai_platform_network_process+0x2b6>
 80061f8:	693a      	ldr	r2, [r7, #16]
 80061fa:	61bb      	str	r3, [r7, #24]
 80061fc:	f002 0203 	and.w	r2, r2, #3
 8006200:	2a03      	cmp	r2, #3
 8006202:	d10f      	bne.n	8006224 <ai_platform_network_process+0x280>
 8006204:	2217      	movs	r2, #23
 8006206:	2112      	movs	r1, #18
 8006208:	f107 000c 	add.w	r0, r7, #12
 800620c:	f000 f8ee 	bl	80063ec <core_set_error>
 8006210:	2000      	movs	r0, #0
 8006212:	b005      	add	sp, #20
 8006214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006218:	f8b9 3000 	ldrh.w	r3, [r9]
 800621c:	429e      	cmp	r6, r3
 800621e:	f4ff aeea 	bcc.w	8005ff6 <ai_platform_network_process+0x52>
 8006222:	e75f      	b.n	80060e4 <ai_platform_network_process+0x140>
 8006224:	2230      	movs	r2, #48	@ 0x30
 8006226:	2111      	movs	r1, #17
 8006228:	f107 000c 	add.w	r0, r7, #12
 800622c:	f000 f8de 	bl	80063ec <core_set_error>
 8006230:	e7ee      	b.n	8006210 <ai_platform_network_process+0x26c>
 8006232:	9f02      	ldr	r7, [sp, #8]
 8006234:	2218      	movs	r2, #24
 8006236:	2112      	movs	r1, #18
 8006238:	f107 000c 	add.w	r0, r7, #12
 800623c:	f000 f8d6 	bl	80063ec <core_set_error>
 8006240:	e7e6      	b.n	8006210 <ai_platform_network_process+0x26c>
 8006242:	2218      	movs	r2, #24
 8006244:	2113      	movs	r1, #19
 8006246:	f107 000c 	add.w	r0, r7, #12
 800624a:	f000 f8cf 	bl	80063ec <core_set_error>
 800624e:	e7df      	b.n	8006210 <ai_platform_network_process+0x26c>
 8006250:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8006254:	429e      	cmp	r6, r3
 8006256:	f4ff af58 	bcc.w	800610a <ai_platform_network_process+0x166>
 800625a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800625c:	fa1f fb8b 	uxth.w	fp, fp
 8006260:	f8a7 b018 	strh.w	fp, [r7, #24]
 8006264:	2b00      	cmp	r3, #0
 8006266:	f000 808c 	beq.w	8006382 <ai_platform_network_process+0x3de>
 800626a:	2b01      	cmp	r3, #1
 800626c:	6b7e      	ldr	r6, [r7, #52]	@ 0x34
 800626e:	f000 808b 	beq.w	8006388 <ai_platform_network_process+0x3e4>
 8006272:	f106 080c 	add.w	r8, r6, #12
 8006276:	8b78      	ldrh	r0, [r7, #26]
 8006278:	4583      	cmp	fp, r0
 800627a:	d9ca      	bls.n	8006212 <ai_platform_network_process+0x26e>
 800627c:	4645      	mov	r5, r8
 800627e:	46bb      	mov	fp, r7
 8006280:	f04f 0800 	mov.w	r8, #0
 8006284:	b9ae      	cbnz	r6, 80062b2 <ai_platform_network_process+0x30e>
 8006286:	e02d      	b.n	80062e4 <ai_platform_network_process+0x340>
 8006288:	a1c00100 	.word	0xa1c00100
 800628c:	68df      	ldr	r7, [r3, #12]
 800628e:	1bc9      	subs	r1, r1, r7
 8006290:	4408      	add	r0, r1
 8006292:	6098      	str	r0, [r3, #8]
 8006294:	6993      	ldr	r3, [r2, #24]
 8006296:	6862      	ldr	r2, [r4, #4]
 8006298:	60da      	str	r2, [r3, #12]
 800629a:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 800629e:	f859 200a 	ldr.w	r2, [r9, sl]
 80062a2:	440b      	add	r3, r1
 80062a4:	4293      	cmp	r3, r2
 80062a6:	bf24      	itt	cs
 80062a8:	68e3      	ldrcs	r3, [r4, #12]
 80062aa:	1ad3      	subcs	r3, r2, r3
 80062ac:	6063      	str	r3, [r4, #4]
 80062ae:	f108 0801 	add.w	r8, r8, #1
 80062b2:	8833      	ldrh	r3, [r6, #0]
 80062b4:	4543      	cmp	r3, r8
 80062b6:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 80062ba:	d913      	bls.n	80062e4 <ai_platform_network_process+0x340>
 80062bc:	6873      	ldr	r3, [r6, #4]
 80062be:	b18b      	cbz	r3, 80062e4 <ai_platform_network_process+0x340>
 80062c0:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
 80062c4:	b172      	cbz	r2, 80062e4 <ai_platform_network_process+0x340>
 80062c6:	68b1      	ldr	r1, [r6, #8]
 80062c8:	6993      	ldr	r3, [r2, #24]
 80062ca:	f8d1 9000 	ldr.w	r9, [r1]
 80062ce:	681f      	ldr	r7, [r3, #0]
 80062d0:	6899      	ldr	r1, [r3, #8]
 80062d2:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 80062d6:	00bf      	lsls	r7, r7, #2
 80062d8:	6860      	ldr	r0, [r4, #4]
 80062da:	d5d7      	bpl.n	800628c <ai_platform_network_process+0x2e8>
 80062dc:	68a2      	ldr	r2, [r4, #8]
 80062de:	f001 ff35 	bl	800814c <st_int8_copy>
 80062e2:	e7da      	b.n	800629a <ai_platform_network_process+0x2f6>
 80062e4:	4658      	mov	r0, fp
 80062e6:	f000 f8e5 	bl	80064b4 <ai_layers_forward_all>
 80062ea:	2400      	movs	r4, #0
 80062ec:	b9b5      	cbnz	r5, 800631c <ai_platform_network_process+0x378>
 80062ee:	e03b      	b.n	8006368 <ai_platform_network_process+0x3c4>
 80062f0:	f859 300a 	ldr.w	r3, [r9, sl]
 80062f4:	eb01 020c 	add.w	r2, r1, ip
 80062f8:	429a      	cmp	r2, r3
 80062fa:	bf24      	itt	cs
 80062fc:	f8d8 200c 	ldrcs.w	r2, [r8, #12]
 8006300:	1a9a      	subcs	r2, r3, r2
 8006302:	f8c8 2004 	str.w	r2, [r8, #4]
 8006306:	6981      	ldr	r1, [r0, #24]
 8006308:	e9d1 3702 	ldrd	r3, r7, [r1, #8]
 800630c:	1bdb      	subs	r3, r3, r7
 800630e:	441a      	add	r2, r3
 8006310:	608a      	str	r2, [r1, #8]
 8006312:	6983      	ldr	r3, [r0, #24]
 8006314:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8006318:	60da      	str	r2, [r3, #12]
 800631a:	3401      	adds	r4, #1
 800631c:	882b      	ldrh	r3, [r5, #0]
 800631e:	42a3      	cmp	r3, r4
 8006320:	d922      	bls.n	8006368 <ai_platform_network_process+0x3c4>
 8006322:	686b      	ldr	r3, [r5, #4]
 8006324:	b303      	cbz	r3, 8006368 <ai_platform_network_process+0x3c4>
 8006326:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800632a:	b1e8      	cbz	r0, 8006368 <ai_platform_network_process+0x3c4>
 800632c:	68ab      	ldr	r3, [r5, #8]
 800632e:	6982      	ldr	r2, [r0, #24]
 8006330:	f8d3 9000 	ldr.w	r9, [r3]
 8006334:	6813      	ldr	r3, [r2, #0]
 8006336:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	e9d8 1c01 	ldrd	r1, ip, [r8, #4]
 8006340:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8006344:	d5d4      	bpl.n	80062f0 <ai_platform_network_process+0x34c>
 8006346:	6890      	ldr	r0, [r2, #8]
 8006348:	4662      	mov	r2, ip
 800634a:	f001 feff 	bl	800814c <st_int8_copy>
 800634e:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8006352:	f859 200a 	ldr.w	r2, [r9, sl]
 8006356:	440b      	add	r3, r1
 8006358:	4293      	cmp	r3, r2
 800635a:	bf24      	itt	cs
 800635c:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8006360:	1ad3      	subcs	r3, r2, r3
 8006362:	f8c8 3004 	str.w	r3, [r8, #4]
 8006366:	e7d8      	b.n	800631a <ai_platform_network_process+0x376>
 8006368:	f8bb 001a 	ldrh.w	r0, [fp, #26]
 800636c:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 8006370:	3001      	adds	r0, #1
 8006372:	b280      	uxth	r0, r0
 8006374:	4283      	cmp	r3, r0
 8006376:	f8ab 001a 	strh.w	r0, [fp, #26]
 800637a:	d881      	bhi.n	8006280 <ai_platform_network_process+0x2dc>
 800637c:	b005      	add	sp, #20
 800637e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006382:	461e      	mov	r6, r3
 8006384:	4698      	mov	r8, r3
 8006386:	e776      	b.n	8006276 <ai_platform_network_process+0x2d2>
 8006388:	f04f 0800 	mov.w	r8, #0
 800638c:	e773      	b.n	8006276 <ai_platform_network_process+0x2d2>
 800638e:	9f02      	ldr	r7, [sp, #8]
 8006390:	e738      	b.n	8006204 <ai_platform_network_process+0x260>
 8006392:	9f02      	ldr	r7, [sp, #8]
 8006394:	2221      	movs	r2, #33	@ 0x21
 8006396:	2112      	movs	r1, #18
 8006398:	f107 000c 	add.w	r0, r7, #12
 800639c:	f000 f826 	bl	80063ec <core_set_error>
 80063a0:	e736      	b.n	8006210 <ai_platform_network_process+0x26c>
 80063a2:	9f02      	ldr	r7, [sp, #8]
 80063a4:	2219      	movs	r2, #25
 80063a6:	2112      	movs	r1, #18
 80063a8:	f107 000c 	add.w	r0, r7, #12
 80063ac:	f000 f81e 	bl	80063ec <core_set_error>
 80063b0:	e72e      	b.n	8006210 <ai_platform_network_process+0x26c>
 80063b2:	2217      	movs	r2, #23
 80063b4:	2113      	movs	r1, #19
 80063b6:	f107 000c 	add.w	r0, r7, #12
 80063ba:	f000 f817 	bl	80063ec <core_set_error>
 80063be:	e727      	b.n	8006210 <ai_platform_network_process+0x26c>
 80063c0:	2219      	movs	r2, #25
 80063c2:	2113      	movs	r1, #19
 80063c4:	f107 000c 	add.w	r0, r7, #12
 80063c8:	f000 f810 	bl	80063ec <core_set_error>
 80063cc:	e720      	b.n	8006210 <ai_platform_network_process+0x26c>
 80063ce:	2221      	movs	r2, #33	@ 0x21
 80063d0:	2113      	movs	r1, #19
 80063d2:	f107 000c 	add.w	r0, r7, #12
 80063d6:	f000 f809 	bl	80063ec <core_set_error>
 80063da:	e719      	b.n	8006210 <ai_platform_network_process+0x26c>

080063dc <core_init>:
 80063dc:	2001      	movs	r0, #1
 80063de:	4770      	bx	lr

080063e0 <core_get_error>:
 80063e0:	4603      	mov	r3, r0
 80063e2:	2200      	movs	r2, #0
 80063e4:	6800      	ldr	r0, [r0, #0]
 80063e6:	601a      	str	r2, [r3, #0]
 80063e8:	4770      	bx	lr
 80063ea:	bf00      	nop

080063ec <core_set_error>:
 80063ec:	4603      	mov	r3, r0
 80063ee:	7800      	ldrb	r0, [r0, #0]
 80063f0:	b108      	cbz	r0, 80063f6 <core_set_error+0xa>
 80063f2:	2000      	movs	r0, #0
 80063f4:	4770      	bx	lr
 80063f6:	7019      	strb	r1, [r3, #0]
 80063f8:	6819      	ldr	r1, [r3, #0]
 80063fa:	f362 211f 	bfi	r1, r2, #8, #24
 80063fe:	2001      	movs	r0, #1
 8006400:	6019      	str	r1, [r3, #0]
 8006402:	4770      	bx	lr

08006404 <ai_check_custom_types>:
 8006404:	b082      	sub	sp, #8
 8006406:	4b13      	ldr	r3, [pc, #76]	@ (8006454 <ai_check_custom_types+0x50>)
 8006408:	9301      	str	r3, [sp, #4]
 800640a:	b118      	cbz	r0, 8006414 <ai_check_custom_types+0x10>
 800640c:	7803      	ldrb	r3, [r0, #0]
 800640e:	2b03      	cmp	r3, #3
 8006410:	d002      	beq.n	8006418 <ai_check_custom_types+0x14>
 8006412:	2000      	movs	r0, #0
 8006414:	b002      	add	sp, #8
 8006416:	4770      	bx	lr
 8006418:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800641c:	4293      	cmp	r3, r2
 800641e:	d004      	beq.n	800642a <ai_check_custom_types+0x26>
 8006420:	2001      	movs	r0, #1
 8006422:	f080 0001 	eor.w	r0, r0, #1
 8006426:	b002      	add	sp, #8
 8006428:	4770      	bx	lr
 800642a:	7842      	ldrb	r2, [r0, #1]
 800642c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8006430:	429a      	cmp	r2, r3
 8006432:	f100 0001 	add.w	r0, r0, #1
 8006436:	d1f3      	bne.n	8006420 <ai_check_custom_types+0x1c>
 8006438:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800643c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8006440:	429a      	cmp	r2, r3
 8006442:	d1ed      	bne.n	8006420 <ai_check_custom_types+0x1c>
 8006444:	7842      	ldrb	r2, [r0, #1]
 8006446:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800644a:	429a      	cmp	r2, r3
 800644c:	d1e8      	bne.n	8006420 <ai_check_custom_types+0x1c>
 800644e:	2000      	movs	r0, #0
 8006450:	e7e7      	b.n	8006422 <ai_check_custom_types+0x1e>
 8006452:	bf00      	nop
 8006454:	84048403 	.word	0x84048403

08006458 <ai_layers_init_all>:
 8006458:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800645a:	4601      	mov	r1, r0
 800645c:	b153      	cbz	r3, 8006474 <ai_layers_init_all+0x1c>
 800645e:	2000      	movs	r0, #0
 8006460:	461a      	mov	r2, r3
 8006462:	60d9      	str	r1, [r3, #12]
 8006464:	691b      	ldr	r3, [r3, #16]
 8006466:	4293      	cmp	r3, r2
 8006468:	f100 0001 	add.w	r0, r0, #1
 800646c:	d003      	beq.n	8006476 <ai_layers_init_all+0x1e>
 800646e:	2b00      	cmp	r3, #0
 8006470:	d1f6      	bne.n	8006460 <ai_layers_init_all+0x8>
 8006472:	4770      	bx	lr
 8006474:	4618      	mov	r0, r3
 8006476:	4770      	bx	lr

08006478 <ai_layers_post_init_all>:
 8006478:	b538      	push	{r3, r4, r5, lr}
 800647a:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 800647c:	b1b4      	cbz	r4, 80064ac <ai_layers_post_init_all+0x34>
 800647e:	6863      	ldr	r3, [r4, #4]
 8006480:	07db      	lsls	r3, r3, #31
 8006482:	f04f 0500 	mov.w	r5, #0
 8006486:	d504      	bpl.n	8006492 <ai_layers_post_init_all+0x1a>
 8006488:	6a23      	ldr	r3, [r4, #32]
 800648a:	4620      	mov	r0, r4
 800648c:	b10b      	cbz	r3, 8006492 <ai_layers_post_init_all+0x1a>
 800648e:	4798      	blx	r3
 8006490:	3501      	adds	r5, #1
 8006492:	6923      	ldr	r3, [r4, #16]
 8006494:	42a3      	cmp	r3, r4
 8006496:	d007      	beq.n	80064a8 <ai_layers_post_init_all+0x30>
 8006498:	b133      	cbz	r3, 80064a8 <ai_layers_post_init_all+0x30>
 800649a:	461c      	mov	r4, r3
 800649c:	6863      	ldr	r3, [r4, #4]
 800649e:	07db      	lsls	r3, r3, #31
 80064a0:	d4f2      	bmi.n	8006488 <ai_layers_post_init_all+0x10>
 80064a2:	6923      	ldr	r3, [r4, #16]
 80064a4:	42a3      	cmp	r3, r4
 80064a6:	d1f7      	bne.n	8006498 <ai_layers_post_init_all+0x20>
 80064a8:	4628      	mov	r0, r5
 80064aa:	bd38      	pop	{r3, r4, r5, pc}
 80064ac:	4625      	mov	r5, r4
 80064ae:	4628      	mov	r0, r5
 80064b0:	bd38      	pop	{r3, r4, r5, pc}
 80064b2:	bf00      	nop

080064b4 <ai_layers_forward_all>:
 80064b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064b8:	f8d0 8040 	ldr.w	r8, [r0, #64]	@ 0x40
 80064bc:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 80064be:	63c5      	str	r5, [r0, #60]	@ 0x3c
 80064c0:	4604      	mov	r4, r0
 80064c2:	f1b8 0f00 	cmp.w	r8, #0
 80064c6:	d02a      	beq.n	800651e <ai_layers_forward_all+0x6a>
 80064c8:	b32d      	cbz	r5, 8006516 <ai_layers_forward_all+0x62>
 80064ca:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 80064cc:	4629      	mov	r1, r5
 80064ce:	2001      	movs	r0, #1
 80064d0:	47c0      	blx	r8
 80064d2:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 80064d4:	b1fe      	cbz	r6, 8006516 <ai_layers_forward_all+0x62>
 80064d6:	2700      	movs	r7, #0
 80064d8:	4631      	mov	r1, r6
 80064da:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80064dc:	2002      	movs	r0, #2
 80064de:	47c0      	blx	r8
 80064e0:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 80064e2:	4628      	mov	r0, r5
 80064e4:	696b      	ldr	r3, [r5, #20]
 80064e6:	4798      	blx	r3
 80064e8:	692e      	ldr	r6, [r5, #16]
 80064ea:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80064ec:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80064ee:	42b5      	cmp	r5, r6
 80064f0:	f04f 0003 	mov.w	r0, #3
 80064f4:	d007      	beq.n	8006506 <ai_layers_forward_all+0x52>
 80064f6:	47c0      	blx	r8
 80064f8:	3701      	adds	r7, #1
 80064fa:	63e6      	str	r6, [r4, #60]	@ 0x3c
 80064fc:	2e00      	cmp	r6, #0
 80064fe:	d1eb      	bne.n	80064d8 <ai_layers_forward_all+0x24>
 8006500:	4638      	mov	r0, r7
 8006502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006506:	2003      	movs	r0, #3
 8006508:	47c0      	blx	r8
 800650a:	2300      	movs	r3, #0
 800650c:	3701      	adds	r7, #1
 800650e:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8006510:	4638      	mov	r0, r7
 8006512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006516:	2700      	movs	r7, #0
 8006518:	4638      	mov	r0, r7
 800651a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800651e:	2d00      	cmp	r5, #0
 8006520:	d0f9      	beq.n	8006516 <ai_layers_forward_all+0x62>
 8006522:	4647      	mov	r7, r8
 8006524:	696b      	ldr	r3, [r5, #20]
 8006526:	4628      	mov	r0, r5
 8006528:	4798      	blx	r3
 800652a:	462b      	mov	r3, r5
 800652c:	692d      	ldr	r5, [r5, #16]
 800652e:	429d      	cmp	r5, r3
 8006530:	d004      	beq.n	800653c <ai_layers_forward_all+0x88>
 8006532:	63e5      	str	r5, [r4, #60]	@ 0x3c
 8006534:	3701      	adds	r7, #1
 8006536:	2d00      	cmp	r5, #0
 8006538:	d1f4      	bne.n	8006524 <ai_layers_forward_all+0x70>
 800653a:	e7e1      	b.n	8006500 <ai_layers_forward_all+0x4c>
 800653c:	2300      	movs	r3, #0
 800653e:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8006540:	3701      	adds	r7, #1
 8006542:	e7dd      	b.n	8006500 <ai_layers_forward_all+0x4c>

08006544 <forward_conv2d_if32of32wf32_nl_pool>:
 8006544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006548:	f8d0 c018 	ldr.w	ip, [r0, #24]
 800654c:	b0c3      	sub	sp, #268	@ 0x10c
 800654e:	f8bc 3000 	ldrh.w	r3, [ip]
 8006552:	9321      	str	r3, [sp, #132]	@ 0x84
 8006554:	2b00      	cmp	r3, #0
 8006556:	f000 8137 	beq.w	80067c8 <forward_conv2d_if32of32wf32_nl_pool+0x284>
 800655a:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800655e:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8006562:	4604      	mov	r4, r0
 8006564:	f1b9 0f00 	cmp.w	r9, #0
 8006568:	d001      	beq.n	800656e <forward_conv2d_if32of32wf32_nl_pool+0x2a>
 800656a:	f8d9 9000 	ldr.w	r9, [r9]
 800656e:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006570:	2a01      	cmp	r2, #1
 8006572:	f000 8128 	beq.w	80067c6 <forward_conv2d_if32of32wf32_nl_pool+0x282>
 8006576:	f8d3 8010 	ldr.w	r8, [r3, #16]
 800657a:	f1b8 0f00 	cmp.w	r8, #0
 800657e:	d001      	beq.n	8006584 <forward_conv2d_if32of32wf32_nl_pool+0x40>
 8006580:	f8d8 8000 	ldr.w	r8, [r8]
 8006584:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006586:	2a02      	cmp	r2, #2
 8006588:	f000 811d 	beq.w	80067c6 <forward_conv2d_if32of32wf32_nl_pool+0x282>
 800658c:	69da      	ldr	r2, [r3, #28]
 800658e:	2a00      	cmp	r2, #0
 8006590:	f000 8140 	beq.w	8006814 <forward_conv2d_if32of32wf32_nl_pool+0x2d0>
 8006594:	8b1b      	ldrh	r3, [r3, #24]
 8006596:	f8d2 b000 	ldr.w	fp, [r2]
 800659a:	2b01      	cmp	r3, #1
 800659c:	f240 8128 	bls.w	80067f0 <forward_conv2d_if32of32wf32_nl_pool+0x2ac>
 80065a0:	6853      	ldr	r3, [r2, #4]
 80065a2:	9341      	str	r3, [sp, #260]	@ 0x104
 80065a4:	f8d2 a008 	ldr.w	sl, [r2, #8]
 80065a8:	f8d9 200c 	ldr.w	r2, [r9, #12]
 80065ac:	f8d8 100c 	ldr.w	r1, [r8, #12]
 80065b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80065b2:	f8db e00c 	ldr.w	lr, [fp, #12]
 80065b6:	9022      	str	r0, [sp, #136]	@ 0x88
 80065b8:	f9b2 0004 	ldrsh.w	r0, [r2, #4]
 80065bc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80065be:	9031      	str	r0, [sp, #196]	@ 0xc4
 80065c0:	f9b1 0004 	ldrsh.w	r0, [r1, #4]
 80065c4:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 80065c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80065c8:	f8de 7004 	ldr.w	r7, [lr, #4]
 80065cc:	9032      	str	r0, [sp, #200]	@ 0xc8
 80065ce:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 80065d2:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 80065d6:	9527      	str	r5, [sp, #156]	@ 0x9c
 80065d8:	9628      	str	r6, [sp, #160]	@ 0xa0
 80065da:	681d      	ldr	r5, [r3, #0]
 80065dc:	685e      	ldr	r6, [r3, #4]
 80065de:	972b      	str	r7, [sp, #172]	@ 0xac
 80065e0:	9134      	str	r1, [sp, #208]	@ 0xd0
 80065e2:	f8de 7008 	ldr.w	r7, [lr, #8]
 80065e6:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
 80065ea:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80065ee:	9529      	str	r5, [sp, #164]	@ 0xa4
 80065f0:	962a      	str	r6, [sp, #168]	@ 0xa8
 80065f2:	9730      	str	r7, [sp, #192]	@ 0xc0
 80065f4:	e9d4 560c 	ldrd	r5, r6, [r4, #48]	@ 0x30
 80065f8:	9033      	str	r0, [sp, #204]	@ 0xcc
 80065fa:	9123      	str	r1, [sp, #140]	@ 0x8c
 80065fc:	9224      	str	r2, [sp, #144]	@ 0x90
 80065fe:	689a      	ldr	r2, [r3, #8]
 8006600:	68db      	ldr	r3, [r3, #12]
 8006602:	932f      	str	r3, [sp, #188]	@ 0xbc
 8006604:	f9b4 301c 	ldrsh.w	r3, [r4, #28]
 8006608:	9339      	str	r3, [sp, #228]	@ 0xe4
 800660a:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	@ 0x44
 800660e:	922e      	str	r2, [sp, #184]	@ 0xb8
 8006610:	933c      	str	r3, [sp, #240]	@ 0xf0
 8006612:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006614:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	@ 0x4c
 8006618:	933d      	str	r3, [sp, #244]	@ 0xf4
 800661a:	f9b4 3050 	ldrsh.w	r3, [r4, #80]	@ 0x50
 800661e:	933e      	str	r3, [sp, #248]	@ 0xf8
 8006620:	f9b2 3000 	ldrsh.w	r3, [r2]
 8006624:	933f      	str	r3, [sp, #252]	@ 0xfc
 8006626:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 800662a:	9340      	str	r3, [sp, #256]	@ 0x100
 800662c:	6a23      	ldr	r3, [r4, #32]
 800662e:	9322      	str	r3, [sp, #136]	@ 0x88
 8006630:	f8bd 309c 	ldrh.w	r3, [sp, #156]	@ 0x9c
 8006634:	9335      	str	r3, [sp, #212]	@ 0xd4
 8006636:	f8bd 30a0 	ldrh.w	r3, [sp, #160]	@ 0xa0
 800663a:	9336      	str	r3, [sp, #216]	@ 0xd8
 800663c:	f8bd 30a4 	ldrh.w	r3, [sp, #164]	@ 0xa4
 8006640:	9337      	str	r3, [sp, #220]	@ 0xdc
 8006642:	f8bd 30a8 	ldrh.w	r3, [sp, #168]	@ 0xa8
 8006646:	9338      	str	r3, [sp, #224]	@ 0xe0
 8006648:	b2ab      	uxth	r3, r5
 800664a:	933a      	str	r3, [sp, #232]	@ 0xe8
 800664c:	b2b3      	uxth	r3, r6
 800664e:	933b      	str	r3, [sp, #236]	@ 0xec
 8006650:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	@ 0xac
 8006654:	9325      	str	r3, [sp, #148]	@ 0x94
 8006656:	b23b      	sxth	r3, r7
 8006658:	9326      	str	r3, [sp, #152]	@ 0x98
 800665a:	f1ba 0f00 	cmp.w	sl, #0
 800665e:	f000 80b5 	beq.w	80067cc <forward_conv2d_if32of32wf32_nl_pool+0x288>
 8006662:	f8da 2018 	ldr.w	r2, [sl, #24]
 8006666:	2a00      	cmp	r2, #0
 8006668:	f000 80b9 	beq.w	80067de <forward_conv2d_if32of32wf32_nl_pool+0x29a>
 800666c:	6893      	ldr	r3, [r2, #8]
 800666e:	9322      	str	r3, [sp, #136]	@ 0x88
 8006670:	e9d2 0100 	ldrd	r0, r1, [r2]
 8006674:	f001 fe78 	bl	8008368 <ai_array_get_byte_size>
 8006678:	f8da 2018 	ldr.w	r2, [sl, #24]
 800667c:	902c      	str	r0, [sp, #176]	@ 0xb0
 800667e:	2a00      	cmp	r2, #0
 8006680:	f000 80bd 	beq.w	80067fe <forward_conv2d_if32of32wf32_nl_pool+0x2ba>
 8006684:	e9d2 0100 	ldrd	r0, r1, [r2]
 8006688:	f001 fe6e 	bl	8008368 <ai_array_get_byte_size>
 800668c:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8006690:	902d      	str	r0, [sp, #180]	@ 0xb4
 8006692:	f8bc 3000 	ldrh.w	r3, [ip]
 8006696:	9321      	str	r3, [sp, #132]	@ 0x84
 8006698:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800669a:	f8d9 1018 	ldr.w	r1, [r9, #24]
 800669e:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 80066a0:	f8d8 9018 	ldr.w	r9, [r8, #24]
 80066a4:	f8d0 8018 	ldr.w	r8, [r0, #24]
 80066a8:	6888      	ldr	r0, [r1, #8]
 80066aa:	f8d9 1008 	ldr.w	r1, [r9, #8]
 80066ae:	f8d8 9008 	ldr.w	r9, [r8, #8]
 80066b2:	f8bd a09c 	ldrh.w	sl, [sp, #156]	@ 0x9c
 80066b6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80066b8:	f8db 2018 	ldr.w	r2, [fp, #24]
 80066bc:	f8bd e0a0 	ldrh.w	lr, [sp, #160]	@ 0xa0
 80066c0:	f8d4 b05c 	ldr.w	fp, [r4, #92]	@ 0x5c
 80066c4:	6892      	ldr	r2, [r2, #8]
 80066c6:	f107 38ff 	add.w	r8, r7, #4294967295
 80066ca:	b2ad      	uxth	r5, r5
 80066cc:	9f2b      	ldr	r7, [sp, #172]	@ 0xac
 80066ce:	3d01      	subs	r5, #1
 80066d0:	fb15 7508 	smlabb	r5, r5, r8, r7
 80066d4:	fa0f f885 	sxth.w	r8, r5
 80066d8:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 80066da:	9f30      	ldr	r7, [sp, #192]	@ 0xc0
 80066dc:	b2b6      	uxth	r6, r6
 80066de:	3d01      	subs	r5, #1
 80066e0:	3e01      	subs	r6, #1
 80066e2:	fb16 7605 	smlabb	r6, r6, r5, r7
 80066e6:	9d24      	ldr	r5, [sp, #144]	@ 0x90
 80066e8:	9f2a      	ldr	r7, [sp, #168]	@ 0xa8
 80066ea:	eba5 0508 	sub.w	r5, r5, r8
 80066ee:	fa15 f587 	uxtah	r5, r5, r7
 80066f2:	9f2f      	ldr	r7, [sp, #188]	@ 0xbc
 80066f4:	fa15 f587 	uxtah	r5, r5, r7
 80066f8:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
 80066fa:	fb95 f5fa 	sdiv	r5, r5, sl
 80066fe:	b236      	sxth	r6, r6
 8006700:	eba7 0a06 	sub.w	sl, r7, r6
 8006704:	9f29      	ldr	r7, [sp, #164]	@ 0xa4
 8006706:	fa1a fa87 	uxtah	sl, sl, r7
 800670a:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 800670c:	3501      	adds	r5, #1
 800670e:	2b03      	cmp	r3, #3
 8006710:	fa1a fa87 	uxtah	sl, sl, r7
 8006714:	b22d      	sxth	r5, r5
 8006716:	fb9a fefe 	sdiv	lr, sl, lr
 800671a:	f8d4 a024 	ldr.w	sl, [r4, #36]	@ 0x24
 800671e:	f9b4 4048 	ldrsh.w	r4, [r4, #72]	@ 0x48
 8006722:	f10e 0e01 	add.w	lr, lr, #1
 8006726:	d94e      	bls.n	80067c6 <forward_conv2d_if32of32wf32_nl_pool+0x282>
 8006728:	f8dc 7004 	ldr.w	r7, [ip, #4]
 800672c:	f8d7 c028 	ldr.w	ip, [r7, #40]	@ 0x28
 8006730:	f1bc 0f00 	cmp.w	ip, #0
 8006734:	d06b      	beq.n	800680e <forward_conv2d_if32of32wf32_nl_pool+0x2ca>
 8006736:	f8dc 7000 	ldr.w	r7, [ip]
 800673a:	b10f      	cbz	r7, 8006740 <forward_conv2d_if32of32wf32_nl_pool+0x1fc>
 800673c:	69bf      	ldr	r7, [r7, #24]
 800673e:	68bf      	ldr	r7, [r7, #8]
 8006740:	9b3f      	ldr	r3, [sp, #252]	@ 0xfc
 8006742:	931f      	str	r3, [sp, #124]	@ 0x7c
 8006744:	9b40      	ldr	r3, [sp, #256]	@ 0x100
 8006746:	931e      	str	r3, [sp, #120]	@ 0x78
 8006748:	9b3e      	ldr	r3, [sp, #248]	@ 0xf8
 800674a:	931d      	str	r3, [sp, #116]	@ 0x74
 800674c:	9b3d      	ldr	r3, [sp, #244]	@ 0xf4
 800674e:	9513      	str	r5, [sp, #76]	@ 0x4c
 8006750:	e9cd 431b 	strd	r4, r3, [sp, #108]	@ 0x6c
 8006754:	9b3c      	ldr	r3, [sp, #240]	@ 0xf0
 8006756:	960e      	str	r6, [sp, #56]	@ 0x38
 8006758:	e9cd b319 	strd	fp, r3, [sp, #100]	@ 0x64
 800675c:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 800675e:	9318      	str	r3, [sp, #96]	@ 0x60
 8006760:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8006762:	9317      	str	r3, [sp, #92]	@ 0x5c
 8006764:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006766:	e9cd a315 	strd	sl, r3, [sp, #84]	@ 0x54
 800676a:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 800676c:	9312      	str	r3, [sp, #72]	@ 0x48
 800676e:	9b3b      	ldr	r3, [sp, #236]	@ 0xec
 8006770:	9311      	str	r3, [sp, #68]	@ 0x44
 8006772:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
 8006774:	e9cd 830f 	strd	r8, r3, [sp, #60]	@ 0x3c
 8006778:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
 800677a:	930d      	str	r3, [sp, #52]	@ 0x34
 800677c:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800677e:	930c      	str	r3, [sp, #48]	@ 0x30
 8006780:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
 8006782:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006784:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 8006786:	930a      	str	r3, [sp, #40]	@ 0x28
 8006788:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800678a:	9309      	str	r3, [sp, #36]	@ 0x24
 800678c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 800678e:	9308      	str	r3, [sp, #32]
 8006790:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 8006792:	9307      	str	r3, [sp, #28]
 8006794:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 8006796:	9306      	str	r3, [sp, #24]
 8006798:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800679a:	9305      	str	r3, [sp, #20]
 800679c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800679e:	9304      	str	r3, [sp, #16]
 80067a0:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 80067a2:	9303      	str	r3, [sp, #12]
 80067a4:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 80067a6:	e9cd 7301 	strd	r7, r3, [sp, #4]
 80067aa:	fa0f f38e 	sxth.w	r3, lr
 80067ae:	9314      	str	r3, [sp, #80]	@ 0x50
 80067b0:	f8dc 4004 	ldr.w	r4, [ip, #4]
 80067b4:	69a4      	ldr	r4, [r4, #24]
 80067b6:	68a4      	ldr	r4, [r4, #8]
 80067b8:	9400      	str	r4, [sp, #0]
 80067ba:	464b      	mov	r3, r9
 80067bc:	f000 f9fa 	bl	8006bb4 <forward_lite_conv2d_if32of32wf32_pool>
 80067c0:	b043      	add	sp, #268	@ 0x10c
 80067c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067c6:	2300      	movs	r3, #0
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	deff      	udf	#255	@ 0xff
 80067cc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80067ce:	b193      	cbz	r3, 80067f6 <forward_conv2d_if32of32wf32_nl_pool+0x2b2>
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	9322      	str	r3, [sp, #136]	@ 0x88
 80067d4:	2301      	movs	r3, #1
 80067d6:	f8cd a0b0 	str.w	sl, [sp, #176]	@ 0xb0
 80067da:	932d      	str	r3, [sp, #180]	@ 0xb4
 80067dc:	e75c      	b.n	8006698 <forward_conv2d_if32of32wf32_nl_pool+0x154>
 80067de:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80067e0:	b10b      	cbz	r3, 80067e6 <forward_conv2d_if32of32wf32_nl_pool+0x2a2>
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	9322      	str	r3, [sp, #136]	@ 0x88
 80067e6:	2200      	movs	r2, #0
 80067e8:	2301      	movs	r3, #1
 80067ea:	e9cd 232c 	strd	r2, r3, [sp, #176]	@ 0xb0
 80067ee:	e753      	b.n	8006698 <forward_conv2d_if32of32wf32_nl_pool+0x154>
 80067f0:	2300      	movs	r3, #0
 80067f2:	9341      	str	r3, [sp, #260]	@ 0x104
 80067f4:	e6d6      	b.n	80065a4 <forward_conv2d_if32of32wf32_nl_pool+0x60>
 80067f6:	932c      	str	r3, [sp, #176]	@ 0xb0
 80067f8:	2301      	movs	r3, #1
 80067fa:	932d      	str	r3, [sp, #180]	@ 0xb4
 80067fc:	e74c      	b.n	8006698 <forward_conv2d_if32of32wf32_nl_pool+0x154>
 80067fe:	2301      	movs	r3, #1
 8006800:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8006804:	932d      	str	r3, [sp, #180]	@ 0xb4
 8006806:	f8bc 3000 	ldrh.w	r3, [ip]
 800680a:	9321      	str	r3, [sp, #132]	@ 0x84
 800680c:	e744      	b.n	8006698 <forward_conv2d_if32of32wf32_nl_pool+0x154>
 800680e:	f8dc 3018 	ldr.w	r3, [ip, #24]
 8006812:	deff      	udf	#255	@ 0xff
 8006814:	68d3      	ldr	r3, [r2, #12]
 8006816:	deff      	udf	#255	@ 0xff

08006818 <forward_dense>:
 8006818:	6982      	ldr	r2, [r0, #24]
 800681a:	8813      	ldrh	r3, [r2, #0]
 800681c:	b90b      	cbnz	r3, 8006822 <forward_dense+0xa>
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	deff      	udf	#255	@ 0xff
 8006822:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006826:	f8d2 a004 	ldr.w	sl, [r2, #4]
 800682a:	f8da 0004 	ldr.w	r0, [sl, #4]
 800682e:	b08e      	sub	sp, #56	@ 0x38
 8006830:	b100      	cbz	r0, 8006834 <forward_dense+0x1c>
 8006832:	6800      	ldr	r0, [r0, #0]
 8006834:	2b01      	cmp	r3, #1
 8006836:	d061      	beq.n	80068fc <forward_dense+0xe4>
 8006838:	f8da 2010 	ldr.w	r2, [sl, #16]
 800683c:	b102      	cbz	r2, 8006840 <forward_dense+0x28>
 800683e:	6812      	ldr	r2, [r2, #0]
 8006840:	2b02      	cmp	r3, #2
 8006842:	d035      	beq.n	80068b0 <forward_dense+0x98>
 8006844:	f8da 501c 	ldr.w	r5, [sl, #28]
 8006848:	2d00      	cmp	r5, #0
 800684a:	d055      	beq.n	80068f8 <forward_dense+0xe0>
 800684c:	f8ba 4018 	ldrh.w	r4, [sl, #24]
 8006850:	6829      	ldr	r1, [r5, #0]
 8006852:	2c01      	cmp	r4, #1
 8006854:	d955      	bls.n	8006902 <forward_dense+0xea>
 8006856:	686d      	ldr	r5, [r5, #4]
 8006858:	698e      	ldr	r6, [r1, #24]
 800685a:	68c4      	ldr	r4, [r0, #12]
 800685c:	68d1      	ldr	r1, [r2, #12]
 800685e:	f8d4 e004 	ldr.w	lr, [r4, #4]
 8006862:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8006866:	e9d1 4702 	ldrd	r4, r7, [r1, #8]
 800686a:	6831      	ldr	r1, [r6, #0]
 800686c:	2b03      	cmp	r3, #3
 800686e:	fb07 f804 	mul.w	r8, r7, r4
 8006872:	f021 4c7e 	bic.w	ip, r1, #4261412864	@ 0xfe000000
 8006876:	d046      	beq.n	8006906 <forward_dense+0xee>
 8006878:	f8da 4028 	ldr.w	r4, [sl, #40]	@ 0x28
 800687c:	b11c      	cbz	r4, 8006886 <forward_dense+0x6e>
 800687e:	6824      	ldr	r4, [r4, #0]
 8006880:	b10c      	cbz	r4, 8006886 <forward_dense+0x6e>
 8006882:	69a3      	ldr	r3, [r4, #24]
 8006884:	689c      	ldr	r4, [r3, #8]
 8006886:	6983      	ldr	r3, [r0, #24]
 8006888:	6992      	ldr	r2, [r2, #24]
 800688a:	6899      	ldr	r1, [r3, #8]
 800688c:	6890      	ldr	r0, [r2, #8]
 800688e:	b10d      	cbz	r5, 8006894 <forward_dense+0x7c>
 8006890:	69ab      	ldr	r3, [r5, #24]
 8006892:	689d      	ldr	r5, [r3, #8]
 8006894:	4f1d      	ldr	r7, [pc, #116]	@ (800690c <forward_dense+0xf4>)
 8006896:	45bc      	cmp	ip, r7
 8006898:	e9d6 2302 	ldrd	r2, r3, [r6, #8]
 800689c:	d022      	beq.n	80068e4 <forward_dense+0xcc>
 800689e:	4e1c      	ldr	r6, [pc, #112]	@ (8006910 <forward_dense+0xf8>)
 80068a0:	45b4      	cmp	ip, r6
 80068a2:	d015      	beq.n	80068d0 <forward_dense+0xb8>
 80068a4:	4b1b      	ldr	r3, [pc, #108]	@ (8006914 <forward_dense+0xfc>)
 80068a6:	459c      	cmp	ip, r3
 80068a8:	d005      	beq.n	80068b6 <forward_dense+0x9e>
 80068aa:	b00e      	add	sp, #56	@ 0x38
 80068ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068b0:	2300      	movs	r3, #0
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	deff      	udf	#255	@ 0xff
 80068b6:	e9cd 0107 	strd	r0, r1, [sp, #28]
 80068ba:	a807      	add	r0, sp, #28
 80068bc:	e9cd 5e0a 	strd	r5, lr, [sp, #40]	@ 0x28
 80068c0:	e9cd 980c 	strd	r9, r8, [sp, #48]	@ 0x30
 80068c4:	9209      	str	r2, [sp, #36]	@ 0x24
 80068c6:	f001 f839 	bl	800793c <forward_lite_dense_if32of32wf32>
 80068ca:	b00e      	add	sp, #56	@ 0x38
 80068cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068d0:	e9cd 9803 	strd	r9, r8, [sp, #12]
 80068d4:	e9cd 5e01 	strd	r5, lr, [sp, #4]
 80068d8:	9400      	str	r4, [sp, #0]
 80068da:	f001 f985 	bl	8007be8 <forward_lite_dense_if32of32wf32_lut4>
 80068de:	b00e      	add	sp, #56	@ 0x38
 80068e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068e4:	e9cd 9803 	strd	r9, r8, [sp, #12]
 80068e8:	e9cd 5e01 	strd	r5, lr, [sp, #4]
 80068ec:	9400      	str	r4, [sp, #0]
 80068ee:	f001 fabf 	bl	8007e70 <forward_lite_dense_if32of32wf32_lut8>
 80068f2:	b00e      	add	sp, #56	@ 0x38
 80068f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068f8:	4629      	mov	r1, r5
 80068fa:	e7ad      	b.n	8006858 <forward_dense+0x40>
 80068fc:	2300      	movs	r3, #0
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	deff      	udf	#255	@ 0xff
 8006902:	2500      	movs	r5, #0
 8006904:	e7a8      	b.n	8006858 <forward_dense+0x40>
 8006906:	2300      	movs	r3, #0
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	deff      	udf	#255	@ 0xff
 800690c:	00d01040 	.word	0x00d01040
 8006910:	00f01040 	.word	0x00f01040
 8006914:	00821040 	.word	0x00821040

08006918 <forward_transpose>:
 8006918:	6983      	ldr	r3, [r0, #24]
 800691a:	8819      	ldrh	r1, [r3, #0]
 800691c:	b909      	cbnz	r1, 8006922 <forward_transpose+0xa>
 800691e:	684b      	ldr	r3, [r1, #4]
 8006920:	deff      	udf	#255	@ 0xff
 8006922:	4602      	mov	r2, r0
 8006924:	6858      	ldr	r0, [r3, #4]
 8006926:	6843      	ldr	r3, [r0, #4]
 8006928:	b103      	cbz	r3, 800692c <forward_transpose+0x14>
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	2901      	cmp	r1, #1
 800692e:	f000 80a4 	beq.w	8006a7a <forward_transpose+0x162>
 8006932:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006936:	6904      	ldr	r4, [r0, #16]
 8006938:	b08b      	sub	sp, #44	@ 0x2c
 800693a:	b104      	cbz	r4, 800693e <forward_transpose+0x26>
 800693c:	6824      	ldr	r4, [r4, #0]
 800693e:	6a15      	ldr	r5, [r2, #32]
 8006940:	6958      	ldr	r0, [r3, #20]
 8006942:	6869      	ldr	r1, [r5, #4]
 8006944:	691e      	ldr	r6, [r3, #16]
 8006946:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 800694a:	9100      	str	r1, [sp, #0]
 800694c:	68a9      	ldr	r1, [r5, #8]
 800694e:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8006952:	9104      	str	r1, [sp, #16]
 8006954:	68e9      	ldr	r1, [r5, #12]
 8006956:	f5b6 6fa0 	cmp.w	r6, #1280	@ 0x500
 800695a:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 800695e:	9105      	str	r1, [sp, #20]
 8006960:	f0c0 8089 	bcc.w	8006a76 <forward_transpose+0x15e>
 8006964:	69d1      	ldr	r1, [r2, #28]
 8006966:	f5b1 6fa0 	cmp.w	r1, #1280	@ 0x500
 800696a:	bf2a      	itet	cs
 800696c:	6929      	ldrcs	r1, [r5, #16]
 800696e:	2104      	movcc	r1, #4
 8006970:	0089      	lslcs	r1, r1, #2
 8006972:	5841      	ldr	r1, [r0, r1]
 8006974:	f026 06ff 	bic.w	r6, r6, #255	@ 0xff
 8006978:	f5b6 6fc0 	cmp.w	r6, #1536	@ 0x600
 800697c:	d071      	beq.n	8006a62 <forward_transpose+0x14a>
 800697e:	2200      	movs	r2, #0
 8006980:	9202      	str	r2, [sp, #8]
 8006982:	699a      	ldr	r2, [r3, #24]
 8006984:	68e3      	ldr	r3, [r4, #12]
 8006986:	6810      	ldr	r0, [r2, #0]
 8006988:	6892      	ldr	r2, [r2, #8]
 800698a:	9201      	str	r2, [sp, #4]
 800698c:	69a2      	ldr	r2, [r4, #24]
 800698e:	6896      	ldr	r6, [r2, #8]
 8006990:	68da      	ldr	r2, [r3, #12]
 8006992:	f3c0 2b83 	ubfx	fp, r0, #10, #4
 8006996:	2a00      	cmp	r2, #0
 8006998:	d060      	beq.n	8006a5c <forward_transpose+0x144>
 800699a:	6898      	ldr	r0, [r3, #8]
 800699c:	2700      	movs	r7, #0
 800699e:	46ba      	mov	sl, r7
 80069a0:	46a0      	mov	r8, r4
 80069a2:	2800      	cmp	r0, #0
 80069a4:	d05a      	beq.n	8006a5c <forward_transpose+0x144>
 80069a6:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80069aa:	f8cd a018 	str.w	sl, [sp, #24]
 80069ae:	f3c5 2517 	ubfx	r5, r5, #8, #24
 80069b2:	2400      	movs	r4, #0
 80069b4:	46ba      	mov	sl, r7
 80069b6:	e9cd 4707 	strd	r4, r7, [sp, #28]
 80069ba:	4628      	mov	r0, r5
 80069bc:	f04f 0900 	mov.w	r9, #0
 80069c0:	4655      	mov	r5, sl
 80069c2:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
 80069c6:	2804      	cmp	r0, #4
 80069c8:	bf8c      	ite	hi
 80069ca:	691f      	ldrhi	r7, [r3, #16]
 80069cc:	2701      	movls	r7, #1
 80069ce:	45b9      	cmp	r9, r7
 80069d0:	d22e      	bcs.n	8006a30 <forward_transpose+0x118>
 80069d2:	46aa      	mov	sl, r5
 80069d4:	2700      	movs	r7, #0
 80069d6:	2805      	cmp	r0, #5
 80069d8:	463d      	mov	r5, r7
 80069da:	9103      	str	r1, [sp, #12]
 80069dc:	4657      	mov	r7, sl
 80069de:	d91f      	bls.n	8006a20 <forward_transpose+0x108>
 80069e0:	695a      	ldr	r2, [r3, #20]
 80069e2:	4295      	cmp	r5, r2
 80069e4:	d21e      	bcs.n	8006a24 <forward_transpose+0x10c>
 80069e6:	685a      	ldr	r2, [r3, #4]
 80069e8:	2400      	movs	r4, #0
 80069ea:	b19a      	cbz	r2, 8006a14 <forward_transpose+0xfc>
 80069ec:	9b00      	ldr	r3, [sp, #0]
 80069ee:	fb03 a004 	mla	r0, r3, r4, sl
 80069f2:	9b01      	ldr	r3, [sp, #4]
 80069f4:	4631      	mov	r1, r6
 80069f6:	4418      	add	r0, r3
 80069f8:	465a      	mov	r2, fp
 80069fa:	f001 fba7 	bl	800814c <st_int8_copy>
 80069fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006a02:	685a      	ldr	r2, [r3, #4]
 8006a04:	3401      	adds	r4, #1
 8006a06:	4294      	cmp	r4, r2
 8006a08:	445e      	add	r6, fp
 8006a0a:	d3ef      	bcc.n	80069ec <forward_transpose+0xd4>
 8006a0c:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8006a10:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8006a14:	9a02      	ldr	r2, [sp, #8]
 8006a16:	2805      	cmp	r0, #5
 8006a18:	f105 0501 	add.w	r5, r5, #1
 8006a1c:	4492      	add	sl, r2
 8006a1e:	d8df      	bhi.n	80069e0 <forward_transpose+0xc8>
 8006a20:	2d00      	cmp	r5, #0
 8006a22:	d0e0      	beq.n	80069e6 <forward_transpose+0xce>
 8006a24:	9903      	ldr	r1, [sp, #12]
 8006a26:	463d      	mov	r5, r7
 8006a28:	f109 0901 	add.w	r9, r9, #1
 8006a2c:	440d      	add	r5, r1
 8006a2e:	e7ca      	b.n	80069c6 <forward_transpose+0xae>
 8006a30:	e9dd 4707 	ldrd	r4, r7, [sp, #28]
 8006a34:	4605      	mov	r5, r0
 8006a36:	6898      	ldr	r0, [r3, #8]
 8006a38:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 8006a3c:	9a04      	ldr	r2, [sp, #16]
 8006a3e:	3401      	adds	r4, #1
 8006a40:	4284      	cmp	r4, r0
 8006a42:	4492      	add	sl, r2
 8006a44:	d3b7      	bcc.n	80069b6 <forward_transpose+0x9e>
 8006a46:	f8dd a018 	ldr.w	sl, [sp, #24]
 8006a4a:	68da      	ldr	r2, [r3, #12]
 8006a4c:	f10a 0a01 	add.w	sl, sl, #1
 8006a50:	4592      	cmp	sl, r2
 8006a52:	d203      	bcs.n	8006a5c <forward_transpose+0x144>
 8006a54:	9a05      	ldr	r2, [sp, #20]
 8006a56:	4417      	add	r7, r2
 8006a58:	2800      	cmp	r0, #0
 8006a5a:	d1a4      	bne.n	80069a6 <forward_transpose+0x8e>
 8006a5c:	b00b      	add	sp, #44	@ 0x2c
 8006a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a62:	69d2      	ldr	r2, [r2, #28]
 8006a64:	f5b2 6fc0 	cmp.w	r2, #1536	@ 0x600
 8006a68:	bf2a      	itet	cs
 8006a6a:	696a      	ldrcs	r2, [r5, #20]
 8006a6c:	2204      	movcc	r2, #4
 8006a6e:	0092      	lslcs	r2, r2, #2
 8006a70:	5882      	ldr	r2, [r0, r2]
 8006a72:	9202      	str	r2, [sp, #8]
 8006a74:	e785      	b.n	8006982 <forward_transpose+0x6a>
 8006a76:	2100      	movs	r1, #0
 8006a78:	e77c      	b.n	8006974 <forward_transpose+0x5c>
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	deff      	udf	#255	@ 0xff

08006a80 <forward_relu>:
 8006a80:	6982      	ldr	r2, [r0, #24]
 8006a82:	8813      	ldrh	r3, [r2, #0]
 8006a84:	b90b      	cbnz	r3, 8006a8a <forward_relu+0xa>
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	deff      	udf	#255	@ 0xff
 8006a8a:	b470      	push	{r4, r5, r6}
 8006a8c:	6852      	ldr	r2, [r2, #4]
 8006a8e:	6854      	ldr	r4, [r2, #4]
 8006a90:	b104      	cbz	r4, 8006a94 <forward_relu+0x14>
 8006a92:	6824      	ldr	r4, [r4, #0]
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	f000 8088 	beq.w	8006baa <forward_relu+0x12a>
 8006a9a:	6913      	ldr	r3, [r2, #16]
 8006a9c:	b103      	cbz	r3, 8006aa0 <forward_relu+0x20>
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	6999      	ldr	r1, [r3, #24]
 8006aa2:	69a2      	ldr	r2, [r4, #24]
 8006aa4:	68a3      	ldr	r3, [r4, #8]
 8006aa6:	69c6      	ldr	r6, [r0, #28]
 8006aa8:	6888      	ldr	r0, [r1, #8]
 8006aaa:	6891      	ldr	r1, [r2, #8]
 8006aac:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8006ab0:	b196      	cbz	r6, 8006ad8 <forward_relu+0x58>
 8006ab2:	6872      	ldr	r2, [r6, #4]
 8006ab4:	2a01      	cmp	r2, #1
 8006ab6:	d03b      	beq.n	8006b30 <forward_relu+0xb0>
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d06d      	beq.n	8006b98 <forward_relu+0x118>
 8006abc:	68e5      	ldr	r5, [r4, #12]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8006ac4:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8006ac8:	429d      	cmp	r5, r3
 8006aca:	fb04 f202 	mul.w	r2, r4, r2
 8006ace:	d1f9      	bne.n	8006ac4 <forward_relu+0x44>
 8006ad0:	68b3      	ldr	r3, [r6, #8]
 8006ad2:	bc70      	pop	{r4, r5, r6}
 8006ad4:	f000 bc86 	b.w	80073e4 <forward_lite_nl_relu_generic_if32of32_kernel>
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d05f      	beq.n	8006b9c <forward_relu+0x11c>
 8006adc:	68e5      	ldr	r5, [r4, #12]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8006ae4:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8006ae8:	429d      	cmp	r5, r3
 8006aea:	fb04 f202 	mul.w	r2, r4, r2
 8006aee:	d1f9      	bne.n	8006ae4 <forward_relu+0x64>
 8006af0:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8006af4:	3a01      	subs	r2, #1
 8006af6:	eb01 0482 	add.w	r4, r1, r2, lsl #2
 8006afa:	428c      	cmp	r4, r1
 8006afc:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8006b00:	d314      	bcc.n	8006b2c <forward_relu+0xac>
 8006b02:	1a61      	subs	r1, r4, r1
 8006b04:	f021 0103 	bic.w	r1, r1, #3
 8006b08:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8006bb0 <forward_relu+0x130>
 8006b0c:	1d23      	adds	r3, r4, #4
 8006b0e:	3004      	adds	r0, #4
 8006b10:	1a62      	subs	r2, r4, r1
 8006b12:	ed73 7a01 	vldmdb	r3!, {s15}
 8006b16:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b1e:	bfb8      	it	lt
 8006b20:	eef0 7a47 	vmovlt.f32	s15, s14
 8006b24:	429a      	cmp	r2, r3
 8006b26:	ed60 7a01 	vstmdb	r0!, {s15}
 8006b2a:	d1f2      	bne.n	8006b12 <forward_relu+0x92>
 8006b2c:	bc70      	pop	{r4, r5, r6}
 8006b2e:	4770      	bx	lr
 8006b30:	b3b3      	cbz	r3, 8006ba0 <forward_relu+0x120>
 8006b32:	68e5      	ldr	r5, [r4, #12]
 8006b34:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8006b38:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8006b3c:	429d      	cmp	r5, r3
 8006b3e:	fb04 f202 	mul.w	r2, r4, r2
 8006b42:	d1f9      	bne.n	8006b38 <forward_relu+0xb8>
 8006b44:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8006b48:	3a01      	subs	r2, #1
 8006b4a:	68b3      	ldr	r3, [r6, #8]
 8006b4c:	eb01 0482 	add.w	r4, r1, r2, lsl #2
 8006b50:	428c      	cmp	r4, r1
 8006b52:	ed93 7a00 	vldr	s14, [r3]
 8006b56:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8006b5a:	d3e7      	bcc.n	8006b2c <forward_relu+0xac>
 8006b5c:	1a61      	subs	r1, r4, r1
 8006b5e:	f021 0103 	bic.w	r1, r1, #3
 8006b62:	2500      	movs	r5, #0
 8006b64:	1d23      	adds	r3, r4, #4
 8006b66:	1a62      	subs	r2, r4, r1
 8006b68:	3004      	adds	r0, #4
 8006b6a:	ed73 7a01 	vldmdb	r3!, {s15}
 8006b6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b76:	d50a      	bpl.n	8006b8e <forward_relu+0x10e>
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	ed60 7a01 	vstmdb	r0!, {s15}
 8006b7e:	d0d5      	beq.n	8006b2c <forward_relu+0xac>
 8006b80:	ed73 7a01 	vldmdb	r3!, {s15}
 8006b84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b8c:	d4f4      	bmi.n	8006b78 <forward_relu+0xf8>
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	f840 5d04 	str.w	r5, [r0, #-4]!
 8006b94:	d1e9      	bne.n	8006b6a <forward_relu+0xea>
 8006b96:	e7c9      	b.n	8006b2c <forward_relu+0xac>
 8006b98:	2201      	movs	r2, #1
 8006b9a:	e799      	b.n	8006ad0 <forward_relu+0x50>
 8006b9c:	460c      	mov	r4, r1
 8006b9e:	e7b0      	b.n	8006b02 <forward_relu+0x82>
 8006ba0:	68b3      	ldr	r3, [r6, #8]
 8006ba2:	460c      	mov	r4, r1
 8006ba4:	ed93 7a00 	vldr	s14, [r3]
 8006ba8:	e7d8      	b.n	8006b5c <forward_relu+0xdc>
 8006baa:	2300      	movs	r3, #0
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	deff      	udf	#255	@ 0xff
 8006bb0:	00000000 	.word	0x00000000

08006bb4 <forward_lite_conv2d_if32of32wf32_pool>:
 8006bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bb8:	ed2d 8b02 	vpush	{d8}
 8006bbc:	b0c5      	sub	sp, #276	@ 0x114
 8006bbe:	4696      	mov	lr, r2
 8006bc0:	f9bd 518c 	ldrsh.w	r5, [sp, #396]	@ 0x18c
 8006bc4:	f9bd 4148 	ldrsh.w	r4, [sp, #328]	@ 0x148
 8006bc8:	9320      	str	r3, [sp, #128]	@ 0x80
 8006bca:	f9bd 31ac 	ldrsh.w	r3, [sp, #428]	@ 0x1ac
 8006bce:	9412      	str	r4, [sp, #72]	@ 0x48
 8006bd0:	f8bd 4170 	ldrh.w	r4, [sp, #368]	@ 0x170
 8006bd4:	912f      	str	r1, [sp, #188]	@ 0xbc
 8006bd6:	9230      	str	r2, [sp, #192]	@ 0xc0
 8006bd8:	f9bd 1160 	ldrsh.w	r1, [sp, #352]	@ 0x160
 8006bdc:	9327      	str	r3, [sp, #156]	@ 0x9c
 8006bde:	fb05 f203 	mul.w	r2, r5, r3
 8006be2:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006be4:	f9bd 3154 	ldrsh.w	r3, [sp, #340]	@ 0x154
 8006be8:	f8bd 4174 	ldrh.w	r4, [sp, #372]	@ 0x174
 8006bec:	f9bd 715c 	ldrsh.w	r7, [sp, #348]	@ 0x15c
 8006bf0:	f9bd 6150 	ldrsh.w	r6, [sp, #336]	@ 0x150
 8006bf4:	933a      	str	r3, [sp, #232]	@ 0xe8
 8006bf6:	910a      	str	r1, [sp, #40]	@ 0x28
 8006bf8:	f9bd 3158 	ldrsh.w	r3, [sp, #344]	@ 0x158
 8006bfc:	f8bd 1168 	ldrh.w	r1, [sp, #360]	@ 0x168
 8006c00:	9426      	str	r4, [sp, #152]	@ 0x98
 8006c02:	f9bd 4178 	ldrsh.w	r4, [sp, #376]	@ 0x178
 8006c06:	f9bd c14c 	ldrsh.w	ip, [sp, #332]	@ 0x14c
 8006c0a:	9039      	str	r0, [sp, #228]	@ 0xe4
 8006c0c:	9331      	str	r3, [sp, #196]	@ 0xc4
 8006c0e:	9125      	str	r1, [sp, #148]	@ 0x94
 8006c10:	f9bd 3164 	ldrsh.w	r3, [sp, #356]	@ 0x164
 8006c14:	950e      	str	r5, [sp, #56]	@ 0x38
 8006c16:	4680      	mov	r8, r0
 8006c18:	9732      	str	r7, [sp, #200]	@ 0xc8
 8006c1a:	f8bd 016c 	ldrh.w	r0, [sp, #364]	@ 0x16c
 8006c1e:	9610      	str	r6, [sp, #64]	@ 0x40
 8006c20:	943b      	str	r4, [sp, #236]	@ 0xec
 8006c22:	f9bd 41a8 	ldrsh.w	r4, [sp, #424]	@ 0x1a8
 8006c26:	943c      	str	r4, [sp, #240]	@ 0xf0
 8006c28:	f9bd 41b0 	ldrsh.w	r4, [sp, #432]	@ 0x1b0
 8006c2c:	943d      	str	r4, [sp, #244]	@ 0xf4
 8006c2e:	f9bd 41b4 	ldrsh.w	r4, [sp, #436]	@ 0x1b4
 8006c32:	9428      	str	r4, [sp, #160]	@ 0xa0
 8006c34:	f9bd 41b8 	ldrsh.w	r4, [sp, #440]	@ 0x1b8
 8006c38:	943e      	str	r4, [sp, #248]	@ 0xf8
 8006c3a:	f9bd 41bc 	ldrsh.w	r4, [sp, #444]	@ 0x1bc
 8006c3e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006c40:	2f00      	cmp	r7, #0
 8006c42:	f1c0 0400 	rsb	r4, r0, #0
 8006c46:	f9bd 1190 	ldrsh.w	r1, [sp, #400]	@ 0x190
 8006c4a:	f8dd 9198 	ldr.w	r9, [sp, #408]	@ 0x198
 8006c4e:	941d      	str	r4, [sp, #116]	@ 0x74
 8006c50:	fb0c f202 	mul.w	r2, ip, r2
 8006c54:	f340 826d 	ble.w	8007132 <forward_lite_conv2d_if32of32wf32_pool+0x57e>
 8006c58:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8006c5a:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8006c5c:	901e      	str	r0, [sp, #120]	@ 0x78
 8006c5e:	fb07 f303 	mul.w	r3, r7, r3
 8006c62:	9828      	ldr	r0, [sp, #160]	@ 0xa0
 8006c64:	ed9f 8a6d 	vldr	s16, [pc, #436]	@ 8006e1c <forward_lite_conv2d_if32of32wf32_pool+0x268>
 8006c68:	fb04 f303 	mul.w	r3, r4, r3
 8006c6c:	009f      	lsls	r7, r3, #2
 8006c6e:	fb0c f300 	mul.w	r3, ip, r0
 8006c72:	fb05 f303 	mul.w	r3, r5, r3
 8006c76:	0098      	lsls	r0, r3, #2
 8006c78:	9036      	str	r0, [sp, #216]	@ 0xd8
 8006c7a:	9826      	ldr	r0, [sp, #152]	@ 0x98
 8006c7c:	9721      	str	r7, [sp, #132]	@ 0x84
 8006c7e:	fb00 f306 	mul.w	r3, r0, r6
 8006c82:	fb04 f303 	mul.w	r3, r4, r3
 8006c86:	0098      	lsls	r0, r3, #2
 8006c88:	902d      	str	r0, [sp, #180]	@ 0xb4
 8006c8a:	0090      	lsls	r0, r2, #2
 8006c8c:	902c      	str	r0, [sp, #176]	@ 0xb0
 8006c8e:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 8006c90:	9850      	ldr	r0, [sp, #320]	@ 0x140
 8006c92:	00a7      	lsls	r7, r4, #2
 8006c94:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8006c98:	fb0c f303 	mul.w	r3, ip, r3
 8006c9c:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8006c9e:	921c      	str	r2, [sp, #112]	@ 0x70
 8006ca0:	009a      	lsls	r2, r3, #2
 8006ca2:	fb06 f307 	mul.w	r3, r6, r7
 8006ca6:	fb00 8603 	mla	r6, r0, r3, r8
 8006caa:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8006cac:	961f      	str	r6, [sp, #124]	@ 0x7c
 8006cae:	425e      	negs	r6, r3
 8006cb0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006cb2:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 8006cb4:	9234      	str	r2, [sp, #208]	@ 0xd0
 8006cb6:	fb03 f304 	mul.w	r3, r3, r4
 8006cba:	009b      	lsls	r3, r3, #2
 8006cbc:	9314      	str	r3, [sp, #80]	@ 0x50
 8006cbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006cc0:	9329      	str	r3, [sp, #164]	@ 0xa4
 8006cc2:	fb0c f505 	mul.w	r5, ip, r5
 8006cc6:	4240      	negs	r0, r0
 8006cc8:	9535      	str	r5, [sp, #212]	@ 0xd4
 8006cca:	9023      	str	r0, [sp, #140]	@ 0x8c
 8006ccc:	f10e 4578 	add.w	r5, lr, #4160749568	@ 0xf8000000
 8006cd0:	fb06 f007 	mul.w	r0, r6, r7
 8006cd4:	469b      	mov	fp, r3
 8006cd6:	1e4b      	subs	r3, r1, #1
 8006cd8:	2200      	movs	r2, #0
 8006cda:	9533      	str	r5, [sp, #204]	@ 0xcc
 8006cdc:	902e      	str	r0, [sp, #184]	@ 0xb8
 8006cde:	ea4f 058c 	mov.w	r5, ip, lsl #2
 8006ce2:	9850      	ldr	r0, [sp, #320]	@ 0x140
 8006ce4:	962b      	str	r6, [sp, #172]	@ 0xac
 8006ce6:	b21b      	sxth	r3, r3
 8006ce8:	2900      	cmp	r1, #0
 8006cea:	970c      	str	r7, [sp, #48]	@ 0x30
 8006cec:	9224      	str	r2, [sp, #144]	@ 0x90
 8006cee:	950f      	str	r5, [sp, #60]	@ 0x3c
 8006cf0:	901a      	str	r0, [sp, #104]	@ 0x68
 8006cf2:	46c8      	mov	r8, r9
 8006cf4:	4614      	mov	r4, r2
 8006cf6:	4666      	mov	r6, ip
 8006cf8:	9322      	str	r3, [sp, #136]	@ 0x88
 8006cfa:	f300 8091 	bgt.w	8006e20 <forward_lite_conv2d_if32of32wf32_pool+0x26c>
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	f280 8226 	bge.w	8007150 <forward_lite_conv2d_if32of32wf32_pool+0x59c>
 8006d04:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 8006d06:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006d08:	fb03 f30b 	mul.w	r3, r3, fp
 8006d0c:	eba2 0383 	sub.w	r3, r2, r3, lsl #2
 8006d10:	9a50      	ldr	r2, [sp, #320]	@ 0x140
 8006d12:	429a      	cmp	r2, r3
 8006d14:	bf84      	itt	hi
 8006d16:	9a2c      	ldrhi	r2, [sp, #176]	@ 0xb0
 8006d18:	189b      	addhi	r3, r3, r2
 8006d1a:	9a50      	ldr	r2, [sp, #320]	@ 0x140
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d216      	bcs.n	8006d4e <forward_lite_conv2d_if32of32wf32_pool+0x19a>
 8006d20:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8006d22:	455a      	cmp	r2, fp
 8006d24:	d013      	beq.n	8006d4e <forward_lite_conv2d_if32of32wf32_pool+0x19a>
 8006d26:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	d910      	bls.n	8006d4e <forward_lite_conv2d_if32of32wf32_pool+0x19a>
 8006d2c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006d2e:	461a      	mov	r2, r3
 8006d30:	f852 0b04 	ldr.w	r0, [r2], #4
 8006d34:	f841 0b04 	str.w	r0, [r1], #4
 8006d38:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8006d3a:	4282      	cmp	r2, r0
 8006d3c:	d3f8      	bcc.n	8006d30 <forward_lite_conv2d_if32of32wf32_pool+0x17c>
 8006d3e:	1e42      	subs	r2, r0, #1
 8006d40:	1ad3      	subs	r3, r2, r3
 8006d42:	f023 0303 	bic.w	r3, r3, #3
 8006d46:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006d48:	3304      	adds	r3, #4
 8006d4a:	441a      	add	r2, r3
 8006d4c:	921a      	str	r2, [sp, #104]	@ 0x68
 8006d4e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006d50:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 8006d52:	9836      	ldr	r0, [sp, #216]	@ 0xd8
 8006d54:	440a      	add	r2, r1
 8006d56:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8006d58:	fa1f f38b 	uxth.w	r3, fp
 8006d5c:	1ad2      	subs	r2, r2, r3
 8006d5e:	440b      	add	r3, r1
 8006d60:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006d62:	4401      	add	r1, r0
 8006d64:	911a      	str	r1, [sp, #104]	@ 0x68
 8006d66:	fa0f fb83 	sxth.w	fp, r3
 8006d6a:	460b      	mov	r3, r1
 8006d6c:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8006d6e:	b212      	sxth	r2, r2
 8006d70:	428b      	cmp	r3, r1
 8006d72:	9224      	str	r2, [sp, #144]	@ 0x90
 8006d74:	d304      	bcc.n	8006d80 <forward_lite_conv2d_if32of32wf32_pool+0x1cc>
 8006d76:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006d78:	4413      	add	r3, r2
 8006d7a:	428b      	cmp	r3, r1
 8006d7c:	d2fc      	bcs.n	8006d78 <forward_lite_conv2d_if32of32wf32_pool+0x1c4>
 8006d7e:	931a      	str	r3, [sp, #104]	@ 0x68
 8006d80:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8006d82:	455a      	cmp	r2, fp
 8006d84:	f300 81c6 	bgt.w	8007114 <forward_lite_conv2d_if32of32wf32_pool+0x560>
 8006d88:	1c63      	adds	r3, r4, #1
 8006d8a:	992f      	ldr	r1, [sp, #188]	@ 0xbc
 8006d8c:	9108      	str	r1, [sp, #32]
 8006d8e:	b21c      	sxth	r4, r3
 8006d90:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 8006d92:	f8dd a0a0 	ldr.w	sl, [sp, #160]	@ 0xa0
 8006d96:	9f29      	ldr	r7, [sp, #164]	@ 0xa4
 8006d98:	9850      	ldr	r0, [sp, #320]	@ 0x140
 8006d9a:	9d69      	ldr	r5, [sp, #420]	@ 0x1a4
 8006d9c:	18cb      	adds	r3, r1, r3
 8006d9e:	932f      	str	r3, [sp, #188]	@ 0xbc
 8006da0:	9926      	ldr	r1, [sp, #152]	@ 0x98
 8006da2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006da4:	440b      	add	r3, r1
 8006da6:	931d      	str	r3, [sp, #116]	@ 0x74
 8006da8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8006daa:	1a5b      	subs	r3, r3, r1
 8006dac:	931e      	str	r3, [sp, #120]	@ 0x78
 8006dae:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 8006db0:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8006db2:	440b      	add	r3, r1
 8006db4:	931f      	str	r3, [sp, #124]	@ 0x7c
 8006db6:	b293      	uxth	r3, r2
 8006db8:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006dba:	9301      	str	r3, [sp, #4]
 8006dbc:	1a9b      	subs	r3, r3, r2
 8006dbe:	b29a      	uxth	r2, r3
 8006dc0:	fa1f f38a 	uxth.w	r3, sl
 8006dc4:	ebab 0103 	sub.w	r1, fp, r3
 8006dc8:	9305      	str	r3, [sp, #20]
 8006dca:	b2bb      	uxth	r3, r7
 8006dcc:	9303      	str	r3, [sp, #12]
 8006dce:	2301      	movs	r3, #1
 8006dd0:	9307      	str	r3, [sp, #28]
 8006dd2:	f8bd 30c4 	ldrh.w	r3, [sp, #196]	@ 0xc4
 8006dd6:	9306      	str	r3, [sp, #24]
 8006dd8:	f8bd 30f4 	ldrh.w	r3, [sp, #244]	@ 0xf4
 8006ddc:	9304      	str	r3, [sp, #16]
 8006dde:	f8bd 30f8 	ldrh.w	r3, [sp, #248]	@ 0xf8
 8006de2:	9302      	str	r3, [sp, #8]
 8006de4:	f8bd 30f0 	ldrh.w	r3, [sp, #240]	@ 0xf0
 8006de8:	9300      	str	r3, [sp, #0]
 8006dea:	fa0f fb81 	sxth.w	fp, r1
 8006dee:	b2b3      	uxth	r3, r6
 8006df0:	f8bd 1038 	ldrh.w	r1, [sp, #56]	@ 0x38
 8006df4:	47a8      	blx	r5
 8006df6:	4652      	mov	r2, sl
 8006df8:	1abb      	subs	r3, r7, r2
 8006dfa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006dfe:	b21b      	sxth	r3, r3
 8006e00:	9329      	str	r3, [sp, #164]	@ 0xa4
 8006e02:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 8006e04:	42a3      	cmp	r3, r4
 8006e06:	f340 8194 	ble.w	8007132 <forward_lite_conv2d_if32of32wf32_pool+0x57e>
 8006e0a:	9922      	ldr	r1, [sp, #136]	@ 0x88
 8006e0c:	1e4b      	subs	r3, r1, #1
 8006e0e:	b21b      	sxth	r3, r3
 8006e10:	2900      	cmp	r1, #0
 8006e12:	9322      	str	r3, [sp, #136]	@ 0x88
 8006e14:	f77f af73 	ble.w	8006cfe <forward_lite_conv2d_if32of32wf32_pool+0x14a>
 8006e18:	e002      	b.n	8006e20 <forward_lite_conv2d_if32of32wf32_pool+0x26c>
 8006e1a:	bf00      	nop
 8006e1c:	00000000 	.word	0x00000000
 8006e20:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	f2c0 82cb 	blt.w	80073be <forward_lite_conv2d_if32of32wf32_pool+0x80a>
 8006e28:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8006e2a:	931b      	str	r3, [sp, #108]	@ 0x6c
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8006e30:	9a3a      	ldr	r2, [sp, #232]	@ 0xe8
 8006e32:	440a      	add	r2, r1
 8006e34:	993b      	ldr	r1, [sp, #236]	@ 0xec
 8006e36:	428a      	cmp	r2, r1
 8006e38:	bfd4      	ite	le
 8006e3a:	ebc3 0702 	rsble	r7, r3, r2
 8006e3e:	ebc3 0701 	rsbgt	r7, r3, r1
 8006e42:	9a51      	ldr	r2, [sp, #324]	@ 0x144
 8006e44:	2a00      	cmp	r2, #0
 8006e46:	f000 8187 	beq.w	8007158 <forward_lite_conv2d_if32of32wf32_pool+0x5a4>
 8006e4a:	9a33      	ldr	r2, [sp, #204]	@ 0xcc
 8006e4c:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 8006e50:	f0c0 8182 	bcc.w	8007158 <forward_lite_conv2d_if32of32wf32_pool+0x5a4>
 8006e54:	2e00      	cmp	r6, #0
 8006e56:	f340 812b 	ble.w	80070b0 <forward_lite_conv2d_if32of32wf32_pool+0x4fc>
 8006e5a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006e5c:	992e      	ldr	r1, [sp, #184]	@ 0xb8
 8006e5e:	fb02 f303 	mul.w	r3, r2, r3
 8006e62:	9318      	str	r3, [sp, #96]	@ 0x60
 8006e64:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006e66:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8006e68:	189a      	adds	r2, r3, r2
 8006e6a:	9237      	str	r2, [sp, #220]	@ 0xdc
 8006e6c:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006e6e:	469a      	mov	sl, r3
 8006e70:	e9cd 843f 	strd	r8, r4, [sp, #252]	@ 0xfc
 8006e74:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006e76:	932a      	str	r3, [sp, #168]	@ 0xa8
 8006e78:	440a      	add	r2, r1
 8006e7a:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8006e7c:	9238      	str	r2, [sp, #224]	@ 0xe0
 8006e7e:	9319      	str	r3, [sp, #100]	@ 0x64
 8006e80:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006e82:	9951      	ldr	r1, [sp, #324]	@ 0x144
 8006e84:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006e86:	f001 f961 	bl	800814c <st_int8_copy>
 8006e8a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	f000 815c 	beq.w	800714a <forward_lite_conv2d_if32of32wf32_pool+0x596>
 8006e92:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8006e94:	ecf3 6a01 	vldmia	r3!, {s13}
 8006e98:	932a      	str	r3, [sp, #168]	@ 0xa8
 8006e9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	f000 80fb 	beq.w	8007098 <forward_lite_conv2d_if32of32wf32_pool+0x4e4>
 8006ea2:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8006ea4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006ea6:	9938      	ldr	r1, [sp, #224]	@ 0xe0
 8006ea8:	920d      	str	r2, [sp, #52]	@ 0x34
 8006eaa:	2500      	movs	r5, #0
 8006eac:	4413      	add	r3, r2
 8006eae:	9c2b      	ldr	r4, [sp, #172]	@ 0xac
 8006eb0:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006eb2:	462a      	mov	r2, r5
 8006eb4:	46bc      	mov	ip, r7
 8006eb6:	f8cd a104 	str.w	sl, [sp, #260]	@ 0x104
 8006eba:	4655      	mov	r5, sl
 8006ebc:	9642      	str	r6, [sp, #264]	@ 0x108
 8006ebe:	f8cd 9198 	str.w	r9, [sp, #408]	@ 0x198
 8006ec2:	f8cd b10c 	str.w	fp, [sp, #268]	@ 0x10c
 8006ec6:	4610      	mov	r0, r2
 8006ec8:	2c00      	cmp	r4, #0
 8006eca:	f2c0 8137 	blt.w	800713c <forward_lite_conv2d_if32of32wf32_pool+0x588>
 8006ece:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006ed0:	9211      	str	r2, [sp, #68]	@ 0x44
 8006ed2:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8006ed4:	2600      	movs	r6, #0
 8006ed6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006ed8:	9f51      	ldr	r7, [sp, #324]	@ 0x144
 8006eda:	4299      	cmp	r1, r3
 8006edc:	bf94      	ite	ls
 8006ede:	ebc6 0601 	rsbls	r6, r6, r1
 8006ee2:	ebc6 0603 	rsbhi	r6, r6, r3
 8006ee6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006ee8:	fb02 7201 	mla	r2, r2, r1, r7
 8006eec:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8006eee:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006ef0:	eba7 0b06 	sub.w	fp, r7, r6
 8006ef4:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8006ef6:	eba1 0a06 	sub.w	sl, r1, r6
 8006efa:	fb07 f606 	mul.w	r6, r7, r6
 8006efe:	4667      	mov	r7, ip
 8006f00:	2f00      	cmp	r7, #0
 8006f02:	eeb0 7a66 	vmov.f32	s14, s13
 8006f06:	f340 80ad 	ble.w	8007064 <forward_lite_conv2d_if32of32wf32_pool+0x4b0>
 8006f0a:	f026 0c0f 	bic.w	ip, r6, #15
 8006f0e:	f10c 39ff 	add.w	r9, ip, #4294967295
 8006f12:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006f14:	9317      	str	r3, [sp, #92]	@ 0x5c
 8006f16:	ea4f 1919 	mov.w	r9, r9, lsr #4
 8006f1a:	e9cd 4015 	strd	r4, r0, [sp, #84]	@ 0x54
 8006f1e:	f109 0901 	add.w	r9, r9, #1
 8006f22:	fb01 fb0b 	mul.w	fp, r1, fp
 8006f26:	fb01 fa0a 	mul.w	sl, r1, sl
 8006f2a:	ea4f 1889 	mov.w	r8, r9, lsl #6
 8006f2e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8006f30:	9511      	str	r5, [sp, #68]	@ 0x44
 8006f32:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8006f36:	f04f 0e00 	mov.w	lr, #0
 8006f3a:	f1bc 0f00 	cmp.w	ip, #0
 8006f3e:	bfd8      	it	le
 8006f40:	2500      	movle	r5, #0
 8006f42:	dd70      	ble.n	8007026 <forward_lite_conv2d_if32of32wf32_pool+0x472>
 8006f44:	f101 0040 	add.w	r0, r1, #64	@ 0x40
 8006f48:	f102 0340 	add.w	r3, r2, #64	@ 0x40
 8006f4c:	2400      	movs	r4, #0
 8006f4e:	ed13 6a0f 	vldr	s12, [r3, #-60]	@ 0xffffffc4
 8006f52:	ed50 7a0f 	vldr	s15, [r0, #-60]	@ 0xffffffc4
 8006f56:	ed10 5a10 	vldr	s10, [r0, #-64]	@ 0xffffffc0
 8006f5a:	ed53 5a10 	vldr	s11, [r3, #-64]	@ 0xffffffc0
 8006f5e:	ed10 4a0d 	vldr	s8, [r0, #-52]	@ 0xffffffcc
 8006f62:	ed50 4a0c 	vldr	s9, [r0, #-48]	@ 0xffffffd0
 8006f66:	ed50 2a0a 	vldr	s5, [r0, #-40]	@ 0xffffffd8
 8006f6a:	ed13 3a0a 	vldr	s6, [r3, #-40]	@ 0xffffffd8
 8006f6e:	ed50 3a09 	vldr	s7, [r0, #-36]	@ 0xffffffdc
 8006f72:	ed50 1a06 	vldr	s3, [r0, #-24]	@ 0xffffffe8
 8006f76:	ed13 1a06 	vldr	s2, [r3, #-24]	@ 0xffffffe8
 8006f7a:	ed13 2a05 	vldr	s4, [r3, #-20]	@ 0xffffffec
 8006f7e:	ed50 0a01 	vldr	s1, [r0, #-4]
 8006f82:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006f86:	ed10 6a0e 	vldr	s12, [r0, #-56]	@ 0xffffffc8
 8006f8a:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006f8e:	3410      	adds	r4, #16
 8006f90:	4564      	cmp	r4, ip
 8006f92:	ed13 5a0e 	vldr	s10, [r3, #-56]	@ 0xffffffc8
 8006f96:	ed53 5a0d 	vldr	s11, [r3, #-52]	@ 0xffffffcc
 8006f9a:	eee5 7a06 	vfma.f32	s15, s10, s12
 8006f9e:	f100 0040 	add.w	r0, r0, #64	@ 0x40
 8006fa2:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8006fa6:	ed13 5a1c 	vldr	s10, [r3, #-112]	@ 0xffffff90
 8006faa:	ed10 6a1b 	vldr	s12, [r0, #-108]	@ 0xffffff94
 8006fae:	eee4 7a25 	vfma.f32	s15, s8, s11
 8006fb2:	ed53 5a1b 	vldr	s11, [r3, #-108]	@ 0xffffff94
 8006fb6:	ed13 4a19 	vldr	s8, [r3, #-100]	@ 0xffffff9c
 8006fba:	eee4 7a85 	vfma.f32	s15, s9, s10
 8006fbe:	ed53 4a18 	vldr	s9, [r3, #-96]	@ 0xffffffa0
 8006fc2:	ed13 5a17 	vldr	s10, [r3, #-92]	@ 0xffffffa4
 8006fc6:	eee5 7a86 	vfma.f32	s15, s11, s12
 8006fca:	ed50 5a18 	vldr	s11, [r0, #-96]	@ 0xffffffa0
 8006fce:	ed10 6a17 	vldr	s12, [r0, #-92]	@ 0xffffffa4
 8006fd2:	eee2 7a83 	vfma.f32	s15, s5, s6
 8006fd6:	ed50 2a15 	vldr	s5, [r0, #-84]	@ 0xffffffac
 8006fda:	ed10 3a14 	vldr	s6, [r0, #-80]	@ 0xffffffb0
 8006fde:	eee3 7a84 	vfma.f32	s15, s7, s8
 8006fe2:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 8006fe6:	ed10 4a13 	vldr	s8, [r0, #-76]	@ 0xffffffb4
 8006fea:	eee4 7aa5 	vfma.f32	s15, s9, s11
 8006fee:	ed53 4a13 	vldr	s9, [r3, #-76]	@ 0xffffffb4
 8006ff2:	ed50 5a12 	vldr	s11, [r0, #-72]	@ 0xffffffb8
 8006ff6:	eee5 7a06 	vfma.f32	s15, s10, s12
 8006ffa:	ed13 5a12 	vldr	s10, [r3, #-72]	@ 0xffffffb8
 8006ffe:	ed13 6a11 	vldr	s12, [r3, #-68]	@ 0xffffffbc
 8007002:	eee1 7a21 	vfma.f32	s15, s2, s3
 8007006:	eee2 7a22 	vfma.f32	s15, s4, s5
 800700a:	eee3 7a23 	vfma.f32	s15, s6, s7
 800700e:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007012:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007016:	eee6 7a20 	vfma.f32	s15, s12, s1
 800701a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800701e:	db96      	blt.n	8006f4e <forward_lite_conv2d_if32of32wf32_pool+0x39a>
 8007020:	4441      	add	r1, r8
 8007022:	4442      	add	r2, r8
 8007024:	464d      	mov	r5, r9
 8007026:	42ae      	cmp	r6, r5
 8007028:	dd10      	ble.n	800704c <forward_lite_conv2d_if32of32wf32_pool+0x498>
 800702a:	462b      	mov	r3, r5
 800702c:	460c      	mov	r4, r1
 800702e:	4610      	mov	r0, r2
 8007030:	ecb0 6a01 	vldmia	r0!, {s12}
 8007034:	ecf4 7a01 	vldmia	r4!, {s15}
 8007038:	3301      	adds	r3, #1
 800703a:	429e      	cmp	r6, r3
 800703c:	eea6 7a27 	vfma.f32	s14, s12, s15
 8007040:	d1f6      	bne.n	8007030 <forward_lite_conv2d_if32of32wf32_pool+0x47c>
 8007042:	1b75      	subs	r5, r6, r5
 8007044:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8007048:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800704c:	f10e 0e01 	add.w	lr, lr, #1
 8007050:	4577      	cmp	r7, lr
 8007052:	4459      	add	r1, fp
 8007054:	4452      	add	r2, sl
 8007056:	f47f af70 	bne.w	8006f3a <forward_lite_conv2d_if32of32wf32_pool+0x386>
 800705a:	e9dd 4015 	ldrd	r4, r0, [sp, #84]	@ 0x54
 800705e:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8007060:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007062:	46bc      	mov	ip, r7
 8007064:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007066:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007068:	ed85 7a00 	vstr	s14, [r5]
 800706c:	440d      	add	r5, r1
 800706e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8007070:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8007072:	1a89      	subs	r1, r1, r2
 8007074:	4414      	add	r4, r2
 8007076:	910d      	str	r1, [sp, #52]	@ 0x34
 8007078:	1a9b      	subs	r3, r3, r2
 800707a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800707c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800707e:	3001      	adds	r0, #1
 8007080:	4431      	add	r1, r6
 8007082:	4282      	cmp	r2, r0
 8007084:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007086:	f47f af1f 	bne.w	8006ec8 <forward_lite_conv2d_if32of32wf32_pool+0x314>
 800708a:	e9dd a641 	ldrd	sl, r6, [sp, #260]	@ 0x104
 800708e:	f8dd 9198 	ldr.w	r9, [sp, #408]	@ 0x198
 8007092:	f8dd b10c 	ldr.w	fp, [sp, #268]	@ 0x10c
 8007096:	4667      	mov	r7, ip
 8007098:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800709a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800709c:	4413      	add	r3, r2
 800709e:	9319      	str	r3, [sp, #100]	@ 0x64
 80070a0:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
 80070a2:	f10a 0a04 	add.w	sl, sl, #4
 80070a6:	459a      	cmp	sl, r3
 80070a8:	f47f aeea 	bne.w	8006e80 <forward_lite_conv2d_if32of32wf32_pool+0x2cc>
 80070ac:	e9dd 843f 	ldrd	r8, r4, [sp, #252]	@ 0xfc
 80070b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	dd26      	ble.n	8007104 <forward_lite_conv2d_if32of32wf32_pool+0x550>
 80070b6:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	f000 8184 	beq.w	80073c6 <forward_lite_conv2d_if32of32wf32_pool+0x812>
 80070be:	46b2      	mov	sl, r6
 80070c0:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 80070c2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80070c4:	465e      	mov	r6, fp
 80070c6:	f8dd b19c 	ldr.w	fp, [sp, #412]	@ 0x19c
 80070ca:	2500      	movs	r5, #0
 80070cc:	4643      	mov	r3, r8
 80070ce:	4652      	mov	r2, sl
 80070d0:	4639      	mov	r1, r7
 80070d2:	4638      	mov	r0, r7
 80070d4:	9c65      	ldr	r4, [sp, #404]	@ 0x194
 80070d6:	47a0      	blx	r4
 80070d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80070da:	9a68      	ldr	r2, [sp, #416]	@ 0x1a0
 80070dc:	44d8      	add	r8, fp
 80070de:	441f      	add	r7, r3
 80070e0:	eba8 0309 	sub.w	r3, r8, r9
 80070e4:	4293      	cmp	r3, r2
 80070e6:	bfa8      	it	ge
 80070e8:	46c8      	movge	r8, r9
 80070ea:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80070ec:	429f      	cmp	r7, r3
 80070ee:	bf24      	itt	cs
 80070f0:	9b23      	ldrcs	r3, [sp, #140]	@ 0x8c
 80070f2:	18ff      	addcs	r7, r7, r3
 80070f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070f6:	3501      	adds	r5, #1
 80070f8:	42ab      	cmp	r3, r5
 80070fa:	d1e7      	bne.n	80070cc <forward_lite_conv2d_if32of32wf32_pool+0x518>
 80070fc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80070fe:	971a      	str	r7, [sp, #104]	@ 0x68
 8007100:	46b3      	mov	fp, r6
 8007102:	4656      	mov	r6, sl
 8007104:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8007106:	f10b 0301 	add.w	r3, fp, #1
 800710a:	fa0f fb83 	sxth.w	fp, r3
 800710e:	455a      	cmp	r2, fp
 8007110:	f77f ae3a 	ble.w	8006d88 <forward_lite_conv2d_if32of32wf32_pool+0x1d4>
 8007114:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8007116:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007118:	4413      	add	r3, r2
 800711a:	931d      	str	r3, [sp, #116]	@ 0x74
 800711c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800711e:	1a9b      	subs	r3, r3, r2
 8007120:	931e      	str	r3, [sp, #120]	@ 0x78
 8007122:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8007124:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8007126:	4413      	add	r3, r2
 8007128:	931f      	str	r3, [sp, #124]	@ 0x7c
 800712a:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 800712c:	42a3      	cmp	r3, r4
 800712e:	f73f ae6c 	bgt.w	8006e0a <forward_lite_conv2d_if32of32wf32_pool+0x256>
 8007132:	b045      	add	sp, #276	@ 0x114
 8007134:	ecbd 8b02 	vpop	{d8}
 8007138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800713c:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800713e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8007140:	460e      	mov	r6, r1
 8007142:	440a      	add	r2, r1
 8007144:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8007146:	9111      	str	r1, [sp, #68]	@ 0x44
 8007148:	e6c5      	b.n	8006ed6 <forward_lite_conv2d_if32of32wf32_pool+0x322>
 800714a:	eef0 6a48 	vmov.f32	s13, s16
 800714e:	e6a4      	b.n	8006e9a <forward_lite_conv2d_if32of32wf32_pool+0x2e6>
 8007150:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8007154:	9322      	str	r3, [sp, #136]	@ 0x88
 8007156:	e613      	b.n	8006d80 <forward_lite_conv2d_if32of32wf32_pool+0x1cc>
 8007158:	2e00      	cmp	r6, #0
 800715a:	dda9      	ble.n	80070b0 <forward_lite_conv2d_if32of32wf32_pool+0x4fc>
 800715c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800715e:	992e      	ldr	r1, [sp, #184]	@ 0xb8
 8007160:	f8cd 80a8 	str.w	r8, [sp, #168]	@ 0xa8
 8007164:	fb02 f303 	mul.w	r3, r2, r3
 8007168:	9319      	str	r3, [sp, #100]	@ 0x64
 800716a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800716c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800716e:	9437      	str	r4, [sp, #220]	@ 0xdc
 8007170:	1898      	adds	r0, r3, r2
 8007172:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007174:	eb02 0a01 	add.w	sl, r2, r1
 8007178:	9930      	ldr	r1, [sp, #192]	@ 0xc0
 800717a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800717c:	9118      	str	r1, [sp, #96]	@ 0x60
 800717e:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8007180:	2900      	cmp	r1, #0
 8007182:	f000 8119 	beq.w	80073b8 <forward_lite_conv2d_if32of32wf32_pool+0x804>
 8007186:	ecf2 6a01 	vldmia	r2!, {s13}
 800718a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800718c:	2900      	cmp	r1, #0
 800718e:	f000 8100 	beq.w	8007392 <forward_lite_conv2d_if32of32wf32_pool+0x7de>
 8007192:	9925      	ldr	r1, [sp, #148]	@ 0x94
 8007194:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8007196:	910d      	str	r1, [sp, #52]	@ 0x34
 8007198:	1865      	adds	r5, r4, r1
 800719a:	e9cd 0a40 	strd	r0, sl, [sp, #256]	@ 0x100
 800719e:	2100      	movs	r1, #0
 80071a0:	469e      	mov	lr, r3
 80071a2:	933f      	str	r3, [sp, #252]	@ 0xfc
 80071a4:	f8dd 80ac 	ldr.w	r8, [sp, #172]	@ 0xac
 80071a8:	f8cd a02c 	str.w	sl, [sp, #44]	@ 0x2c
 80071ac:	460b      	mov	r3, r1
 80071ae:	9238      	str	r2, [sp, #224]	@ 0xe0
 80071b0:	4671      	mov	r1, lr
 80071b2:	9642      	str	r6, [sp, #264]	@ 0x108
 80071b4:	f8cd 9198 	str.w	r9, [sp, #408]	@ 0x198
 80071b8:	f8cd b10c 	str.w	fp, [sp, #268]	@ 0x10c
 80071bc:	469e      	mov	lr, r3
 80071be:	f1b8 0f00 	cmp.w	r8, #0
 80071c2:	f2c0 80f2 	blt.w	80073aa <forward_lite_conv2d_if32of32wf32_pool+0x7f6>
 80071c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80071c8:	9311      	str	r3, [sp, #68]	@ 0x44
 80071ca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80071cc:	2000      	movs	r0, #0
 80071ce:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80071d0:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80071d2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80071d4:	fb03 2304 	mla	r3, r3, r4, r2
 80071d8:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80071da:	42ae      	cmp	r6, r5
 80071dc:	bf94      	ite	ls
 80071de:	ebc0 0006 	rsbls	r0, r0, r6
 80071e2:	ebc0 0005 	rsbhi	r0, r0, r5
 80071e6:	eba2 0b00 	sub.w	fp, r2, r0
 80071ea:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80071ec:	2f00      	cmp	r7, #0
 80071ee:	eba6 0a00 	sub.w	sl, r6, r0
 80071f2:	eeb0 7a66 	vmov.f32	s14, s13
 80071f6:	fb02 f000 	mul.w	r0, r2, r0
 80071fa:	f340 80ad 	ble.w	8007358 <forward_lite_conv2d_if32of32wf32_pool+0x7a4>
 80071fe:	f020 090f 	bic.w	r9, r0, #15
 8007202:	f109 3cff 	add.w	ip, r9, #4294967295
 8007206:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 800720a:	e9cd 1815 	strd	r1, r8, [sp, #84]	@ 0x54
 800720e:	f10c 0c01 	add.w	ip, ip, #1
 8007212:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007214:	f8cd e05c 	str.w	lr, [sp, #92]	@ 0x5c
 8007218:	fb04 fb0b 	mul.w	fp, r4, fp
 800721c:	fb04 fa0a 	mul.w	sl, r4, sl
 8007220:	ea4f 168c 	mov.w	r6, ip, lsl #6
 8007224:	2400      	movs	r4, #0
 8007226:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 800722a:	9511      	str	r5, [sp, #68]	@ 0x44
 800722c:	f1b9 0f00 	cmp.w	r9, #0
 8007230:	bfd8      	it	le
 8007232:	2100      	movle	r1, #0
 8007234:	dd72      	ble.n	800731c <forward_lite_conv2d_if32of32wf32_pool+0x768>
 8007236:	f102 0540 	add.w	r5, r2, #64	@ 0x40
 800723a:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800723e:	f04f 0e00 	mov.w	lr, #0
 8007242:	ed55 5a0f 	vldr	s11, [r5, #-60]	@ 0xffffffc4
 8007246:	ed51 7a0f 	vldr	s15, [r1, #-60]	@ 0xffffffc4
 800724a:	ed11 5a10 	vldr	s10, [r1, #-64]	@ 0xffffffc0
 800724e:	ed15 6a10 	vldr	s12, [r5, #-64]	@ 0xffffffc0
 8007252:	ed11 4a0d 	vldr	s8, [r1, #-52]	@ 0xffffffcc
 8007256:	ed55 4a0c 	vldr	s9, [r5, #-48]	@ 0xffffffd0
 800725a:	ed55 2a0a 	vldr	s5, [r5, #-40]	@ 0xffffffd8
 800725e:	ed11 3a0a 	vldr	s6, [r1, #-40]	@ 0xffffffd8
 8007262:	ed55 3a09 	vldr	s7, [r5, #-36]	@ 0xffffffdc
 8007266:	ed55 1a06 	vldr	s3, [r5, #-24]	@ 0xffffffe8
 800726a:	ed11 1a06 	vldr	s2, [r1, #-24]	@ 0xffffffe8
 800726e:	ed11 2a05 	vldr	s4, [r1, #-20]	@ 0xffffffec
 8007272:	ed51 0a01 	vldr	s1, [r1, #-4]
 8007276:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800727a:	ed55 5a0e 	vldr	s11, [r5, #-56]	@ 0xffffffc8
 800727e:	eee5 7a06 	vfma.f32	s15, s10, s12
 8007282:	f10e 0e10 	add.w	lr, lr, #16
 8007286:	45ce      	cmp	lr, r9
 8007288:	ed11 5a0e 	vldr	s10, [r1, #-56]	@ 0xffffffc8
 800728c:	ed15 6a0d 	vldr	s12, [r5, #-52]	@ 0xffffffcc
 8007290:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007294:	f105 0540 	add.w	r5, r5, #64	@ 0x40
 8007298:	f101 0140 	add.w	r1, r1, #64	@ 0x40
 800729c:	ed11 5a1c 	vldr	s10, [r1, #-112]	@ 0xffffff90
 80072a0:	ed55 5a1b 	vldr	s11, [r5, #-108]	@ 0xffffff94
 80072a4:	eee4 7a06 	vfma.f32	s15, s8, s12
 80072a8:	ed11 6a1b 	vldr	s12, [r1, #-108]	@ 0xffffff94
 80072ac:	ed11 4a19 	vldr	s8, [r1, #-100]	@ 0xffffff9c
 80072b0:	eee4 7a85 	vfma.f32	s15, s9, s10
 80072b4:	ed51 4a18 	vldr	s9, [r1, #-96]	@ 0xffffffa0
 80072b8:	ed15 5a18 	vldr	s10, [r5, #-96]	@ 0xffffffa0
 80072bc:	eee5 7a86 	vfma.f32	s15, s11, s12
 80072c0:	ed15 6a17 	vldr	s12, [r5, #-92]	@ 0xffffffa4
 80072c4:	ed51 5a17 	vldr	s11, [r1, #-92]	@ 0xffffffa4
 80072c8:	eee2 7a83 	vfma.f32	s15, s5, s6
 80072cc:	ed55 2a15 	vldr	s5, [r5, #-84]	@ 0xffffffac
 80072d0:	ed11 3a14 	vldr	s6, [r1, #-80]	@ 0xffffffb0
 80072d4:	eee3 7a84 	vfma.f32	s15, s7, s8
 80072d8:	ed55 3a14 	vldr	s7, [r5, #-80]	@ 0xffffffb0
 80072dc:	ed11 4a13 	vldr	s8, [r1, #-76]	@ 0xffffffb4
 80072e0:	eee4 7a85 	vfma.f32	s15, s9, s10
 80072e4:	ed55 4a13 	vldr	s9, [r5, #-76]	@ 0xffffffb4
 80072e8:	ed15 5a12 	vldr	s10, [r5, #-72]	@ 0xffffffb8
 80072ec:	eee5 7a86 	vfma.f32	s15, s11, s12
 80072f0:	ed51 5a12 	vldr	s11, [r1, #-72]	@ 0xffffffb8
 80072f4:	ed15 6a11 	vldr	s12, [r5, #-68]	@ 0xffffffbc
 80072f8:	eee1 7a21 	vfma.f32	s15, s2, s3
 80072fc:	eee2 7a22 	vfma.f32	s15, s4, s5
 8007300:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007304:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007308:	eee5 7a25 	vfma.f32	s15, s10, s11
 800730c:	eee6 7a20 	vfma.f32	s15, s12, s1
 8007310:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007314:	db95      	blt.n	8007242 <forward_lite_conv2d_if32of32wf32_pool+0x68e>
 8007316:	4432      	add	r2, r6
 8007318:	4433      	add	r3, r6
 800731a:	4661      	mov	r1, ip
 800731c:	4288      	cmp	r0, r1
 800731e:	dd10      	ble.n	8007342 <forward_lite_conv2d_if32of32wf32_pool+0x78e>
 8007320:	460d      	mov	r5, r1
 8007322:	4690      	mov	r8, r2
 8007324:	469e      	mov	lr, r3
 8007326:	ecbe 6a01 	vldmia	lr!, {s12}
 800732a:	ecf8 7a01 	vldmia	r8!, {s15}
 800732e:	3501      	adds	r5, #1
 8007330:	42a8      	cmp	r0, r5
 8007332:	eea6 7a27 	vfma.f32	s14, s12, s15
 8007336:	d1f6      	bne.n	8007326 <forward_lite_conv2d_if32of32wf32_pool+0x772>
 8007338:	1a41      	subs	r1, r0, r1
 800733a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800733e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8007342:	3401      	adds	r4, #1
 8007344:	42a7      	cmp	r7, r4
 8007346:	445a      	add	r2, fp
 8007348:	4453      	add	r3, sl
 800734a:	f47f af6f 	bne.w	800722c <forward_lite_conv2d_if32of32wf32_pool+0x678>
 800734e:	e9dd 1815 	ldrd	r1, r8, [sp, #84]	@ 0x54
 8007352:	f8dd e05c 	ldr.w	lr, [sp, #92]	@ 0x5c
 8007356:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8007358:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800735a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800735c:	ed81 7a00 	vstr	s14, [r1]
 8007360:	4411      	add	r1, r2
 8007362:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007364:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8007366:	1ad2      	subs	r2, r2, r3
 8007368:	4498      	add	r8, r3
 800736a:	920d      	str	r2, [sp, #52]	@ 0x34
 800736c:	1aed      	subs	r5, r5, r3
 800736e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007370:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007372:	f10e 0e01 	add.w	lr, lr, #1
 8007376:	4402      	add	r2, r0
 8007378:	4573      	cmp	r3, lr
 800737a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800737c:	f47f af1f 	bne.w	80071be <forward_lite_conv2d_if32of32wf32_pool+0x60a>
 8007380:	e9dd 303f 	ldrd	r3, r0, [sp, #252]	@ 0xfc
 8007384:	e9dd a641 	ldrd	sl, r6, [sp, #260]	@ 0x104
 8007388:	9a38      	ldr	r2, [sp, #224]	@ 0xe0
 800738a:	f8dd 9198 	ldr.w	r9, [sp, #408]	@ 0x198
 800738e:	f8dd b10c 	ldr.w	fp, [sp, #268]	@ 0x10c
 8007392:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8007394:	9c21      	ldr	r4, [sp, #132]	@ 0x84
 8007396:	3304      	adds	r3, #4
 8007398:	4421      	add	r1, r4
 800739a:	4283      	cmp	r3, r0
 800739c:	9118      	str	r1, [sp, #96]	@ 0x60
 800739e:	f47f aeee 	bne.w	800717e <forward_lite_conv2d_if32of32wf32_pool+0x5ca>
 80073a2:	f8dd 80a8 	ldr.w	r8, [sp, #168]	@ 0xa8
 80073a6:	9c37      	ldr	r4, [sp, #220]	@ 0xdc
 80073a8:	e682      	b.n	80070b0 <forward_lite_conv2d_if32of32wf32_pool+0x4fc>
 80073aa:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80073ac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80073ae:	4610      	mov	r0, r2
 80073b0:	4413      	add	r3, r2
 80073b2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80073b4:	9211      	str	r2, [sp, #68]	@ 0x44
 80073b6:	e70a      	b.n	80071ce <forward_lite_conv2d_if32of32wf32_pool+0x61a>
 80073b8:	eef0 6a48 	vmov.f32	s13, s16
 80073bc:	e6e5      	b.n	800718a <forward_lite_conv2d_if32of32wf32_pool+0x5d6>
 80073be:	9a39      	ldr	r2, [sp, #228]	@ 0xe4
 80073c0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80073c2:	921b      	str	r2, [sp, #108]	@ 0x6c
 80073c4:	e533      	b.n	8006e2e <forward_lite_conv2d_if32of32wf32_pool+0x27a>
 80073c6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80073c8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80073ca:	440a      	add	r2, r1
 80073cc:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80073ce:	4291      	cmp	r1, r2
 80073d0:	bf9c      	itt	ls
 80073d2:	9923      	ldrls	r1, [sp, #140]	@ 0x8c
 80073d4:	1852      	addls	r2, r2, r1
 80073d6:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80073d8:	3301      	adds	r3, #1
 80073da:	4299      	cmp	r1, r3
 80073dc:	d1f4      	bne.n	80073c8 <forward_lite_conv2d_if32of32wf32_pool+0x814>
 80073de:	921a      	str	r2, [sp, #104]	@ 0x68
 80073e0:	e690      	b.n	8007104 <forward_lite_conv2d_if32of32wf32_pool+0x550>
 80073e2:	bf00      	nop

080073e4 <forward_lite_nl_relu_generic_if32of32_kernel>:
 80073e4:	b500      	push	{lr}
 80073e6:	edd3 6a02 	vldr	s13, [r3, #8]
 80073ea:	ed93 7a00 	vldr	s14, [r3]
 80073ee:	ed93 6a01 	vldr	s12, [r3, #4]
 80073f2:	f102 4c80 	add.w	ip, r2, #1073741824	@ 0x40000000
 80073f6:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80073fa:	f10c 3cff 	add.w	ip, ip, #4294967295
 80073fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007402:	ea4f 0e8c 	mov.w	lr, ip, lsl #2
 8007406:	eb01 028c 	add.w	r2, r1, ip, lsl #2
 800740a:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 800740e:	d422      	bmi.n	8007456 <forward_lite_nl_relu_generic_if32of32_kernel+0x72>
 8007410:	428a      	cmp	r2, r1
 8007412:	d31e      	bcc.n	8007452 <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 8007414:	1d13      	adds	r3, r2, #4
 8007416:	3004      	adds	r0, #4
 8007418:	eba2 020e 	sub.w	r2, r2, lr
 800741c:	e00c      	b.n	8007438 <forward_lite_nl_relu_generic_if32of32_kernel+0x54>
 800741e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007426:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800742a:	db01      	blt.n	8007430 <forward_lite_nl_relu_generic_if32of32_kernel+0x4c>
 800742c:	ee65 7a86 	vmul.f32	s15, s11, s12
 8007430:	4293      	cmp	r3, r2
 8007432:	ed60 7a01 	vstmdb	r0!, {s15}
 8007436:	d00c      	beq.n	8007452 <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 8007438:	ed73 7a01 	vldmdb	r3!, {s15}
 800743c:	eef4 6ae7 	vcmpe.f32	s13, s15
 8007440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007444:	daeb      	bge.n	800741e <forward_lite_nl_relu_generic_if32of32_kernel+0x3a>
 8007446:	eef0 7a66 	vmov.f32	s15, s13
 800744a:	4293      	cmp	r3, r2
 800744c:	ed60 7a01 	vstmdb	r0!, {s15}
 8007450:	d1f2      	bne.n	8007438 <forward_lite_nl_relu_generic_if32of32_kernel+0x54>
 8007452:	f85d fb04 	ldr.w	pc, [sp], #4
 8007456:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800745a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800745e:	d015      	beq.n	800748c <forward_lite_nl_relu_generic_if32of32_kernel+0xa8>
 8007460:	428a      	cmp	r2, r1
 8007462:	d3f6      	bcc.n	8007452 <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 8007464:	1d13      	adds	r3, r2, #4
 8007466:	3004      	adds	r0, #4
 8007468:	eba2 020e 	sub.w	r2, r2, lr
 800746c:	ed73 7a01 	vldmdb	r3!, {s15}
 8007470:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8007474:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800747c:	ee66 6a86 	vmul.f32	s13, s13, s12
 8007480:	d822      	bhi.n	80074c8 <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 8007482:	4293      	cmp	r3, r2
 8007484:	ed60 6a01 	vstmdb	r0!, {s13}
 8007488:	d1f0      	bne.n	800746c <forward_lite_nl_relu_generic_if32of32_kernel+0x88>
 800748a:	e7e2      	b.n	8007452 <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 800748c:	428a      	cmp	r2, r1
 800748e:	d3e0      	bcc.n	8007452 <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 8007490:	1d13      	adds	r3, r2, #4
 8007492:	2100      	movs	r1, #0
 8007494:	3004      	adds	r0, #4
 8007496:	eba2 020e 	sub.w	r2, r2, lr
 800749a:	ed73 7a01 	vldmdb	r3!, {s15}
 800749e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80074a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074a6:	dd0a      	ble.n	80074be <forward_lite_nl_relu_generic_if32of32_kernel+0xda>
 80074a8:	429a      	cmp	r2, r3
 80074aa:	ed60 7a01 	vstmdb	r0!, {s15}
 80074ae:	d0d0      	beq.n	8007452 <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 80074b0:	ed73 7a01 	vldmdb	r3!, {s15}
 80074b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80074b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074bc:	dcf4      	bgt.n	80074a8 <forward_lite_nl_relu_generic_if32of32_kernel+0xc4>
 80074be:	429a      	cmp	r2, r3
 80074c0:	f840 1d04 	str.w	r1, [r0, #-4]!
 80074c4:	d1e9      	bne.n	800749a <forward_lite_nl_relu_generic_if32of32_kernel+0xb6>
 80074c6:	e7c4      	b.n	8007452 <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 80074c8:	4293      	cmp	r3, r2
 80074ca:	ed60 7a01 	vstmdb	r0!, {s15}
 80074ce:	d1cd      	bne.n	800746c <forward_lite_nl_relu_generic_if32of32_kernel+0x88>
 80074d0:	e7bf      	b.n	8007452 <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 80074d2:	bf00      	nop

080074d4 <pool_func_mp_array_f32>:
 80074d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074d8:	b091      	sub	sp, #68	@ 0x44
 80074da:	468b      	mov	fp, r1
 80074dc:	f8bd 1078 	ldrh.w	r1, [sp, #120]	@ 0x78
 80074e0:	9104      	str	r1, [sp, #16]
 80074e2:	4692      	mov	sl, r2
 80074e4:	f8bd 107c 	ldrh.w	r1, [sp, #124]	@ 0x7c
 80074e8:	f8bd 2074 	ldrh.w	r2, [sp, #116]	@ 0x74
 80074ec:	9105      	str	r1, [sp, #20]
 80074ee:	4698      	mov	r8, r3
 80074f0:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 80074f4:	f8bd 1080 	ldrh.w	r1, [sp, #128]	@ 0x80
 80074f8:	f8bd 4068 	ldrh.w	r4, [sp, #104]	@ 0x68
 80074fc:	9101      	str	r1, [sp, #4]
 80074fe:	ea52 0c03 	orrs.w	ip, r2, r3
 8007502:	f8bd 1084 	ldrh.w	r1, [sp, #132]	@ 0x84
 8007506:	9402      	str	r4, [sp, #8]
 8007508:	4681      	mov	r9, r0
 800750a:	9103      	str	r1, [sp, #12]
 800750c:	f8bd 006c 	ldrh.w	r0, [sp, #108]	@ 0x6c
 8007510:	d10a      	bne.n	8007528 <pool_func_mp_array_f32+0x54>
 8007512:	9e01      	ldr	r6, [sp, #4]
 8007514:	9f04      	ldr	r7, [sp, #16]
 8007516:	eba4 040b 	sub.w	r4, r4, fp
 800751a:	3c01      	subs	r4, #1
 800751c:	1e71      	subs	r1, r6, #1
 800751e:	fb11 4107 	smlabb	r1, r1, r7, r4
 8007522:	040c      	lsls	r4, r1, #16
 8007524:	f100 8084 	bmi.w	8007630 <pool_func_mp_array_f32+0x15c>
 8007528:	9903      	ldr	r1, [sp, #12]
 800752a:	2900      	cmp	r1, #0
 800752c:	d07d      	beq.n	800762a <pool_func_mp_array_f32+0x156>
 800752e:	9901      	ldr	r1, [sp, #4]
 8007530:	2900      	cmp	r1, #0
 8007532:	d07a      	beq.n	800762a <pool_func_mp_array_f32+0x156>
 8007534:	f1b8 0f00 	cmp.w	r8, #0
 8007538:	d077      	beq.n	800762a <pool_func_mp_array_f32+0x156>
 800753a:	f1b8 0f01 	cmp.w	r8, #1
 800753e:	f040 80e8 	bne.w	8007712 <pool_func_mp_array_f32+0x23e>
 8007542:	9902      	ldr	r1, [sp, #8]
 8007544:	1a82      	subs	r2, r0, r2
 8007546:	1ac9      	subs	r1, r1, r3
 8007548:	b292      	uxth	r2, r2
 800754a:	425b      	negs	r3, r3
 800754c:	4617      	mov	r7, r2
 800754e:	b29c      	uxth	r4, r3
 8007550:	4605      	mov	r5, r0
 8007552:	2300      	movs	r3, #0
 8007554:	9804      	ldr	r0, [sp, #16]
 8007556:	461e      	mov	r6, r3
 8007558:	461a      	mov	r2, r3
 800755a:	b289      	uxth	r1, r1
 800755c:	463b      	mov	r3, r7
 800755e:	9f01      	ldr	r7, [sp, #4]
 8007560:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007562:	fb07 f606 	mul.w	r6, r7, r6
 8007566:	9604      	str	r6, [sp, #16]
 8007568:	e9cd 2307 	strd	r2, r3, [sp, #28]
 800756c:	1b5e      	subs	r6, r3, r5
 800756e:	e9cd 5109 	strd	r5, r1, [sp, #36]	@ 0x24
 8007572:	b236      	sxth	r6, r6
 8007574:	2700      	movs	r7, #0
 8007576:	9606      	str	r6, [sp, #24]
 8007578:	4688      	mov	r8, r1
 800757a:	46a6      	mov	lr, r4
 800757c:	b21e      	sxth	r6, r3
 800757e:	46bc      	mov	ip, r7
 8007580:	9a06      	ldr	r2, [sp, #24]
 8007582:	9b04      	ldr	r3, [sp, #16]
 8007584:	eddf 7aaa 	vldr	s15, [pc, #680]	@ 8007830 <pool_func_mp_array_f32+0x35c>
 8007588:	42b2      	cmp	r2, r6
 800758a:	eb0c 0403 	add.w	r4, ip, r3
 800758e:	fa0f f58e 	sxth.w	r5, lr
 8007592:	fa0f f188 	sxth.w	r1, r8
 8007596:	da29      	bge.n	80075ec <pool_func_mp_array_f32+0x118>
 8007598:	ea01 7ce1 	and.w	ip, r1, r1, asr #31
 800759c:	9702      	str	r7, [sp, #8]
 800759e:	428d      	cmp	r5, r1
 80075a0:	da1f      	bge.n	80075e2 <pool_func_mp_array_f32+0x10e>
 80075a2:	2a00      	cmp	r2, #0
 80075a4:	db1d      	blt.n	80075e2 <pool_func_mp_array_f32+0x10e>
 80075a6:	4552      	cmp	r2, sl
 80075a8:	da1b      	bge.n	80075e2 <pool_func_mp_array_f32+0x10e>
 80075aa:	2d00      	cmp	r5, #0
 80075ac:	462b      	mov	r3, r5
 80075ae:	da05      	bge.n	80075bc <pool_func_mp_array_f32+0xe8>
 80075b0:	3301      	adds	r3, #1
 80075b2:	b21b      	sxth	r3, r3
 80075b4:	459c      	cmp	ip, r3
 80075b6:	dcfb      	bgt.n	80075b0 <pool_func_mp_array_f32+0xdc>
 80075b8:	428b      	cmp	r3, r1
 80075ba:	da12      	bge.n	80075e2 <pool_func_mp_array_f32+0x10e>
 80075bc:	fb0b 3702 	mla	r7, fp, r2, r3
 80075c0:	455b      	cmp	r3, fp
 80075c2:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80075c6:	da08      	bge.n	80075da <pool_func_mp_array_f32+0x106>
 80075c8:	ed97 7a00 	vldr	s14, [r7]
 80075cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075d4:	bfb8      	it	lt
 80075d6:	eef0 7a47 	vmovlt.f32	s15, s14
 80075da:	3301      	adds	r3, #1
 80075dc:	b21b      	sxth	r3, r3
 80075de:	428b      	cmp	r3, r1
 80075e0:	dbec      	blt.n	80075bc <pool_func_mp_array_f32+0xe8>
 80075e2:	3201      	adds	r2, #1
 80075e4:	b212      	sxth	r2, r2
 80075e6:	42b2      	cmp	r2, r6
 80075e8:	dbd9      	blt.n	800759e <pool_func_mp_array_f32+0xca>
 80075ea:	9f02      	ldr	r7, [sp, #8]
 80075ec:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80075ee:	3701      	adds	r7, #1
 80075f0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80075f4:	9b01      	ldr	r3, [sp, #4]
 80075f6:	edc4 7a00 	vstr	s15, [r4]
 80075fa:	b23f      	sxth	r7, r7
 80075fc:	4480      	add	r8, r0
 80075fe:	4486      	add	lr, r0
 8007600:	42bb      	cmp	r3, r7
 8007602:	fa1f f888 	uxth.w	r8, r8
 8007606:	fa1f fe8e 	uxth.w	lr, lr
 800760a:	46bc      	mov	ip, r7
 800760c:	dcb8      	bgt.n	8007580 <pool_func_mp_array_f32+0xac>
 800760e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007612:	9e05      	ldr	r6, [sp, #20]
 8007614:	9f03      	ldr	r7, [sp, #12]
 8007616:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007618:	3201      	adds	r2, #1
 800761a:	b212      	sxth	r2, r2
 800761c:	4433      	add	r3, r6
 800761e:	4297      	cmp	r7, r2
 8007620:	e9dd 5109 	ldrd	r5, r1, [sp, #36]	@ 0x24
 8007624:	b29b      	uxth	r3, r3
 8007626:	4616      	mov	r6, r2
 8007628:	dc99      	bgt.n	800755e <pool_func_mp_array_f32+0x8a>
 800762a:	b011      	add	sp, #68	@ 0x44
 800762c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007630:	9f03      	ldr	r7, [sp, #12]
 8007632:	9d05      	ldr	r5, [sp, #20]
 8007634:	eba0 040a 	sub.w	r4, r0, sl
 8007638:	3c01      	subs	r4, #1
 800763a:	1e79      	subs	r1, r7, #1
 800763c:	fb11 4105 	smlabb	r1, r1, r5, r4
 8007640:	0409      	lsls	r1, r1, #16
 8007642:	f57f af71 	bpl.w	8007528 <pool_func_mp_array_f32+0x54>
 8007646:	2f00      	cmp	r7, #0
 8007648:	d0ef      	beq.n	800762a <pool_func_mp_array_f32+0x156>
 800764a:	2e00      	cmp	r6, #0
 800764c:	d0ed      	beq.n	800762a <pool_func_mp_array_f32+0x156>
 800764e:	f1b8 0f00 	cmp.w	r8, #0
 8007652:	d0ea      	beq.n	800762a <pool_func_mp_array_f32+0x156>
 8007654:	f1b8 0f01 	cmp.w	r8, #1
 8007658:	f040 80ec 	bne.w	8007834 <pool_func_mp_array_f32+0x360>
 800765c:	462e      	mov	r6, r5
 800765e:	4663      	mov	r3, ip
 8007660:	4662      	mov	r2, ip
 8007662:	46e6      	mov	lr, ip
 8007664:	9901      	ldr	r1, [sp, #4]
 8007666:	9c02      	ldr	r4, [sp, #8]
 8007668:	9207      	str	r2, [sp, #28]
 800766a:	fb0e f101 	mul.w	r1, lr, r1
 800766e:	2500      	movs	r5, #0
 8007670:	9105      	str	r1, [sp, #20]
 8007672:	fa0f f880 	sxth.w	r8, r0
 8007676:	b219      	sxth	r1, r3
 8007678:	46aa      	mov	sl, r5
 800767a:	46ae      	mov	lr, r5
 800767c:	461a      	mov	r2, r3
 800767e:	9b05      	ldr	r3, [sp, #20]
 8007680:	eddf 7a6b 	vldr	s15, [pc, #428]	@ 8007830 <pool_func_mp_array_f32+0x35c>
 8007684:	4473      	add	r3, lr
 8007686:	4541      	cmp	r1, r8
 8007688:	9306      	str	r3, [sp, #24]
 800768a:	fa0f fe85 	sxth.w	lr, r5
 800768e:	b227      	sxth	r7, r4
 8007690:	da1f      	bge.n	80076d2 <pool_func_mp_array_f32+0x1fe>
 8007692:	e9cd 1a08 	strd	r1, sl, [sp, #32]
 8007696:	468c      	mov	ip, r1
 8007698:	45be      	cmp	lr, r7
 800769a:	da12      	bge.n	80076c2 <pool_func_mp_array_f32+0x1ee>
 800769c:	fb0c e10b 	mla	r1, ip, fp, lr
 80076a0:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80076a4:	4673      	mov	r3, lr
 80076a6:	ecb1 7a01 	vldmia	r1!, {s14}
 80076aa:	3301      	adds	r3, #1
 80076ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80076b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076b4:	fa0f fa83 	sxth.w	sl, r3
 80076b8:	bfb8      	it	lt
 80076ba:	eef0 7a47 	vmovlt.f32	s15, s14
 80076be:	45ba      	cmp	sl, r7
 80076c0:	dbf1      	blt.n	80076a6 <pool_func_mp_array_f32+0x1d2>
 80076c2:	f10c 0c01 	add.w	ip, ip, #1
 80076c6:	fa0f fc8c 	sxth.w	ip, ip
 80076ca:	45c4      	cmp	ip, r8
 80076cc:	dbe4      	blt.n	8007698 <pool_func_mp_array_f32+0x1c4>
 80076ce:	e9dd 1a08 	ldrd	r1, sl, [sp, #32]
 80076d2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80076d4:	9f06      	ldr	r7, [sp, #24]
 80076d6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80076da:	9b04      	ldr	r3, [sp, #16]
 80076dc:	edc7 7a00 	vstr	s15, [r7]
 80076e0:	441c      	add	r4, r3
 80076e2:	441d      	add	r5, r3
 80076e4:	f10a 0a01 	add.w	sl, sl, #1
 80076e8:	9b01      	ldr	r3, [sp, #4]
 80076ea:	fa0f fa8a 	sxth.w	sl, sl
 80076ee:	4553      	cmp	r3, sl
 80076f0:	b2a4      	uxth	r4, r4
 80076f2:	b2ad      	uxth	r5, r5
 80076f4:	46d6      	mov	lr, sl
 80076f6:	dcc2      	bgt.n	800767e <pool_func_mp_array_f32+0x1aa>
 80076f8:	4613      	mov	r3, r2
 80076fa:	9a07      	ldr	r2, [sp, #28]
 80076fc:	9903      	ldr	r1, [sp, #12]
 80076fe:	3201      	adds	r2, #1
 8007700:	b212      	sxth	r2, r2
 8007702:	4430      	add	r0, r6
 8007704:	4433      	add	r3, r6
 8007706:	4291      	cmp	r1, r2
 8007708:	b280      	uxth	r0, r0
 800770a:	b29b      	uxth	r3, r3
 800770c:	4696      	mov	lr, r2
 800770e:	dca9      	bgt.n	8007664 <pool_func_mp_array_f32+0x190>
 8007710:	e78b      	b.n	800762a <pool_func_mp_array_f32+0x156>
 8007712:	9902      	ldr	r1, [sp, #8]
 8007714:	1a80      	subs	r0, r0, r2
 8007716:	1ac9      	subs	r1, r1, r3
 8007718:	4252      	negs	r2, r2
 800771a:	425b      	negs	r3, r3
 800771c:	b280      	uxth	r0, r0
 800771e:	fa1f fc82 	uxth.w	ip, r2
 8007722:	fa1f fe81 	uxth.w	lr, r1
 8007726:	2100      	movs	r1, #0
 8007728:	b29e      	uxth	r6, r3
 800772a:	4602      	mov	r2, r0
 800772c:	460b      	mov	r3, r1
 800772e:	4660      	mov	r0, ip
 8007730:	9c01      	ldr	r4, [sp, #4]
 8007732:	f8cd e03c 	str.w	lr, [sp, #60]	@ 0x3c
 8007736:	fb03 f304 	mul.w	r3, r3, r4
 800773a:	e9cd 200d 	strd	r2, r0, [sp, #52]	@ 0x34
 800773e:	b204      	sxth	r4, r0
 8007740:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007742:	2300      	movs	r3, #0
 8007744:	e9cd e606 	strd	lr, r6, [sp, #24]
 8007748:	9409      	str	r4, [sp, #36]	@ 0x24
 800774a:	fa0f fc82 	sxth.w	ip, r2
 800774e:	461c      	mov	r4, r3
 8007750:	910c      	str	r1, [sp, #48]	@ 0x30
 8007752:	930a      	str	r3, [sp, #40]	@ 0x28
 8007754:	46b6      	mov	lr, r6
 8007756:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007758:	f9bd 0018 	ldrsh.w	r0, [sp, #24]
 800775c:	f9bd 601c 	ldrsh.w	r6, [sp, #28]
 8007760:	441c      	add	r4, r3
 8007762:	fb08 f104 	mul.w	r1, r8, r4
 8007766:	2400      	movs	r4, #0
 8007768:	4625      	mov	r5, r4
 800776a:	ea00 77e0 	and.w	r7, r0, r0, asr #31
 800776e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007770:	eddf 7a2f 	vldr	s15, [pc, #188]	@ 8007830 <pool_func_mp_array_f32+0x35c>
 8007774:	4562      	cmp	r2, ip
 8007776:	da2b      	bge.n	80077d0 <pool_func_mp_array_f32+0x2fc>
 8007778:	9108      	str	r1, [sp, #32]
 800777a:	4286      	cmp	r6, r0
 800777c:	da23      	bge.n	80077c6 <pool_func_mp_array_f32+0x2f2>
 800777e:	2a00      	cmp	r2, #0
 8007780:	db21      	blt.n	80077c6 <pool_func_mp_array_f32+0x2f2>
 8007782:	4552      	cmp	r2, sl
 8007784:	da1f      	bge.n	80077c6 <pool_func_mp_array_f32+0x2f2>
 8007786:	2e00      	cmp	r6, #0
 8007788:	4633      	mov	r3, r6
 800778a:	da05      	bge.n	8007798 <pool_func_mp_array_f32+0x2c4>
 800778c:	3301      	adds	r3, #1
 800778e:	b21b      	sxth	r3, r3
 8007790:	42bb      	cmp	r3, r7
 8007792:	dbfb      	blt.n	800778c <pool_func_mp_array_f32+0x2b8>
 8007794:	4283      	cmp	r3, r0
 8007796:	da16      	bge.n	80077c6 <pool_func_mp_array_f32+0x2f2>
 8007798:	9402      	str	r4, [sp, #8]
 800779a:	fb0b 3102 	mla	r1, fp, r2, r3
 800779e:	fb08 5101 	mla	r1, r8, r1, r5
 80077a2:	1c5c      	adds	r4, r3, #1
 80077a4:	459b      	cmp	fp, r3
 80077a6:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80077aa:	b223      	sxth	r3, r4
 80077ac:	dd08      	ble.n	80077c0 <pool_func_mp_array_f32+0x2ec>
 80077ae:	ed91 7a00 	vldr	s14, [r1]
 80077b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80077b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077ba:	bfb8      	it	lt
 80077bc:	eef0 7a47 	vmovlt.f32	s15, s14
 80077c0:	4283      	cmp	r3, r0
 80077c2:	dbea      	blt.n	800779a <pool_func_mp_array_f32+0x2c6>
 80077c4:	9c02      	ldr	r4, [sp, #8]
 80077c6:	3201      	adds	r2, #1
 80077c8:	b212      	sxth	r2, r2
 80077ca:	4562      	cmp	r2, ip
 80077cc:	dbd5      	blt.n	800777a <pool_func_mp_array_f32+0x2a6>
 80077ce:	9908      	ldr	r1, [sp, #32]
 80077d0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80077d2:	3401      	adds	r4, #1
 80077d4:	b224      	sxth	r4, r4
 80077d6:	440d      	add	r5, r1
 80077d8:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 80077dc:	4544      	cmp	r4, r8
 80077de:	edc5 7a00 	vstr	s15, [r5]
 80077e2:	4625      	mov	r5, r4
 80077e4:	dbc3      	blt.n	800776e <pool_func_mp_array_f32+0x29a>
 80077e6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80077e8:	9a04      	ldr	r2, [sp, #16]
 80077ea:	9c06      	ldr	r4, [sp, #24]
 80077ec:	3001      	adds	r0, #1
 80077ee:	b203      	sxth	r3, r0
 80077f0:	9807      	ldr	r0, [sp, #28]
 80077f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80077f4:	4414      	add	r4, r2
 80077f6:	4410      	add	r0, r2
 80077f8:	b2a2      	uxth	r2, r4
 80077fa:	9206      	str	r2, [sp, #24]
 80077fc:	b282      	uxth	r2, r0
 80077fe:	9207      	str	r2, [sp, #28]
 8007800:	9a01      	ldr	r2, [sp, #4]
 8007802:	429a      	cmp	r2, r3
 8007804:	461c      	mov	r4, r3
 8007806:	dca6      	bgt.n	8007756 <pool_func_mp_array_f32+0x282>
 8007808:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	@ 0x30
 800780c:	1c4b      	adds	r3, r1, #1
 800780e:	b219      	sxth	r1, r3
 8007810:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8007812:	9b05      	ldr	r3, [sp, #20]
 8007814:	9c03      	ldr	r4, [sp, #12]
 8007816:	441a      	add	r2, r3
 8007818:	428c      	cmp	r4, r1
 800781a:	4403      	add	r3, r0
 800781c:	4676      	mov	r6, lr
 800781e:	b298      	uxth	r0, r3
 8007820:	f8dd e03c 	ldr.w	lr, [sp, #60]	@ 0x3c
 8007824:	b292      	uxth	r2, r2
 8007826:	460b      	mov	r3, r1
 8007828:	dc82      	bgt.n	8007730 <pool_func_mp_array_f32+0x25c>
 800782a:	b011      	add	sp, #68	@ 0x44
 800782c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007830:	cf000000 	.word	0xcf000000
 8007834:	462c      	mov	r4, r5
 8007836:	4667      	mov	r7, ip
 8007838:	4665      	mov	r5, ip
 800783a:	4663      	mov	r3, ip
 800783c:	ea4f 0e88 	mov.w	lr, r8, lsl #2
 8007840:	46cc      	mov	ip, r9
 8007842:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8007846:	9a01      	ldr	r2, [sp, #4]
 8007848:	970a      	str	r7, [sp, #40]	@ 0x28
 800784a:	fb03 f902 	mul.w	r9, r3, r2
 800784e:	b22b      	sxth	r3, r5
 8007850:	9308      	str	r3, [sp, #32]
 8007852:	b203      	sxth	r3, r0
 8007854:	2200      	movs	r2, #0
 8007856:	9305      	str	r3, [sp, #20]
 8007858:	462e      	mov	r6, r5
 800785a:	9b02      	ldr	r3, [sp, #8]
 800785c:	4625      	mov	r5, r4
 800785e:	4601      	mov	r1, r0
 8007860:	4693      	mov	fp, r2
 8007862:	4614      	mov	r4, r2
 8007864:	4628      	mov	r0, r5
 8007866:	444c      	add	r4, r9
 8007868:	fb08 f404 	mul.w	r4, r8, r4
 800786c:	9407      	str	r4, [sp, #28]
 800786e:	b21d      	sxth	r5, r3
 8007870:	2400      	movs	r4, #0
 8007872:	e9cd 9b0b 	strd	r9, fp, [sp, #44]	@ 0x2c
 8007876:	b217      	sxth	r7, r2
 8007878:	46a2      	mov	sl, r4
 800787a:	4691      	mov	r9, r2
 800787c:	9506      	str	r5, [sp, #24]
 800787e:	9a08      	ldr	r2, [sp, #32]
 8007880:	9d05      	ldr	r5, [sp, #20]
 8007882:	ed5f 7a15 	vldr	s15, [pc, #-84]	@ 8007830 <pool_func_mp_array_f32+0x35c>
 8007886:	42aa      	cmp	r2, r5
 8007888:	da2a      	bge.n	80078e0 <pool_func_mp_array_f32+0x40c>
 800788a:	9d06      	ldr	r5, [sp, #24]
 800788c:	940d      	str	r4, [sp, #52]	@ 0x34
 800788e:	4693      	mov	fp, r2
 8007890:	461c      	mov	r4, r3
 8007892:	42af      	cmp	r7, r5
 8007894:	da1a      	bge.n	80078cc <pool_func_mp_array_f32+0x3f8>
 8007896:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007898:	f8cd a018 	str.w	sl, [sp, #24]
 800789c:	fb03 730b 	mla	r3, r3, fp, r7
 80078a0:	fb08 a303 	mla	r3, r8, r3, sl
 80078a4:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 80078a8:	463a      	mov	r2, r7
 80078aa:	ed93 7a00 	vldr	s14, [r3]
 80078ae:	3201      	adds	r2, #1
 80078b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80078b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078b8:	fa0f fa82 	sxth.w	sl, r2
 80078bc:	bfb8      	it	lt
 80078be:	eef0 7a47 	vmovlt.f32	s15, s14
 80078c2:	45aa      	cmp	sl, r5
 80078c4:	4473      	add	r3, lr
 80078c6:	dbf0      	blt.n	80078aa <pool_func_mp_array_f32+0x3d6>
 80078c8:	f8dd a018 	ldr.w	sl, [sp, #24]
 80078cc:	9b05      	ldr	r3, [sp, #20]
 80078ce:	f10b 0b01 	add.w	fp, fp, #1
 80078d2:	fa0f fb8b 	sxth.w	fp, fp
 80078d6:	459b      	cmp	fp, r3
 80078d8:	dbdb      	blt.n	8007892 <pool_func_mp_array_f32+0x3be>
 80078da:	4623      	mov	r3, r4
 80078dc:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80078de:	9506      	str	r5, [sp, #24]
 80078e0:	9a07      	ldr	r2, [sp, #28]
 80078e2:	3401      	adds	r4, #1
 80078e4:	4492      	add	sl, r2
 80078e6:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80078e8:	b224      	sxth	r4, r4
 80078ea:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 80078ee:	4544      	cmp	r4, r8
 80078f0:	edca 7a00 	vstr	s15, [sl]
 80078f4:	46a2      	mov	sl, r4
 80078f6:	dbc2      	blt.n	800787e <pool_func_mp_array_f32+0x3aa>
 80078f8:	f8dd b030 	ldr.w	fp, [sp, #48]	@ 0x30
 80078fc:	9c04      	ldr	r4, [sp, #16]
 80078fe:	9d01      	ldr	r5, [sp, #4]
 8007900:	f10b 0b01 	add.w	fp, fp, #1
 8007904:	464a      	mov	r2, r9
 8007906:	fa0f fb8b 	sxth.w	fp, fp
 800790a:	4423      	add	r3, r4
 800790c:	4422      	add	r2, r4
 800790e:	455d      	cmp	r5, fp
 8007910:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 8007914:	b29b      	uxth	r3, r3
 8007916:	b292      	uxth	r2, r2
 8007918:	465c      	mov	r4, fp
 800791a:	dca4      	bgt.n	8007866 <pool_func_mp_array_f32+0x392>
 800791c:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 800791e:	9a03      	ldr	r2, [sp, #12]
 8007920:	3701      	adds	r7, #1
 8007922:	4604      	mov	r4, r0
 8007924:	b23f      	sxth	r7, r7
 8007926:	4635      	mov	r5, r6
 8007928:	4608      	mov	r0, r1
 800792a:	4420      	add	r0, r4
 800792c:	4425      	add	r5, r4
 800792e:	42ba      	cmp	r2, r7
 8007930:	b280      	uxth	r0, r0
 8007932:	b2ad      	uxth	r5, r5
 8007934:	463b      	mov	r3, r7
 8007936:	dc86      	bgt.n	8007846 <pool_func_mp_array_f32+0x372>
 8007938:	e677      	b.n	800762a <pool_func_mp_array_f32+0x156>
 800793a:	bf00      	nop

0800793c <forward_lite_dense_if32of32wf32>:
 800793c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007940:	e9d0 c305 	ldrd	ip, r3, [r0, #20]
 8007944:	6801      	ldr	r1, [r0, #0]
 8007946:	fb03 f30c 	mul.w	r3, r3, ip
 800794a:	4602      	mov	r2, r0
 800794c:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8007950:	4281      	cmp	r1, r0
 8007952:	6857      	ldr	r7, [r2, #4]
 8007954:	b083      	sub	sp, #12
 8007956:	f080 811f 	bcs.w	8007b98 <forward_lite_dense_if32of32wf32+0x25c>
 800795a:	6915      	ldr	r5, [r2, #16]
 800795c:	ea4f 068c 	mov.w	r6, ip, lsl #2
 8007960:	4664      	mov	r4, ip
 8007962:	eb01 0806 	add.w	r8, r1, r6
 8007966:	4588      	cmp	r8, r1
 8007968:	6896      	ldr	r6, [r2, #8]
 800796a:	f240 8109 	bls.w	8007b80 <forward_lite_dense_if32of32wf32+0x244>
 800796e:	f1a5 0e10 	sub.w	lr, r5, #16
 8007972:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 8007976:	e9cd 0100 	strd	r0, r1, [sp]
 800797a:	f10e 0e01 	add.w	lr, lr, #1
 800797e:	ea4f 1b8e 	mov.w	fp, lr, lsl #6
 8007982:	ea4f 0985 	mov.w	r9, r5, lsl #2
 8007986:	eb07 1e8e 	add.w	lr, r7, lr, lsl #6
 800798a:	468c      	mov	ip, r1
 800798c:	2d0f      	cmp	r5, #15
 800798e:	ed9f 7a95 	vldr	s14, [pc, #596]	@ 8007be4 <forward_lite_dense_if32of32wf32+0x2a8>
 8007992:	f240 8104 	bls.w	8007b9e <forward_lite_dense_if32of32wf32+0x262>
 8007996:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800799a:	f106 0340 	add.w	r3, r6, #64	@ 0x40
 800799e:	4628      	mov	r0, r5
 80079a0:	ed53 5a0f 	vldr	s11, [r3, #-60]	@ 0xffffffc4
 80079a4:	ed51 7a0f 	vldr	s15, [r1, #-60]	@ 0xffffffc4
 80079a8:	ed11 6a10 	vldr	s12, [r1, #-64]	@ 0xffffffc0
 80079ac:	ed53 6a10 	vldr	s13, [r3, #-64]	@ 0xffffffc0
 80079b0:	ed53 4a0d 	vldr	s9, [r3, #-52]	@ 0xffffffcc
 80079b4:	ed13 5a0c 	vldr	s10, [r3, #-48]	@ 0xffffffd0
 80079b8:	ed51 3a0a 	vldr	s7, [r1, #-40]	@ 0xffffffd8
 80079bc:	ed13 3a0a 	vldr	s6, [r3, #-40]	@ 0xffffffd8
 80079c0:	ed13 4a09 	vldr	s8, [r3, #-36]	@ 0xffffffdc
 80079c4:	ed11 1a06 	vldr	s2, [r1, #-24]	@ 0xffffffe8
 80079c8:	ed53 1a06 	vldr	s3, [r3, #-24]	@ 0xffffffe8
 80079cc:	ed11 2a05 	vldr	s4, [r1, #-20]	@ 0xffffffec
 80079d0:	ed53 2a05 	vldr	s5, [r3, #-20]	@ 0xffffffec
 80079d4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80079d8:	ed51 5a0e 	vldr	s11, [r1, #-56]	@ 0xffffffc8
 80079dc:	eee6 7a26 	vfma.f32	s15, s12, s13
 80079e0:	3810      	subs	r0, #16
 80079e2:	280f      	cmp	r0, #15
 80079e4:	ed53 6a0e 	vldr	s13, [r3, #-56]	@ 0xffffffc8
 80079e8:	ed11 6a0d 	vldr	s12, [r1, #-52]	@ 0xffffffcc
 80079ec:	eee5 7aa6 	vfma.f32	s15, s11, s13
 80079f0:	f101 0140 	add.w	r1, r1, #64	@ 0x40
 80079f4:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 80079f8:	ed51 5a1c 	vldr	s11, [r1, #-112]	@ 0xffffff90
 80079fc:	ed51 6a1b 	vldr	s13, [r1, #-108]	@ 0xffffff94
 8007a00:	eee4 7a86 	vfma.f32	s15, s9, s12
 8007a04:	ed13 6a1b 	vldr	s12, [r3, #-108]	@ 0xffffff94
 8007a08:	ed51 4a19 	vldr	s9, [r1, #-100]	@ 0xffffff9c
 8007a0c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007a10:	ed11 5a18 	vldr	s10, [r1, #-96]	@ 0xffffffa0
 8007a14:	ed53 5a18 	vldr	s11, [r3, #-96]	@ 0xffffffa0
 8007a18:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007a1c:	ed11 6a17 	vldr	s12, [r1, #-92]	@ 0xffffffa4
 8007a20:	ed53 6a17 	vldr	s13, [r3, #-92]	@ 0xffffffa4
 8007a24:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007a28:	ed11 3a14 	vldr	s6, [r1, #-80]	@ 0xffffffb0
 8007a2c:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 8007a30:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007a34:	ed51 4a13 	vldr	s9, [r1, #-76]	@ 0xffffffb4
 8007a38:	ed13 4a13 	vldr	s8, [r3, #-76]	@ 0xffffffb4
 8007a3c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007a40:	ed51 5a12 	vldr	s11, [r1, #-72]	@ 0xffffffb8
 8007a44:	ed13 5a12 	vldr	s10, [r3, #-72]	@ 0xffffffb8
 8007a48:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007a4c:	ed51 6a11 	vldr	s13, [r1, #-68]	@ 0xffffffbc
 8007a50:	ed13 6a11 	vldr	s12, [r3, #-68]	@ 0xffffffbc
 8007a54:	eee1 7a21 	vfma.f32	s15, s2, s3
 8007a58:	eee2 7a22 	vfma.f32	s15, s4, s5
 8007a5c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007a60:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007a64:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007a68:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007a6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007a70:	d896      	bhi.n	80079a0 <forward_lite_dense_if32of32wf32+0x64>
 8007a72:	eb06 010b 	add.w	r1, r6, fp
 8007a76:	f005 000f 	and.w	r0, r5, #15
 8007a7a:	4673      	mov	r3, lr
 8007a7c:	2803      	cmp	r0, #3
 8007a7e:	d95f      	bls.n	8007b40 <forward_lite_dense_if32of32wf32+0x204>
 8007a80:	edd1 6a01 	vldr	s13, [r1, #4]
 8007a84:	edd3 7a01 	vldr	s15, [r3, #4]
 8007a88:	ed93 6a00 	vldr	s12, [r3]
 8007a8c:	ed93 5a02 	vldr	s10, [r3, #8]
 8007a90:	edd1 5a02 	vldr	s11, [r1, #8]
 8007a94:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007a98:	edd1 6a00 	vldr	s13, [r1]
 8007a9c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007aa0:	1f04      	subs	r4, r0, #4
 8007aa2:	2c03      	cmp	r4, #3
 8007aa4:	ed93 6a03 	vldr	s12, [r3, #12]
 8007aa8:	edd1 6a03 	vldr	s13, [r1, #12]
 8007aac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007ab0:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007ab4:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007ab8:	eeb0 7a67 	vmov.f32	s14, s15
 8007abc:	d938      	bls.n	8007b30 <forward_lite_dense_if32of32wf32+0x1f4>
 8007abe:	edd1 6a05 	vldr	s13, [r1, #20]
 8007ac2:	edd3 7a05 	vldr	s15, [r3, #20]
 8007ac6:	ed93 6a04 	vldr	s12, [r3, #16]
 8007aca:	ed93 5a06 	vldr	s10, [r3, #24]
 8007ace:	edd1 5a06 	vldr	s11, [r1, #24]
 8007ad2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007ad6:	edd1 6a04 	vldr	s13, [r1, #16]
 8007ada:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007ade:	f1a0 0a08 	sub.w	sl, r0, #8
 8007ae2:	f1ba 0f03 	cmp.w	sl, #3
 8007ae6:	ed93 6a07 	vldr	s12, [r3, #28]
 8007aea:	edd1 6a07 	vldr	s13, [r1, #28]
 8007aee:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007af2:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007af6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007afa:	d919      	bls.n	8007b30 <forward_lite_dense_if32of32wf32+0x1f4>
 8007afc:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8007b00:	edd1 7a09 	vldr	s15, [r1, #36]	@ 0x24
 8007b04:	ed91 6a08 	vldr	s12, [r1, #32]
 8007b08:	ed91 5a0a 	vldr	s10, [r1, #40]	@ 0x28
 8007b0c:	edd3 5a0a 	vldr	s11, [r3, #40]	@ 0x28
 8007b10:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007b14:	edd3 6a08 	vldr	s13, [r3, #32]
 8007b18:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007b1c:	ed91 6a0b 	vldr	s12, [r1, #44]	@ 0x2c
 8007b20:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 8007b24:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007b28:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007b2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007b30:	08a4      	lsrs	r4, r4, #2
 8007b32:	3401      	adds	r4, #1
 8007b34:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 8007b38:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8007b3c:	f000 0003 	and.w	r0, r0, #3
 8007b40:	b1a8      	cbz	r0, 8007b6e <forward_lite_dense_if32of32wf32+0x232>
 8007b42:	edd3 6a00 	vldr	s13, [r3]
 8007b46:	edd1 7a00 	vldr	s15, [r1]
 8007b4a:	2801      	cmp	r0, #1
 8007b4c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007b50:	d00d      	beq.n	8007b6e <forward_lite_dense_if32of32wf32+0x232>
 8007b52:	edd3 6a01 	vldr	s13, [r3, #4]
 8007b56:	edd1 7a01 	vldr	s15, [r1, #4]
 8007b5a:	2802      	cmp	r0, #2
 8007b5c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007b60:	d005      	beq.n	8007b6e <forward_lite_dense_if32of32wf32+0x232>
 8007b62:	edd1 6a02 	vldr	s13, [r1, #8]
 8007b66:	edd3 7a02 	vldr	s15, [r3, #8]
 8007b6a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007b6e:	444e      	add	r6, r9
 8007b70:	ecac 7a01 	vstmia	ip!, {s14}
 8007b74:	45e0      	cmp	r8, ip
 8007b76:	f63f af09 	bhi.w	800798c <forward_lite_dense_if32of32wf32+0x50>
 8007b7a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b7e:	6954      	ldr	r4, [r2, #20]
 8007b80:	68d3      	ldr	r3, [r2, #12]
 8007b82:	b983      	cbnz	r3, 8007ba6 <forward_lite_dense_if32of32wf32+0x26a>
 8007b84:	6915      	ldr	r5, [r2, #16]
 8007b86:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007b8a:	4288      	cmp	r0, r1
 8007b8c:	eb07 0785 	add.w	r7, r7, r5, lsl #2
 8007b90:	ea4f 0684 	mov.w	r6, r4, lsl #2
 8007b94:	f63f aee5 	bhi.w	8007962 <forward_lite_dense_if32of32wf32+0x26>
 8007b98:	b003      	add	sp, #12
 8007b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b9e:	4628      	mov	r0, r5
 8007ba0:	4631      	mov	r1, r6
 8007ba2:	463b      	mov	r3, r7
 8007ba4:	e76a      	b.n	8007a7c <forward_lite_dense_if32of32wf32+0x140>
 8007ba6:	2c00      	cmp	r4, #0
 8007ba8:	d0ec      	beq.n	8007b84 <forward_lite_dense_if32of32wf32+0x248>
 8007baa:	edd1 7a00 	vldr	s15, [r1]
 8007bae:	ed93 7a00 	vldr	s14, [r3]
 8007bb2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007bb6:	edc1 7a00 	vstr	s15, [r1]
 8007bba:	6954      	ldr	r4, [r2, #20]
 8007bbc:	2c01      	cmp	r4, #1
 8007bbe:	d9e1      	bls.n	8007b84 <forward_lite_dense_if32of32wf32+0x248>
 8007bc0:	1d0d      	adds	r5, r1, #4
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	68d4      	ldr	r4, [r2, #12]
 8007bc6:	ed95 7a00 	vldr	s14, [r5]
 8007bca:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8007bce:	edd4 7a00 	vldr	s15, [r4]
 8007bd2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007bd6:	3301      	adds	r3, #1
 8007bd8:	ece5 7a01 	vstmia	r5!, {s15}
 8007bdc:	6954      	ldr	r4, [r2, #20]
 8007bde:	429c      	cmp	r4, r3
 8007be0:	d8f0      	bhi.n	8007bc4 <forward_lite_dense_if32of32wf32+0x288>
 8007be2:	e7cf      	b.n	8007b84 <forward_lite_dense_if32of32wf32+0x248>
 8007be4:	00000000 	.word	0x00000000

08007be8 <forward_lite_dense_if32of32wf32_lut4>:
 8007be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bec:	b08d      	sub	sp, #52	@ 0x34
 8007bee:	4604      	mov	r4, r0
 8007bf0:	920a      	str	r2, [sp, #40]	@ 0x28
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	e9dd 2319 	ldrd	r2, r3, [sp, #100]	@ 0x64
 8007bf8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007bfc:	fb02 f303 	mul.w	r3, r2, r3
 8007c00:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007c04:	e9dd 6717 	ldrd	r6, r7, [sp, #92]	@ 0x5c
 8007c08:	460d      	mov	r5, r1
 8007c0a:	9308      	str	r3, [sp, #32]
 8007c0c:	f1b8 0f00 	cmp.w	r8, #0
 8007c10:	d004      	beq.n	8007c1c <forward_lite_dense_if32of32wf32_lut4+0x34>
 8007c12:	2240      	movs	r2, #64	@ 0x40
 8007c14:	4641      	mov	r1, r8
 8007c16:	f000 fa99 	bl	800814c <st_int8_copy>
 8007c1a:	4640      	mov	r0, r8
 8007c1c:	9b08      	ldr	r3, [sp, #32]
 8007c1e:	429c      	cmp	r4, r3
 8007c20:	f080 8108 	bcs.w	8007e34 <forward_lite_dense_if32of32wf32_lut4+0x24c>
 8007c24:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007c26:	9405      	str	r4, [sp, #20]
 8007c28:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 8007c2c:	f007 0301 	and.w	r3, r7, #1
 8007c30:	08fa      	lsrs	r2, r7, #3
 8007c32:	9303      	str	r3, [sp, #12]
 8007c34:	00bb      	lsls	r3, r7, #2
 8007c36:	eb05 1b42 	add.w	fp, r5, r2, lsl #5
 8007c3a:	9202      	str	r2, [sp, #8]
 8007c3c:	f027 0901 	bic.w	r9, r7, #1
 8007c40:	0092      	lsls	r2, r2, #2
 8007c42:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c44:	9b05      	ldr	r3, [sp, #20]
 8007c46:	9204      	str	r2, [sp, #16]
 8007c48:	eb05 0989 	add.w	r9, r5, r9, lsl #2
 8007c4c:	f105 0120 	add.w	r1, r5, #32
 8007c50:	46e6      	mov	lr, ip
 8007c52:	f8cd c01c 	str.w	ip, [sp, #28]
 8007c56:	465c      	mov	r4, fp
 8007c58:	9617      	str	r6, [sp, #92]	@ 0x5c
 8007c5a:	f8cd c024 	str.w	ip, [sp, #36]	@ 0x24
 8007c5e:	9a07      	ldr	r2, [sp, #28]
 8007c60:	eb03 0a02 	add.w	sl, r3, r2
 8007c64:	459a      	cmp	sl, r3
 8007c66:	f1a1 0220 	sub.w	r2, r1, #32
 8007c6a:	9206      	str	r2, [sp, #24]
 8007c6c:	f240 80e5 	bls.w	8007e3a <forward_lite_dense_if32of32wf32_lut4+0x252>
 8007c70:	f109 3bff 	add.w	fp, r9, #4294967295
 8007c74:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007c76:	4698      	mov	r8, r3
 8007c78:	465d      	mov	r5, fp
 8007c7a:	9b02      	ldr	r3, [sp, #8]
 8007c7c:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 8007e6c <forward_lite_dense_if32of32wf32_lut4+0x284>
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	f000 80bc 	beq.w	8007dfe <forward_lite_dense_if32of32wf32_lut4+0x216>
 8007c86:	9b04      	ldr	r3, [sp, #16]
 8007c88:	eb02 0c03 	add.w	ip, r2, r3
 8007c8c:	460b      	mov	r3, r1
 8007c8e:	7817      	ldrb	r7, [r2, #0]
 8007c90:	ed53 2a07 	vldr	s5, [r3, #-28]	@ 0xffffffe4
 8007c94:	7856      	ldrb	r6, [r2, #1]
 8007c96:	ed53 3a08 	vldr	s7, [r3, #-32]	@ 0xffffffe0
 8007c9a:	ed13 4a06 	vldr	s8, [r3, #-24]	@ 0xffffffe8
 8007c9e:	ed53 4a05 	vldr	s9, [r3, #-20]	@ 0xffffffec
 8007ca2:	ed13 5a04 	vldr	s10, [r3, #-16]
 8007ca6:	ed53 5a03 	vldr	s11, [r3, #-12]
 8007caa:	ed13 6a02 	vldr	s12, [r3, #-8]
 8007cae:	ed53 6a01 	vldr	s13, [r3, #-4]
 8007cb2:	f007 0e0f 	and.w	lr, r7, #15
 8007cb6:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8007cba:	edde 7a00 	vldr	s15, [lr]
 8007cbe:	093f      	lsrs	r7, r7, #4
 8007cc0:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8007cc4:	ed97 3a00 	vldr	s6, [r7]
 8007cc8:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8007ccc:	0937      	lsrs	r7, r6, #4
 8007cce:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007cd2:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8007cd6:	f006 060f 	and.w	r6, r6, #15
 8007cda:	edd7 3a00 	vldr	s7, [r7]
 8007cde:	7897      	ldrb	r7, [r2, #2]
 8007ce0:	eee3 7a84 	vfma.f32	s15, s7, s8
 8007ce4:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8007ce8:	ea4f 1e17 	mov.w	lr, r7, lsr #4
 8007cec:	ed96 4a00 	vldr	s8, [r6]
 8007cf0:	78d6      	ldrb	r6, [r2, #3]
 8007cf2:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007cf6:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8007cfa:	f007 070f 	and.w	r7, r7, #15
 8007cfe:	edde 4a00 	vldr	s9, [lr]
 8007d02:	eee4 7a85 	vfma.f32	s15, s9, s10
 8007d06:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8007d0a:	3204      	adds	r2, #4
 8007d0c:	ed97 5a00 	vldr	s10, [r7]
 8007d10:	0937      	lsrs	r7, r6, #4
 8007d12:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007d16:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8007d1a:	f006 060f 	and.w	r6, r6, #15
 8007d1e:	edd7 5a00 	vldr	s11, [r7]
 8007d22:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007d26:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8007d2a:	4562      	cmp	r2, ip
 8007d2c:	ed96 6a00 	vldr	s12, [r6]
 8007d30:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007d34:	f103 0320 	add.w	r3, r3, #32
 8007d38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007d3c:	d1a7      	bne.n	8007c8e <forward_lite_dense_if32of32wf32_lut4+0xa6>
 8007d3e:	46a6      	mov	lr, r4
 8007d40:	45ce      	cmp	lr, r9
 8007d42:	d261      	bcs.n	8007e08 <forward_lite_dense_if32of32wf32_lut4+0x220>
 8007d44:	eba5 070e 	sub.w	r7, r5, lr
 8007d48:	ea4f 0bd7 	mov.w	fp, r7, lsr #3
 8007d4c:	f10e 0208 	add.w	r2, lr, #8
 8007d50:	f10c 36ff 	add.w	r6, ip, #4294967295
 8007d54:	eb0c 07d7 	add.w	r7, ip, r7, lsr #3
 8007d58:	f8cd a004 	str.w	sl, [sp, #4]
 8007d5c:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 8007d60:	ed52 5a01 	vldr	s11, [r2, #-4]
 8007d64:	ed52 6a02 	vldr	s13, [r2, #-8]
 8007d68:	f003 0a0f 	and.w	sl, r3, #15
 8007d6c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8007d70:	edda 7a00 	vldr	s15, [sl]
 8007d74:	091b      	lsrs	r3, r3, #4
 8007d76:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007d7a:	ed93 6a00 	vldr	s12, [r3]
 8007d7e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8007d82:	42b7      	cmp	r7, r6
 8007d84:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007d88:	f102 0208 	add.w	r2, r2, #8
 8007d8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007d90:	d1e4      	bne.n	8007d5c <forward_lite_dense_if32of32wf32_lut4+0x174>
 8007d92:	f10b 0b01 	add.w	fp, fp, #1
 8007d96:	f8dd a004 	ldr.w	sl, [sp, #4]
 8007d9a:	eb0c 020b 	add.w	r2, ip, fp
 8007d9e:	eb0e 0ecb 	add.w	lr, lr, fp, lsl #3
 8007da2:	9b03      	ldr	r3, [sp, #12]
 8007da4:	b30b      	cbz	r3, 8007dea <forward_lite_dense_if32of32wf32_lut4+0x202>
 8007da6:	f812 3b01 	ldrb.w	r3, [r2], #1
 8007daa:	edde 7a00 	vldr	s15, [lr]
 8007dae:	091b      	lsrs	r3, r3, #4
 8007db0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007db4:	edd3 6a00 	vldr	s13, [r3]
 8007db8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007dbc:	eca8 7a01 	vstmia	r8!, {s14}
 8007dc0:	45c2      	cmp	sl, r8
 8007dc2:	f63f af5a 	bhi.w	8007c7a <forward_lite_dense_if32of32wf32_lut4+0x92>
 8007dc6:	9b05      	ldr	r3, [sp, #20]
 8007dc8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007dca:	189d      	adds	r5, r3, r2
 8007dcc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007dce:	b9eb      	cbnz	r3, 8007e0c <forward_lite_dense_if32of32wf32_lut4+0x224>
 8007dd0:	9b08      	ldr	r3, [sp, #32]
 8007dd2:	42ab      	cmp	r3, r5
 8007dd4:	d92e      	bls.n	8007e34 <forward_lite_dense_if32of32wf32_lut4+0x24c>
 8007dd6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007dd8:	4499      	add	r9, r3
 8007dda:	441c      	add	r4, r3
 8007ddc:	4419      	add	r1, r3
 8007dde:	9b05      	ldr	r3, [sp, #20]
 8007de0:	459a      	cmp	sl, r3
 8007de2:	d92c      	bls.n	8007e3e <forward_lite_dense_if32of32wf32_lut4+0x256>
 8007de4:	9505      	str	r5, [sp, #20]
 8007de6:	462b      	mov	r3, r5
 8007de8:	e739      	b.n	8007c5e <forward_lite_dense_if32of32wf32_lut4+0x76>
 8007dea:	eca8 7a01 	vstmia	r8!, {s14}
 8007dee:	45c2      	cmp	sl, r8
 8007df0:	d9e9      	bls.n	8007dc6 <forward_lite_dense_if32of32wf32_lut4+0x1de>
 8007df2:	9b02      	ldr	r3, [sp, #8]
 8007df4:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8007e6c <forward_lite_dense_if32of32wf32_lut4+0x284>
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	f47f af44 	bne.w	8007c86 <forward_lite_dense_if32of32wf32_lut4+0x9e>
 8007dfe:	f8dd e018 	ldr.w	lr, [sp, #24]
 8007e02:	45ce      	cmp	lr, r9
 8007e04:	4694      	mov	ip, r2
 8007e06:	d39d      	bcc.n	8007d44 <forward_lite_dense_if32of32wf32_lut4+0x15c>
 8007e08:	4662      	mov	r2, ip
 8007e0a:	e7ca      	b.n	8007da2 <forward_lite_dense_if32of32wf32_lut4+0x1ba>
 8007e0c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d0de      	beq.n	8007dd0 <forward_lite_dense_if32of32wf32_lut4+0x1e8>
 8007e12:	9b07      	ldr	r3, [sp, #28]
 8007e14:	f8dd c05c 	ldr.w	ip, [sp, #92]	@ 0x5c
 8007e18:	1aea      	subs	r2, r5, r3
 8007e1a:	edd2 7a00 	vldr	s15, [r2]
 8007e1e:	ecbc 7a01 	vldmia	ip!, {s14}
 8007e22:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007e26:	ece2 7a01 	vstmia	r2!, {s15}
 8007e2a:	42aa      	cmp	r2, r5
 8007e2c:	d1f5      	bne.n	8007e1a <forward_lite_dense_if32of32wf32_lut4+0x232>
 8007e2e:	9b08      	ldr	r3, [sp, #32]
 8007e30:	42ab      	cmp	r3, r5
 8007e32:	d8d0      	bhi.n	8007dd6 <forward_lite_dense_if32of32wf32_lut4+0x1ee>
 8007e34:	b00d      	add	sp, #52	@ 0x34
 8007e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e3a:	461d      	mov	r5, r3
 8007e3c:	e7c6      	b.n	8007dcc <forward_lite_dense_if32of32wf32_lut4+0x1e4>
 8007e3e:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8007e42:	9919      	ldr	r1, [sp, #100]	@ 0x64
 8007e44:	9e17      	ldr	r6, [sp, #92]	@ 0x5c
 8007e46:	eba5 0c0c 	sub.w	ip, r5, ip
 8007e4a:	b169      	cbz	r1, 8007e68 <forward_lite_dense_if32of32wf32_lut4+0x280>
 8007e4c:	4663      	mov	r3, ip
 8007e4e:	4632      	mov	r2, r6
 8007e50:	ed93 7a00 	vldr	s14, [r3]
 8007e54:	ecf2 7a01 	vldmia	r2!, {s15}
 8007e58:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007e5c:	ece3 7a01 	vstmia	r3!, {s15}
 8007e60:	429d      	cmp	r5, r3
 8007e62:	d1f5      	bne.n	8007e50 <forward_lite_dense_if32of32wf32_lut4+0x268>
 8007e64:	2900      	cmp	r1, #0
 8007e66:	d1f1      	bne.n	8007e4c <forward_lite_dense_if32of32wf32_lut4+0x264>
 8007e68:	e7fe      	b.n	8007e68 <forward_lite_dense_if32of32wf32_lut4+0x280>
 8007e6a:	bf00      	nop
 8007e6c:	00000000 	.word	0x00000000

08007e70 <forward_lite_dense_if32of32wf32_lut8>:
 8007e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e74:	b087      	sub	sp, #28
 8007e76:	4605      	mov	r5, r0
 8007e78:	9205      	str	r2, [sp, #20]
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	e9dd 2313 	ldrd	r2, r3, [sp, #76]	@ 0x4c
 8007e80:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8007e82:	fb02 f303 	mul.w	r3, r2, r3
 8007e86:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8007e8a:	e9dd b611 	ldrd	fp, r6, [sp, #68]	@ 0x44
 8007e8e:	460f      	mov	r7, r1
 8007e90:	9303      	str	r3, [sp, #12]
 8007e92:	b12c      	cbz	r4, 8007ea0 <forward_lite_dense_if32of32wf32_lut8+0x30>
 8007e94:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007e98:	4621      	mov	r1, r4
 8007e9a:	f000 f957 	bl	800814c <st_int8_copy>
 8007e9e:	4620      	mov	r0, r4
 8007ea0:	9b03      	ldr	r3, [sp, #12]
 8007ea2:	429d      	cmp	r5, r3
 8007ea4:	f080 8115 	bcs.w	80080d2 <forward_lite_dense_if32of32wf32_lut8+0x262>
 8007ea8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007eaa:	9500      	str	r5, [sp, #0]
 8007eac:	ea4f 09d6 	mov.w	r9, r6, lsr #3
 8007eb0:	0099      	lsls	r1, r3, #2
 8007eb2:	9b00      	ldr	r3, [sp, #0]
 8007eb4:	9104      	str	r1, [sp, #16]
 8007eb6:	00b2      	lsls	r2, r6, #2
 8007eb8:	eb07 1849 	add.w	r8, r7, r9, lsl #5
 8007ebc:	ea4f 0ac9 	mov.w	sl, r9, lsl #3
 8007ec0:	464d      	mov	r5, r9
 8007ec2:	4689      	mov	r9, r1
 8007ec4:	4611      	mov	r1, r2
 8007ec6:	465a      	mov	r2, fp
 8007ec8:	eb03 0b09 	add.w	fp, r3, r9
 8007ecc:	3720      	adds	r7, #32
 8007ece:	459b      	cmp	fp, r3
 8007ed0:	f006 0407 	and.w	r4, r6, #7
 8007ed4:	f1a7 0e20 	sub.w	lr, r7, #32
 8007ed8:	f240 80d6 	bls.w	8008088 <forward_lite_dense_if32of32wf32_lut8+0x218>
 8007edc:	e9cd 9e01 	strd	r9, lr, [sp, #4]
 8007ee0:	469c      	mov	ip, r3
 8007ee2:	9b05      	ldr	r3, [sp, #20]
 8007ee4:	ed9f 7a87 	vldr	s14, [pc, #540]	@ 8008104 <forward_lite_dense_if32of32wf32_lut8+0x294>
 8007ee8:	2d00      	cmp	r5, #0
 8007eea:	f000 80db 	beq.w	80080a4 <forward_lite_dense_if32of32wf32_lut8+0x234>
 8007eee:	eb03 090a 	add.w	r9, r3, sl
 8007ef2:	463e      	mov	r6, r7
 8007ef4:	f893 e001 	ldrb.w	lr, [r3, #1]
 8007ef8:	ed16 3a07 	vldr	s6, [r6, #-28]	@ 0xffffffe4
 8007efc:	ed56 3a08 	vldr	s7, [r6, #-32]	@ 0xffffffe0
 8007f00:	ed16 4a06 	vldr	s8, [r6, #-24]	@ 0xffffffe8
 8007f04:	ed56 4a05 	vldr	s9, [r6, #-20]	@ 0xffffffec
 8007f08:	ed16 5a04 	vldr	s10, [r6, #-16]
 8007f0c:	ed56 5a03 	vldr	s11, [r6, #-12]
 8007f10:	ed16 6a02 	vldr	s12, [r6, #-8]
 8007f14:	ed56 6a01 	vldr	s13, [r6, #-4]
 8007f18:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8007f1c:	edde 7a00 	vldr	s15, [lr]
 8007f20:	f893 e000 	ldrb.w	lr, [r3]
 8007f24:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8007f28:	ee67 7a83 	vmul.f32	s15, s15, s6
 8007f2c:	ed9e 3a00 	vldr	s6, [lr]
 8007f30:	f893 e002 	ldrb.w	lr, [r3, #2]
 8007f34:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007f38:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8007f3c:	3308      	adds	r3, #8
 8007f3e:	edde 3a00 	vldr	s7, [lr]
 8007f42:	f813 ec05 	ldrb.w	lr, [r3, #-5]
 8007f46:	eee3 7a84 	vfma.f32	s15, s7, s8
 8007f4a:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8007f4e:	3620      	adds	r6, #32
 8007f50:	ed9e 4a00 	vldr	s8, [lr]
 8007f54:	f813 ec04 	ldrb.w	lr, [r3, #-4]
 8007f58:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007f5c:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8007f60:	edde 4a00 	vldr	s9, [lr]
 8007f64:	f813 ec03 	ldrb.w	lr, [r3, #-3]
 8007f68:	eee4 7a85 	vfma.f32	s15, s9, s10
 8007f6c:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8007f70:	ed9e 5a00 	vldr	s10, [lr]
 8007f74:	f813 ec02 	ldrb.w	lr, [r3, #-2]
 8007f78:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007f7c:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8007f80:	edde 5a00 	vldr	s11, [lr]
 8007f84:	f813 ec01 	ldrb.w	lr, [r3, #-1]
 8007f88:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007f8c:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8007f90:	454b      	cmp	r3, r9
 8007f92:	ed9e 6a00 	vldr	s12, [lr]
 8007f96:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007f9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007f9e:	d1a9      	bne.n	8007ef4 <forward_lite_dense_if32of32wf32_lut8+0x84>
 8007fa0:	4643      	mov	r3, r8
 8007fa2:	2c00      	cmp	r4, #0
 8007fa4:	d07c      	beq.n	80080a0 <forward_lite_dense_if32of32wf32_lut8+0x230>
 8007fa6:	f899 6000 	ldrb.w	r6, [r9]
 8007faa:	edd3 7a00 	vldr	s15, [r3]
 8007fae:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8007fb2:	edd6 6a00 	vldr	s13, [r6]
 8007fb6:	2c01      	cmp	r4, #1
 8007fb8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007fbc:	d045      	beq.n	800804a <forward_lite_dense_if32of32wf32_lut8+0x1da>
 8007fbe:	f899 6001 	ldrb.w	r6, [r9, #1]
 8007fc2:	edd3 7a01 	vldr	s15, [r3, #4]
 8007fc6:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8007fca:	edd6 6a00 	vldr	s13, [r6]
 8007fce:	2c02      	cmp	r4, #2
 8007fd0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007fd4:	d039      	beq.n	800804a <forward_lite_dense_if32of32wf32_lut8+0x1da>
 8007fd6:	f899 6002 	ldrb.w	r6, [r9, #2]
 8007fda:	edd3 7a02 	vldr	s15, [r3, #8]
 8007fde:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8007fe2:	edd6 6a00 	vldr	s13, [r6]
 8007fe6:	2c03      	cmp	r4, #3
 8007fe8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007fec:	d02d      	beq.n	800804a <forward_lite_dense_if32of32wf32_lut8+0x1da>
 8007fee:	f899 6003 	ldrb.w	r6, [r9, #3]
 8007ff2:	edd3 6a03 	vldr	s13, [r3, #12]
 8007ff6:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8007ffa:	edd6 7a00 	vldr	s15, [r6]
 8007ffe:	2c04      	cmp	r4, #4
 8008000:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008004:	d021      	beq.n	800804a <forward_lite_dense_if32of32wf32_lut8+0x1da>
 8008006:	f899 6004 	ldrb.w	r6, [r9, #4]
 800800a:	edd3 6a04 	vldr	s13, [r3, #16]
 800800e:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8008012:	edd6 7a00 	vldr	s15, [r6]
 8008016:	2c05      	cmp	r4, #5
 8008018:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800801c:	d015      	beq.n	800804a <forward_lite_dense_if32of32wf32_lut8+0x1da>
 800801e:	f899 6005 	ldrb.w	r6, [r9, #5]
 8008022:	edd3 6a05 	vldr	s13, [r3, #20]
 8008026:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 800802a:	edd6 7a00 	vldr	s15, [r6]
 800802e:	2c06      	cmp	r4, #6
 8008030:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008034:	d009      	beq.n	800804a <forward_lite_dense_if32of32wf32_lut8+0x1da>
 8008036:	edd3 7a06 	vldr	s15, [r3, #24]
 800803a:	f899 3006 	ldrb.w	r3, [r9, #6]
 800803e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8008042:	edd3 6a00 	vldr	s13, [r3]
 8008046:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800804a:	eb09 0304 	add.w	r3, r9, r4
 800804e:	ecac 7a01 	vstmia	ip!, {s14}
 8008052:	45e3      	cmp	fp, ip
 8008054:	f63f af46 	bhi.w	8007ee4 <forward_lite_dense_if32of32wf32_lut8+0x74>
 8008058:	e9dd 3900 	ldrd	r3, r9, [sp]
 800805c:	9e04      	ldr	r6, [sp, #16]
 800805e:	eb03 0e06 	add.w	lr, r3, r6
 8008062:	bb1a      	cbnz	r2, 80080ac <forward_lite_dense_if32of32wf32_lut8+0x23c>
 8008064:	9b03      	ldr	r3, [sp, #12]
 8008066:	4573      	cmp	r3, lr
 8008068:	d933      	bls.n	80080d2 <forward_lite_dense_if32of32wf32_lut8+0x262>
 800806a:	9b00      	ldr	r3, [sp, #0]
 800806c:	459b      	cmp	fp, r3
 800806e:	4488      	add	r8, r1
 8008070:	440f      	add	r7, r1
 8008072:	d942      	bls.n	80080fa <forward_lite_dense_if32of32wf32_lut8+0x28a>
 8008074:	4673      	mov	r3, lr
 8008076:	eb03 0b09 	add.w	fp, r3, r9
 800807a:	459b      	cmp	fp, r3
 800807c:	f8cd e000 	str.w	lr, [sp]
 8008080:	f1a7 0e20 	sub.w	lr, r7, #32
 8008084:	f63f af2a 	bhi.w	8007edc <forward_lite_dense_if32of32wf32_lut8+0x6c>
 8008088:	b97a      	cbnz	r2, 80080aa <forward_lite_dense_if32of32wf32_lut8+0x23a>
 800808a:	461d      	mov	r5, r3
 800808c:	9b03      	ldr	r3, [sp, #12]
 800808e:	42ab      	cmp	r3, r5
 8008090:	4649      	mov	r1, r9
 8008092:	4693      	mov	fp, r2
 8008094:	d91d      	bls.n	80080d2 <forward_lite_dense_if32of32wf32_lut8+0x262>
 8008096:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008098:	4249      	negs	r1, r1
 800809a:	465b      	mov	r3, fp
 800809c:	b9e3      	cbnz	r3, 80080d8 <forward_lite_dense_if32of32wf32_lut8+0x268>
 800809e:	e7fe      	b.n	800809e <forward_lite_dense_if32of32wf32_lut8+0x22e>
 80080a0:	464b      	mov	r3, r9
 80080a2:	e7d4      	b.n	800804e <forward_lite_dense_if32of32wf32_lut8+0x1de>
 80080a4:	4699      	mov	r9, r3
 80080a6:	9b02      	ldr	r3, [sp, #8]
 80080a8:	e77b      	b.n	8007fa2 <forward_lite_dense_if32of32wf32_lut8+0x132>
 80080aa:	469e      	mov	lr, r3
 80080ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d0d8      	beq.n	8008064 <forward_lite_dense_if32of32wf32_lut8+0x1f4>
 80080b2:	ebae 0309 	sub.w	r3, lr, r9
 80080b6:	4616      	mov	r6, r2
 80080b8:	edd3 7a00 	vldr	s15, [r3]
 80080bc:	ecb6 7a01 	vldmia	r6!, {s14}
 80080c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80080c4:	ece3 7a01 	vstmia	r3!, {s15}
 80080c8:	4573      	cmp	r3, lr
 80080ca:	d1f5      	bne.n	80080b8 <forward_lite_dense_if32of32wf32_lut8+0x248>
 80080cc:	9b03      	ldr	r3, [sp, #12]
 80080ce:	4573      	cmp	r3, lr
 80080d0:	d8cb      	bhi.n	800806a <forward_lite_dense_if32of32wf32_lut8+0x1fa>
 80080d2:	b007      	add	sp, #28
 80080d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080d8:	2a00      	cmp	r2, #0
 80080da:	d0df      	beq.n	800809c <forward_lite_dense_if32of32wf32_lut8+0x22c>
 80080dc:	469b      	mov	fp, r3
 80080de:	4429      	add	r1, r5
 80080e0:	460b      	mov	r3, r1
 80080e2:	465a      	mov	r2, fp
 80080e4:	ed93 7a00 	vldr	s14, [r3]
 80080e8:	ecf2 7a01 	vldmia	r2!, {s15}
 80080ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80080f0:	ece3 7a01 	vstmia	r3!, {s15}
 80080f4:	42ab      	cmp	r3, r5
 80080f6:	d1f5      	bne.n	80080e4 <forward_lite_dense_if32of32wf32_lut8+0x274>
 80080f8:	e7f2      	b.n	80080e0 <forward_lite_dense_if32of32wf32_lut8+0x270>
 80080fa:	4649      	mov	r1, r9
 80080fc:	4693      	mov	fp, r2
 80080fe:	4675      	mov	r5, lr
 8008100:	e7c9      	b.n	8008096 <forward_lite_dense_if32of32wf32_lut8+0x226>
 8008102:	bf00      	nop
 8008104:	00000000 	.word	0x00000000

08008108 <forward_lite_nl_relu_if32of32>:
 8008108:	f102 4380 	add.w	r3, r2, #1073741824	@ 0x40000000
 800810c:	3b01      	subs	r3, #1
 800810e:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 8008112:	4291      	cmp	r1, r2
 8008114:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 8008118:	d814      	bhi.n	8008144 <forward_lite_nl_relu_if32of32+0x3c>
 800811a:	f10c 0104 	add.w	r1, ip, #4
 800811e:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8008148 <forward_lite_nl_relu_if32of32+0x40>
 8008122:	1d13      	adds	r3, r2, #4
 8008124:	4408      	add	r0, r1
 8008126:	eba2 020c 	sub.w	r2, r2, ip
 800812a:	ed73 7a01 	vldmdb	r3!, {s15}
 800812e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008136:	bfb8      	it	lt
 8008138:	eef0 7a47 	vmovlt.f32	s15, s14
 800813c:	4293      	cmp	r3, r2
 800813e:	ed60 7a01 	vstmdb	r0!, {s15}
 8008142:	d1f2      	bne.n	800812a <forward_lite_nl_relu_if32of32+0x22>
 8008144:	4770      	bx	lr
 8008146:	bf00      	nop
 8008148:	00000000 	.word	0x00000000

0800814c <st_int8_copy>:
 800814c:	4288      	cmp	r0, r1
 800814e:	d021      	beq.n	8008194 <st_int8_copy+0x48>
 8008150:	b302      	cbz	r2, 8008194 <st_int8_copy+0x48>
 8008152:	4288      	cmp	r0, r1
 8008154:	d313      	bcc.n	800817e <st_int8_copy+0x32>
 8008156:	2a03      	cmp	r2, #3
 8008158:	d81d      	bhi.n	8008196 <st_int8_copy+0x4a>
 800815a:	3a01      	subs	r2, #1
 800815c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008160:	f801 3b01 	strb.w	r3, [r1], #1
 8008164:	b1b2      	cbz	r2, 8008194 <st_int8_copy+0x48>
 8008166:	f810 3b01 	ldrb.w	r3, [r0], #1
 800816a:	f801 3b01 	strb.w	r3, [r1], #1
 800816e:	2a01      	cmp	r2, #1
 8008170:	f000 8088 	beq.w	8008284 <st_int8_copy+0x138>
 8008174:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008178:	f801 3b01 	strb.w	r3, [r1], #1
 800817c:	4770      	bx	lr
 800817e:	1883      	adds	r3, r0, r2
 8008180:	428b      	cmp	r3, r1
 8008182:	d9e8      	bls.n	8008156 <st_int8_copy+0xa>
 8008184:	440a      	add	r2, r1
 8008186:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 800818a:	f802 1d01 	strb.w	r1, [r2, #-1]!
 800818e:	4298      	cmp	r0, r3
 8008190:	d1f9      	bne.n	8008186 <st_int8_copy+0x3a>
 8008192:	4770      	bx	lr
 8008194:	4770      	bx	lr
 8008196:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800819a:	f001 0e03 	and.w	lr, r1, #3
 800819e:	f1ce 0304 	rsb	r3, lr, #4
 80081a2:	eba2 0c03 	sub.w	ip, r2, r3
 80081a6:	f000 0803 	and.w	r8, r0, #3
 80081aa:	f1ce 0203 	rsb	r2, lr, #3
 80081ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80081b2:	f801 3b01 	strb.w	r3, [r1], #1
 80081b6:	b182      	cbz	r2, 80081da <st_int8_copy+0x8e>
 80081b8:	f810 3b01 	ldrb.w	r3, [r0], #1
 80081bc:	f801 3b01 	strb.w	r3, [r1], #1
 80081c0:	2a01      	cmp	r2, #1
 80081c2:	d00a      	beq.n	80081da <st_int8_copy+0x8e>
 80081c4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80081c8:	f801 3b01 	strb.w	r3, [r1], #1
 80081cc:	f1be 0f01 	cmp.w	lr, #1
 80081d0:	d003      	beq.n	80081da <st_int8_copy+0x8e>
 80081d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80081d6:	f801 3b01 	strb.w	r3, [r1], #1
 80081da:	45c6      	cmp	lr, r8
 80081dc:	d02a      	beq.n	8008234 <st_int8_copy+0xe8>
 80081de:	ea5f 121c 	movs.w	r2, ip, lsr #4
 80081e2:	d00a      	beq.n	80081fa <st_int8_copy+0xae>
 80081e4:	f850 3b04 	ldr.w	r3, [r0], #4
 80081e8:	f850 4b04 	ldr.w	r4, [r0], #4
 80081ec:	f850 5b04 	ldr.w	r5, [r0], #4
 80081f0:	f850 6b04 	ldr.w	r6, [r0], #4
 80081f4:	c178      	stmia	r1!, {r3, r4, r5, r6}
 80081f6:	3a01      	subs	r2, #1
 80081f8:	d1f4      	bne.n	80081e4 <st_int8_copy+0x98>
 80081fa:	f01c 0f08 	tst.w	ip, #8
 80081fe:	d004      	beq.n	800820a <st_int8_copy+0xbe>
 8008200:	f850 3b04 	ldr.w	r3, [r0], #4
 8008204:	f850 4b04 	ldr.w	r4, [r0], #4
 8008208:	c118      	stmia	r1!, {r3, r4}
 800820a:	f01c 0f04 	tst.w	ip, #4
 800820e:	d003      	beq.n	8008218 <st_int8_copy+0xcc>
 8008210:	f850 3b04 	ldr.w	r3, [r0], #4
 8008214:	f841 3b04 	str.w	r3, [r1], #4
 8008218:	f01c 0f02 	tst.w	ip, #2
 800821c:	d003      	beq.n	8008226 <st_int8_copy+0xda>
 800821e:	f830 3b02 	ldrh.w	r3, [r0], #2
 8008222:	f821 3b02 	strh.w	r3, [r1], #2
 8008226:	f01c 0f01 	tst.w	ip, #1
 800822a:	d001      	beq.n	8008230 <st_int8_copy+0xe4>
 800822c:	7803      	ldrb	r3, [r0, #0]
 800822e:	700b      	strb	r3, [r1, #0]
 8008230:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008234:	ea5f 199c 	movs.w	r9, ip, lsr #6
 8008238:	d00e      	beq.n	8008258 <st_int8_copy+0x10c>
 800823a:	4688      	mov	r8, r1
 800823c:	4686      	mov	lr, r0
 800823e:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8008242:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8008246:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800824a:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800824e:	f1b9 0901 	subs.w	r9, r9, #1
 8008252:	4641      	mov	r1, r8
 8008254:	4670      	mov	r0, lr
 8008256:	d1f0      	bne.n	800823a <st_int8_copy+0xee>
 8008258:	f01c 0f20 	tst.w	ip, #32
 800825c:	d007      	beq.n	800826e <st_int8_copy+0x122>
 800825e:	4688      	mov	r8, r1
 8008260:	4686      	mov	lr, r0
 8008262:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8008266:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800826a:	4641      	mov	r1, r8
 800826c:	4670      	mov	r0, lr
 800826e:	f01c 0f10 	tst.w	ip, #16
 8008272:	d001      	beq.n	8008278 <st_int8_copy+0x12c>
 8008274:	c878      	ldmia	r0!, {r3, r4, r5, r6}
 8008276:	c178      	stmia	r1!, {r3, r4, r5, r6}
 8008278:	f01c 0f08 	tst.w	ip, #8
 800827c:	d0c5      	beq.n	800820a <st_int8_copy+0xbe>
 800827e:	c818      	ldmia	r0!, {r3, r4}
 8008280:	c118      	stmia	r1!, {r3, r4}
 8008282:	e7c2      	b.n	800820a <st_int8_copy+0xbe>
 8008284:	4770      	bx	lr
 8008286:	bf00      	nop

08008288 <ai_array_to_buffer_fmt>:
 8008288:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800828c:	2b02      	cmp	r3, #2
 800828e:	d055      	beq.n	800833c <ai_array_to_buffer_fmt+0xb4>
 8008290:	4a2d      	ldr	r2, [pc, #180]	@ (8008348 <ai_array_to_buffer_fmt+0xc0>)
 8008292:	f020 437e 	bic.w	r3, r0, #4261412864	@ 0xfe000000
 8008296:	4293      	cmp	r3, r2
 8008298:	d010      	beq.n	80082bc <ai_array_to_buffer_fmt+0x34>
 800829a:	dc21      	bgt.n	80082e0 <ai_array_to_buffer_fmt+0x58>
 800829c:	4a2b      	ldr	r2, [pc, #172]	@ (800834c <ai_array_to_buffer_fmt+0xc4>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d00c      	beq.n	80082bc <ai_array_to_buffer_fmt+0x34>
 80082a2:	dd0f      	ble.n	80082c4 <ai_array_to_buffer_fmt+0x3c>
 80082a4:	4a2a      	ldr	r2, [pc, #168]	@ (8008350 <ai_array_to_buffer_fmt+0xc8>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d008      	beq.n	80082bc <ai_array_to_buffer_fmt+0x34>
 80082aa:	f502 32fa 	add.w	r2, r2, #128000	@ 0x1f400
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d004      	beq.n	80082bc <ai_array_to_buffer_fmt+0x34>
 80082b2:	4a28      	ldr	r2, [pc, #160]	@ (8008354 <ai_array_to_buffer_fmt+0xcc>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	bf0c      	ite	eq
 80082b8:	4613      	moveq	r3, r2
 80082ba:	2340      	movne	r3, #64	@ 0x40
 80082bc:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 80082c0:	4318      	orrs	r0, r3
 80082c2:	4770      	bx	lr
 80082c4:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d0f7      	beq.n	80082bc <ai_array_to_buffer_fmt+0x34>
 80082cc:	dd2c      	ble.n	8008328 <ai_array_to_buffer_fmt+0xa0>
 80082ce:	4a22      	ldr	r2, [pc, #136]	@ (8008358 <ai_array_to_buffer_fmt+0xd0>)
 80082d0:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 80082d4:	4293      	cmp	r3, r2
 80082d6:	bf0c      	ite	eq
 80082d8:	4613      	moveq	r3, r2
 80082da:	2340      	movne	r3, #64	@ 0x40
 80082dc:	4318      	orrs	r0, r3
 80082de:	4770      	bx	lr
 80082e0:	4a1e      	ldr	r2, [pc, #120]	@ (800835c <ai_array_to_buffer_fmt+0xd4>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d0ea      	beq.n	80082bc <ai_array_to_buffer_fmt+0x34>
 80082e6:	dd10      	ble.n	800830a <ai_array_to_buffer_fmt+0x82>
 80082e8:	4a1d      	ldr	r2, [pc, #116]	@ (8008360 <ai_array_to_buffer_fmt+0xd8>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d0e6      	beq.n	80082bc <ai_array_to_buffer_fmt+0x34>
 80082ee:	f202 72f1 	addw	r2, r2, #2033	@ 0x7f1
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d0e2      	beq.n	80082bc <ai_array_to_buffer_fmt+0x34>
 80082f6:	f5a2 6200 	sub.w	r2, r2, #2048	@ 0x800
 80082fa:	4293      	cmp	r3, r2
 80082fc:	bf0c      	ite	eq
 80082fe:	4613      	moveq	r3, r2
 8008300:	2340      	movne	r3, #64	@ 0x40
 8008302:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8008306:	4318      	orrs	r0, r3
 8008308:	4770      	bx	lr
 800830a:	f2a2 3287 	subw	r2, r2, #903	@ 0x387
 800830e:	4293      	cmp	r3, r2
 8008310:	d0d4      	beq.n	80082bc <ai_array_to_buffer_fmt+0x34>
 8008312:	f502 7260 	add.w	r2, r2, #896	@ 0x380
 8008316:	4293      	cmp	r3, r2
 8008318:	d0d0      	beq.n	80082bc <ai_array_to_buffer_fmt+0x34>
 800831a:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 800831e:	4293      	cmp	r3, r2
 8008320:	bf0c      	ite	eq
 8008322:	4613      	moveq	r3, r2
 8008324:	2340      	movne	r3, #64	@ 0x40
 8008326:	e7c9      	b.n	80082bc <ai_array_to_buffer_fmt+0x34>
 8008328:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 800832c:	4293      	cmp	r3, r2
 800832e:	d0c5      	beq.n	80082bc <ai_array_to_buffer_fmt+0x34>
 8008330:	3280      	adds	r2, #128	@ 0x80
 8008332:	4293      	cmp	r3, r2
 8008334:	bf0c      	ite	eq
 8008336:	4613      	moveq	r3, r2
 8008338:	2340      	movne	r3, #64	@ 0x40
 800833a:	e7bf      	b.n	80082bc <ai_array_to_buffer_fmt+0x34>
 800833c:	4b09      	ldr	r3, [pc, #36]	@ (8008364 <ai_array_to_buffer_fmt+0xdc>)
 800833e:	4003      	ands	r3, r0
 8008340:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008344:	e7ba      	b.n	80082bc <ai_array_to_buffer_fmt+0x34>
 8008346:	bf00      	nop
 8008348:	00821040 	.word	0x00821040
 800834c:	00040840 	.word	0x00040840
 8008350:	00041040 	.word	0x00041040
 8008354:	0004084f 	.word	0x0004084f
 8008358:	00040447 	.word	0x00040447
 800835c:	00840447 	.word	0x00840447
 8008360:	0084084f 	.word	0x0084084f
 8008364:	00803fff 	.word	0x00803fff

08008368 <ai_array_get_byte_size>:
 8008368:	b1d1      	cbz	r1, 80083a0 <ai_array_get_byte_size+0x38>
 800836a:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800836e:	fb03 f101 	mul.w	r1, r3, r1
 8008372:	f3c0 4c43 	ubfx	ip, r0, #17, #4
 8008376:	f46f 7288 	mvn.w	r2, #272	@ 0x110
 800837a:	fa42 f20c 	asr.w	r2, r2, ip
 800837e:	3107      	adds	r1, #7
 8008380:	f3c0 5041 	ubfx	r0, r0, #21, #2
 8008384:	07d2      	lsls	r2, r2, #31
 8008386:	f021 0107 	bic.w	r1, r1, #7
 800838a:	fa21 f100 	lsr.w	r1, r1, r0
 800838e:	bf5a      	itte	pl
 8008390:	fa43 f000 	asrpl.w	r0, r3, r0
 8008394:	4083      	lslpl	r3, r0
 8008396:	2300      	movmi	r3, #0
 8008398:	3107      	adds	r1, #7
 800839a:	4419      	add	r1, r3
 800839c:	08c8      	lsrs	r0, r1, #3
 800839e:	4770      	bx	lr
 80083a0:	4608      	mov	r0, r1
 80083a2:	4770      	bx	lr

080083a4 <ai_array_get_data_byte_size>:
 80083a4:	b169      	cbz	r1, 80083c2 <ai_array_get_data_byte_size+0x1e>
 80083a6:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80083aa:	fb01 f303 	mul.w	r3, r1, r3
 80083ae:	3307      	adds	r3, #7
 80083b0:	f023 0307 	bic.w	r3, r3, #7
 80083b4:	f3c0 5041 	ubfx	r0, r0, #21, #2
 80083b8:	fa23 f000 	lsr.w	r0, r3, r0
 80083bc:	3007      	adds	r0, #7
 80083be:	08c0      	lsrs	r0, r0, #3
 80083c0:	4770      	bx	lr
 80083c2:	4608      	mov	r0, r1
 80083c4:	4770      	bx	lr
 80083c6:	bf00      	nop

080083c8 <ai_version_get>:
 80083c8:	0212      	lsls	r2, r2, #8
 80083ca:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80083ce:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 80083d2:	4770      	bx	lr

080083d4 <get_tensor_byte_size>:
 80083d4:	b410      	push	{r4}
 80083d6:	6983      	ldr	r3, [r0, #24]
 80083d8:	68c4      	ldr	r4, [r0, #12]
 80083da:	6941      	ldr	r1, [r0, #20]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	68e0      	ldr	r0, [r4, #12]
 80083e0:	4a07      	ldr	r2, [pc, #28]	@ (8008400 <get_tensor_byte_size+0x2c>)
 80083e2:	68c9      	ldr	r1, [r1, #12]
 80083e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083e8:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 80083ec:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80083f0:	fb01 f000 	mul.w	r0, r1, r0
 80083f4:	4293      	cmp	r3, r2
 80083f6:	bf04      	itt	eq
 80083f8:	3007      	addeq	r0, #7
 80083fa:	08c0      	lsreq	r0, r0, #3
 80083fc:	4770      	bx	lr
 80083fe:	bf00      	nop
 8008400:	000400c0 	.word	0x000400c0

08008404 <malloc>:
 8008404:	4b02      	ldr	r3, [pc, #8]	@ (8008410 <malloc+0xc>)
 8008406:	4601      	mov	r1, r0
 8008408:	6818      	ldr	r0, [r3, #0]
 800840a:	f000 b825 	b.w	8008458 <_malloc_r>
 800840e:	bf00      	nop
 8008410:	20000c78 	.word	0x20000c78

08008414 <sbrk_aligned>:
 8008414:	b570      	push	{r4, r5, r6, lr}
 8008416:	4e0f      	ldr	r6, [pc, #60]	@ (8008454 <sbrk_aligned+0x40>)
 8008418:	460c      	mov	r4, r1
 800841a:	6831      	ldr	r1, [r6, #0]
 800841c:	4605      	mov	r5, r0
 800841e:	b911      	cbnz	r1, 8008426 <sbrk_aligned+0x12>
 8008420:	f000 ff46 	bl	80092b0 <_sbrk_r>
 8008424:	6030      	str	r0, [r6, #0]
 8008426:	4621      	mov	r1, r4
 8008428:	4628      	mov	r0, r5
 800842a:	f000 ff41 	bl	80092b0 <_sbrk_r>
 800842e:	1c43      	adds	r3, r0, #1
 8008430:	d103      	bne.n	800843a <sbrk_aligned+0x26>
 8008432:	f04f 34ff 	mov.w	r4, #4294967295
 8008436:	4620      	mov	r0, r4
 8008438:	bd70      	pop	{r4, r5, r6, pc}
 800843a:	1cc4      	adds	r4, r0, #3
 800843c:	f024 0403 	bic.w	r4, r4, #3
 8008440:	42a0      	cmp	r0, r4
 8008442:	d0f8      	beq.n	8008436 <sbrk_aligned+0x22>
 8008444:	1a21      	subs	r1, r4, r0
 8008446:	4628      	mov	r0, r5
 8008448:	f000 ff32 	bl	80092b0 <_sbrk_r>
 800844c:	3001      	adds	r0, #1
 800844e:	d1f2      	bne.n	8008436 <sbrk_aligned+0x22>
 8008450:	e7ef      	b.n	8008432 <sbrk_aligned+0x1e>
 8008452:	bf00      	nop
 8008454:	2000362c 	.word	0x2000362c

08008458 <_malloc_r>:
 8008458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800845c:	1ccd      	adds	r5, r1, #3
 800845e:	f025 0503 	bic.w	r5, r5, #3
 8008462:	3508      	adds	r5, #8
 8008464:	2d0c      	cmp	r5, #12
 8008466:	bf38      	it	cc
 8008468:	250c      	movcc	r5, #12
 800846a:	2d00      	cmp	r5, #0
 800846c:	4606      	mov	r6, r0
 800846e:	db01      	blt.n	8008474 <_malloc_r+0x1c>
 8008470:	42a9      	cmp	r1, r5
 8008472:	d904      	bls.n	800847e <_malloc_r+0x26>
 8008474:	230c      	movs	r3, #12
 8008476:	6033      	str	r3, [r6, #0]
 8008478:	2000      	movs	r0, #0
 800847a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800847e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008554 <_malloc_r+0xfc>
 8008482:	f000 f869 	bl	8008558 <__malloc_lock>
 8008486:	f8d8 3000 	ldr.w	r3, [r8]
 800848a:	461c      	mov	r4, r3
 800848c:	bb44      	cbnz	r4, 80084e0 <_malloc_r+0x88>
 800848e:	4629      	mov	r1, r5
 8008490:	4630      	mov	r0, r6
 8008492:	f7ff ffbf 	bl	8008414 <sbrk_aligned>
 8008496:	1c43      	adds	r3, r0, #1
 8008498:	4604      	mov	r4, r0
 800849a:	d158      	bne.n	800854e <_malloc_r+0xf6>
 800849c:	f8d8 4000 	ldr.w	r4, [r8]
 80084a0:	4627      	mov	r7, r4
 80084a2:	2f00      	cmp	r7, #0
 80084a4:	d143      	bne.n	800852e <_malloc_r+0xd6>
 80084a6:	2c00      	cmp	r4, #0
 80084a8:	d04b      	beq.n	8008542 <_malloc_r+0xea>
 80084aa:	6823      	ldr	r3, [r4, #0]
 80084ac:	4639      	mov	r1, r7
 80084ae:	4630      	mov	r0, r6
 80084b0:	eb04 0903 	add.w	r9, r4, r3
 80084b4:	f000 fefc 	bl	80092b0 <_sbrk_r>
 80084b8:	4581      	cmp	r9, r0
 80084ba:	d142      	bne.n	8008542 <_malloc_r+0xea>
 80084bc:	6821      	ldr	r1, [r4, #0]
 80084be:	1a6d      	subs	r5, r5, r1
 80084c0:	4629      	mov	r1, r5
 80084c2:	4630      	mov	r0, r6
 80084c4:	f7ff ffa6 	bl	8008414 <sbrk_aligned>
 80084c8:	3001      	adds	r0, #1
 80084ca:	d03a      	beq.n	8008542 <_malloc_r+0xea>
 80084cc:	6823      	ldr	r3, [r4, #0]
 80084ce:	442b      	add	r3, r5
 80084d0:	6023      	str	r3, [r4, #0]
 80084d2:	f8d8 3000 	ldr.w	r3, [r8]
 80084d6:	685a      	ldr	r2, [r3, #4]
 80084d8:	bb62      	cbnz	r2, 8008534 <_malloc_r+0xdc>
 80084da:	f8c8 7000 	str.w	r7, [r8]
 80084de:	e00f      	b.n	8008500 <_malloc_r+0xa8>
 80084e0:	6822      	ldr	r2, [r4, #0]
 80084e2:	1b52      	subs	r2, r2, r5
 80084e4:	d420      	bmi.n	8008528 <_malloc_r+0xd0>
 80084e6:	2a0b      	cmp	r2, #11
 80084e8:	d917      	bls.n	800851a <_malloc_r+0xc2>
 80084ea:	1961      	adds	r1, r4, r5
 80084ec:	42a3      	cmp	r3, r4
 80084ee:	6025      	str	r5, [r4, #0]
 80084f0:	bf18      	it	ne
 80084f2:	6059      	strne	r1, [r3, #4]
 80084f4:	6863      	ldr	r3, [r4, #4]
 80084f6:	bf08      	it	eq
 80084f8:	f8c8 1000 	streq.w	r1, [r8]
 80084fc:	5162      	str	r2, [r4, r5]
 80084fe:	604b      	str	r3, [r1, #4]
 8008500:	4630      	mov	r0, r6
 8008502:	f000 f82f 	bl	8008564 <__malloc_unlock>
 8008506:	f104 000b 	add.w	r0, r4, #11
 800850a:	1d23      	adds	r3, r4, #4
 800850c:	f020 0007 	bic.w	r0, r0, #7
 8008510:	1ac2      	subs	r2, r0, r3
 8008512:	bf1c      	itt	ne
 8008514:	1a1b      	subne	r3, r3, r0
 8008516:	50a3      	strne	r3, [r4, r2]
 8008518:	e7af      	b.n	800847a <_malloc_r+0x22>
 800851a:	6862      	ldr	r2, [r4, #4]
 800851c:	42a3      	cmp	r3, r4
 800851e:	bf0c      	ite	eq
 8008520:	f8c8 2000 	streq.w	r2, [r8]
 8008524:	605a      	strne	r2, [r3, #4]
 8008526:	e7eb      	b.n	8008500 <_malloc_r+0xa8>
 8008528:	4623      	mov	r3, r4
 800852a:	6864      	ldr	r4, [r4, #4]
 800852c:	e7ae      	b.n	800848c <_malloc_r+0x34>
 800852e:	463c      	mov	r4, r7
 8008530:	687f      	ldr	r7, [r7, #4]
 8008532:	e7b6      	b.n	80084a2 <_malloc_r+0x4a>
 8008534:	461a      	mov	r2, r3
 8008536:	685b      	ldr	r3, [r3, #4]
 8008538:	42a3      	cmp	r3, r4
 800853a:	d1fb      	bne.n	8008534 <_malloc_r+0xdc>
 800853c:	2300      	movs	r3, #0
 800853e:	6053      	str	r3, [r2, #4]
 8008540:	e7de      	b.n	8008500 <_malloc_r+0xa8>
 8008542:	230c      	movs	r3, #12
 8008544:	6033      	str	r3, [r6, #0]
 8008546:	4630      	mov	r0, r6
 8008548:	f000 f80c 	bl	8008564 <__malloc_unlock>
 800854c:	e794      	b.n	8008478 <_malloc_r+0x20>
 800854e:	6005      	str	r5, [r0, #0]
 8008550:	e7d6      	b.n	8008500 <_malloc_r+0xa8>
 8008552:	bf00      	nop
 8008554:	20003630 	.word	0x20003630

08008558 <__malloc_lock>:
 8008558:	4801      	ldr	r0, [pc, #4]	@ (8008560 <__malloc_lock+0x8>)
 800855a:	f000 bef6 	b.w	800934a <__retarget_lock_acquire_recursive>
 800855e:	bf00      	nop
 8008560:	20003774 	.word	0x20003774

08008564 <__malloc_unlock>:
 8008564:	4801      	ldr	r0, [pc, #4]	@ (800856c <__malloc_unlock+0x8>)
 8008566:	f000 bef1 	b.w	800934c <__retarget_lock_release_recursive>
 800856a:	bf00      	nop
 800856c:	20003774 	.word	0x20003774

08008570 <__cvt>:
 8008570:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008574:	ec57 6b10 	vmov	r6, r7, d0
 8008578:	2f00      	cmp	r7, #0
 800857a:	460c      	mov	r4, r1
 800857c:	4619      	mov	r1, r3
 800857e:	463b      	mov	r3, r7
 8008580:	bfbb      	ittet	lt
 8008582:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008586:	461f      	movlt	r7, r3
 8008588:	2300      	movge	r3, #0
 800858a:	232d      	movlt	r3, #45	@ 0x2d
 800858c:	700b      	strb	r3, [r1, #0]
 800858e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008590:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008594:	4691      	mov	r9, r2
 8008596:	f023 0820 	bic.w	r8, r3, #32
 800859a:	bfbc      	itt	lt
 800859c:	4632      	movlt	r2, r6
 800859e:	4616      	movlt	r6, r2
 80085a0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80085a4:	d005      	beq.n	80085b2 <__cvt+0x42>
 80085a6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80085aa:	d100      	bne.n	80085ae <__cvt+0x3e>
 80085ac:	3401      	adds	r4, #1
 80085ae:	2102      	movs	r1, #2
 80085b0:	e000      	b.n	80085b4 <__cvt+0x44>
 80085b2:	2103      	movs	r1, #3
 80085b4:	ab03      	add	r3, sp, #12
 80085b6:	9301      	str	r3, [sp, #4]
 80085b8:	ab02      	add	r3, sp, #8
 80085ba:	9300      	str	r3, [sp, #0]
 80085bc:	ec47 6b10 	vmov	d0, r6, r7
 80085c0:	4653      	mov	r3, sl
 80085c2:	4622      	mov	r2, r4
 80085c4:	f000 ff5c 	bl	8009480 <_dtoa_r>
 80085c8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80085cc:	4605      	mov	r5, r0
 80085ce:	d119      	bne.n	8008604 <__cvt+0x94>
 80085d0:	f019 0f01 	tst.w	r9, #1
 80085d4:	d00e      	beq.n	80085f4 <__cvt+0x84>
 80085d6:	eb00 0904 	add.w	r9, r0, r4
 80085da:	2200      	movs	r2, #0
 80085dc:	2300      	movs	r3, #0
 80085de:	4630      	mov	r0, r6
 80085e0:	4639      	mov	r1, r7
 80085e2:	f7f8 fa71 	bl	8000ac8 <__aeabi_dcmpeq>
 80085e6:	b108      	cbz	r0, 80085ec <__cvt+0x7c>
 80085e8:	f8cd 900c 	str.w	r9, [sp, #12]
 80085ec:	2230      	movs	r2, #48	@ 0x30
 80085ee:	9b03      	ldr	r3, [sp, #12]
 80085f0:	454b      	cmp	r3, r9
 80085f2:	d31e      	bcc.n	8008632 <__cvt+0xc2>
 80085f4:	9b03      	ldr	r3, [sp, #12]
 80085f6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80085f8:	1b5b      	subs	r3, r3, r5
 80085fa:	4628      	mov	r0, r5
 80085fc:	6013      	str	r3, [r2, #0]
 80085fe:	b004      	add	sp, #16
 8008600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008604:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008608:	eb00 0904 	add.w	r9, r0, r4
 800860c:	d1e5      	bne.n	80085da <__cvt+0x6a>
 800860e:	7803      	ldrb	r3, [r0, #0]
 8008610:	2b30      	cmp	r3, #48	@ 0x30
 8008612:	d10a      	bne.n	800862a <__cvt+0xba>
 8008614:	2200      	movs	r2, #0
 8008616:	2300      	movs	r3, #0
 8008618:	4630      	mov	r0, r6
 800861a:	4639      	mov	r1, r7
 800861c:	f7f8 fa54 	bl	8000ac8 <__aeabi_dcmpeq>
 8008620:	b918      	cbnz	r0, 800862a <__cvt+0xba>
 8008622:	f1c4 0401 	rsb	r4, r4, #1
 8008626:	f8ca 4000 	str.w	r4, [sl]
 800862a:	f8da 3000 	ldr.w	r3, [sl]
 800862e:	4499      	add	r9, r3
 8008630:	e7d3      	b.n	80085da <__cvt+0x6a>
 8008632:	1c59      	adds	r1, r3, #1
 8008634:	9103      	str	r1, [sp, #12]
 8008636:	701a      	strb	r2, [r3, #0]
 8008638:	e7d9      	b.n	80085ee <__cvt+0x7e>

0800863a <__exponent>:
 800863a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800863c:	2900      	cmp	r1, #0
 800863e:	bfba      	itte	lt
 8008640:	4249      	neglt	r1, r1
 8008642:	232d      	movlt	r3, #45	@ 0x2d
 8008644:	232b      	movge	r3, #43	@ 0x2b
 8008646:	2909      	cmp	r1, #9
 8008648:	7002      	strb	r2, [r0, #0]
 800864a:	7043      	strb	r3, [r0, #1]
 800864c:	dd29      	ble.n	80086a2 <__exponent+0x68>
 800864e:	f10d 0307 	add.w	r3, sp, #7
 8008652:	461d      	mov	r5, r3
 8008654:	270a      	movs	r7, #10
 8008656:	461a      	mov	r2, r3
 8008658:	fbb1 f6f7 	udiv	r6, r1, r7
 800865c:	fb07 1416 	mls	r4, r7, r6, r1
 8008660:	3430      	adds	r4, #48	@ 0x30
 8008662:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008666:	460c      	mov	r4, r1
 8008668:	2c63      	cmp	r4, #99	@ 0x63
 800866a:	f103 33ff 	add.w	r3, r3, #4294967295
 800866e:	4631      	mov	r1, r6
 8008670:	dcf1      	bgt.n	8008656 <__exponent+0x1c>
 8008672:	3130      	adds	r1, #48	@ 0x30
 8008674:	1e94      	subs	r4, r2, #2
 8008676:	f803 1c01 	strb.w	r1, [r3, #-1]
 800867a:	1c41      	adds	r1, r0, #1
 800867c:	4623      	mov	r3, r4
 800867e:	42ab      	cmp	r3, r5
 8008680:	d30a      	bcc.n	8008698 <__exponent+0x5e>
 8008682:	f10d 0309 	add.w	r3, sp, #9
 8008686:	1a9b      	subs	r3, r3, r2
 8008688:	42ac      	cmp	r4, r5
 800868a:	bf88      	it	hi
 800868c:	2300      	movhi	r3, #0
 800868e:	3302      	adds	r3, #2
 8008690:	4403      	add	r3, r0
 8008692:	1a18      	subs	r0, r3, r0
 8008694:	b003      	add	sp, #12
 8008696:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008698:	f813 6b01 	ldrb.w	r6, [r3], #1
 800869c:	f801 6f01 	strb.w	r6, [r1, #1]!
 80086a0:	e7ed      	b.n	800867e <__exponent+0x44>
 80086a2:	2330      	movs	r3, #48	@ 0x30
 80086a4:	3130      	adds	r1, #48	@ 0x30
 80086a6:	7083      	strb	r3, [r0, #2]
 80086a8:	70c1      	strb	r1, [r0, #3]
 80086aa:	1d03      	adds	r3, r0, #4
 80086ac:	e7f1      	b.n	8008692 <__exponent+0x58>
	...

080086b0 <_printf_float>:
 80086b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086b4:	b08d      	sub	sp, #52	@ 0x34
 80086b6:	460c      	mov	r4, r1
 80086b8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80086bc:	4616      	mov	r6, r2
 80086be:	461f      	mov	r7, r3
 80086c0:	4605      	mov	r5, r0
 80086c2:	f000 fdbd 	bl	8009240 <_localeconv_r>
 80086c6:	6803      	ldr	r3, [r0, #0]
 80086c8:	9304      	str	r3, [sp, #16]
 80086ca:	4618      	mov	r0, r3
 80086cc:	f7f7 fdd0 	bl	8000270 <strlen>
 80086d0:	2300      	movs	r3, #0
 80086d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80086d4:	f8d8 3000 	ldr.w	r3, [r8]
 80086d8:	9005      	str	r0, [sp, #20]
 80086da:	3307      	adds	r3, #7
 80086dc:	f023 0307 	bic.w	r3, r3, #7
 80086e0:	f103 0208 	add.w	r2, r3, #8
 80086e4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80086e8:	f8d4 b000 	ldr.w	fp, [r4]
 80086ec:	f8c8 2000 	str.w	r2, [r8]
 80086f0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80086f4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80086f8:	9307      	str	r3, [sp, #28]
 80086fa:	f8cd 8018 	str.w	r8, [sp, #24]
 80086fe:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008702:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008706:	4b9c      	ldr	r3, [pc, #624]	@ (8008978 <_printf_float+0x2c8>)
 8008708:	f04f 32ff 	mov.w	r2, #4294967295
 800870c:	f7f8 fa0e 	bl	8000b2c <__aeabi_dcmpun>
 8008710:	bb70      	cbnz	r0, 8008770 <_printf_float+0xc0>
 8008712:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008716:	4b98      	ldr	r3, [pc, #608]	@ (8008978 <_printf_float+0x2c8>)
 8008718:	f04f 32ff 	mov.w	r2, #4294967295
 800871c:	f7f8 f9e8 	bl	8000af0 <__aeabi_dcmple>
 8008720:	bb30      	cbnz	r0, 8008770 <_printf_float+0xc0>
 8008722:	2200      	movs	r2, #0
 8008724:	2300      	movs	r3, #0
 8008726:	4640      	mov	r0, r8
 8008728:	4649      	mov	r1, r9
 800872a:	f7f8 f9d7 	bl	8000adc <__aeabi_dcmplt>
 800872e:	b110      	cbz	r0, 8008736 <_printf_float+0x86>
 8008730:	232d      	movs	r3, #45	@ 0x2d
 8008732:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008736:	4a91      	ldr	r2, [pc, #580]	@ (800897c <_printf_float+0x2cc>)
 8008738:	4b91      	ldr	r3, [pc, #580]	@ (8008980 <_printf_float+0x2d0>)
 800873a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800873e:	bf8c      	ite	hi
 8008740:	4690      	movhi	r8, r2
 8008742:	4698      	movls	r8, r3
 8008744:	2303      	movs	r3, #3
 8008746:	6123      	str	r3, [r4, #16]
 8008748:	f02b 0304 	bic.w	r3, fp, #4
 800874c:	6023      	str	r3, [r4, #0]
 800874e:	f04f 0900 	mov.w	r9, #0
 8008752:	9700      	str	r7, [sp, #0]
 8008754:	4633      	mov	r3, r6
 8008756:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008758:	4621      	mov	r1, r4
 800875a:	4628      	mov	r0, r5
 800875c:	f000 f9d2 	bl	8008b04 <_printf_common>
 8008760:	3001      	adds	r0, #1
 8008762:	f040 808d 	bne.w	8008880 <_printf_float+0x1d0>
 8008766:	f04f 30ff 	mov.w	r0, #4294967295
 800876a:	b00d      	add	sp, #52	@ 0x34
 800876c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008770:	4642      	mov	r2, r8
 8008772:	464b      	mov	r3, r9
 8008774:	4640      	mov	r0, r8
 8008776:	4649      	mov	r1, r9
 8008778:	f7f8 f9d8 	bl	8000b2c <__aeabi_dcmpun>
 800877c:	b140      	cbz	r0, 8008790 <_printf_float+0xe0>
 800877e:	464b      	mov	r3, r9
 8008780:	2b00      	cmp	r3, #0
 8008782:	bfbc      	itt	lt
 8008784:	232d      	movlt	r3, #45	@ 0x2d
 8008786:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800878a:	4a7e      	ldr	r2, [pc, #504]	@ (8008984 <_printf_float+0x2d4>)
 800878c:	4b7e      	ldr	r3, [pc, #504]	@ (8008988 <_printf_float+0x2d8>)
 800878e:	e7d4      	b.n	800873a <_printf_float+0x8a>
 8008790:	6863      	ldr	r3, [r4, #4]
 8008792:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008796:	9206      	str	r2, [sp, #24]
 8008798:	1c5a      	adds	r2, r3, #1
 800879a:	d13b      	bne.n	8008814 <_printf_float+0x164>
 800879c:	2306      	movs	r3, #6
 800879e:	6063      	str	r3, [r4, #4]
 80087a0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80087a4:	2300      	movs	r3, #0
 80087a6:	6022      	str	r2, [r4, #0]
 80087a8:	9303      	str	r3, [sp, #12]
 80087aa:	ab0a      	add	r3, sp, #40	@ 0x28
 80087ac:	e9cd a301 	strd	sl, r3, [sp, #4]
 80087b0:	ab09      	add	r3, sp, #36	@ 0x24
 80087b2:	9300      	str	r3, [sp, #0]
 80087b4:	6861      	ldr	r1, [r4, #4]
 80087b6:	ec49 8b10 	vmov	d0, r8, r9
 80087ba:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80087be:	4628      	mov	r0, r5
 80087c0:	f7ff fed6 	bl	8008570 <__cvt>
 80087c4:	9b06      	ldr	r3, [sp, #24]
 80087c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80087c8:	2b47      	cmp	r3, #71	@ 0x47
 80087ca:	4680      	mov	r8, r0
 80087cc:	d129      	bne.n	8008822 <_printf_float+0x172>
 80087ce:	1cc8      	adds	r0, r1, #3
 80087d0:	db02      	blt.n	80087d8 <_printf_float+0x128>
 80087d2:	6863      	ldr	r3, [r4, #4]
 80087d4:	4299      	cmp	r1, r3
 80087d6:	dd41      	ble.n	800885c <_printf_float+0x1ac>
 80087d8:	f1aa 0a02 	sub.w	sl, sl, #2
 80087dc:	fa5f fa8a 	uxtb.w	sl, sl
 80087e0:	3901      	subs	r1, #1
 80087e2:	4652      	mov	r2, sl
 80087e4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80087e8:	9109      	str	r1, [sp, #36]	@ 0x24
 80087ea:	f7ff ff26 	bl	800863a <__exponent>
 80087ee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80087f0:	1813      	adds	r3, r2, r0
 80087f2:	2a01      	cmp	r2, #1
 80087f4:	4681      	mov	r9, r0
 80087f6:	6123      	str	r3, [r4, #16]
 80087f8:	dc02      	bgt.n	8008800 <_printf_float+0x150>
 80087fa:	6822      	ldr	r2, [r4, #0]
 80087fc:	07d2      	lsls	r2, r2, #31
 80087fe:	d501      	bpl.n	8008804 <_printf_float+0x154>
 8008800:	3301      	adds	r3, #1
 8008802:	6123      	str	r3, [r4, #16]
 8008804:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008808:	2b00      	cmp	r3, #0
 800880a:	d0a2      	beq.n	8008752 <_printf_float+0xa2>
 800880c:	232d      	movs	r3, #45	@ 0x2d
 800880e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008812:	e79e      	b.n	8008752 <_printf_float+0xa2>
 8008814:	9a06      	ldr	r2, [sp, #24]
 8008816:	2a47      	cmp	r2, #71	@ 0x47
 8008818:	d1c2      	bne.n	80087a0 <_printf_float+0xf0>
 800881a:	2b00      	cmp	r3, #0
 800881c:	d1c0      	bne.n	80087a0 <_printf_float+0xf0>
 800881e:	2301      	movs	r3, #1
 8008820:	e7bd      	b.n	800879e <_printf_float+0xee>
 8008822:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008826:	d9db      	bls.n	80087e0 <_printf_float+0x130>
 8008828:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800882c:	d118      	bne.n	8008860 <_printf_float+0x1b0>
 800882e:	2900      	cmp	r1, #0
 8008830:	6863      	ldr	r3, [r4, #4]
 8008832:	dd0b      	ble.n	800884c <_printf_float+0x19c>
 8008834:	6121      	str	r1, [r4, #16]
 8008836:	b913      	cbnz	r3, 800883e <_printf_float+0x18e>
 8008838:	6822      	ldr	r2, [r4, #0]
 800883a:	07d0      	lsls	r0, r2, #31
 800883c:	d502      	bpl.n	8008844 <_printf_float+0x194>
 800883e:	3301      	adds	r3, #1
 8008840:	440b      	add	r3, r1
 8008842:	6123      	str	r3, [r4, #16]
 8008844:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008846:	f04f 0900 	mov.w	r9, #0
 800884a:	e7db      	b.n	8008804 <_printf_float+0x154>
 800884c:	b913      	cbnz	r3, 8008854 <_printf_float+0x1a4>
 800884e:	6822      	ldr	r2, [r4, #0]
 8008850:	07d2      	lsls	r2, r2, #31
 8008852:	d501      	bpl.n	8008858 <_printf_float+0x1a8>
 8008854:	3302      	adds	r3, #2
 8008856:	e7f4      	b.n	8008842 <_printf_float+0x192>
 8008858:	2301      	movs	r3, #1
 800885a:	e7f2      	b.n	8008842 <_printf_float+0x192>
 800885c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008860:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008862:	4299      	cmp	r1, r3
 8008864:	db05      	blt.n	8008872 <_printf_float+0x1c2>
 8008866:	6823      	ldr	r3, [r4, #0]
 8008868:	6121      	str	r1, [r4, #16]
 800886a:	07d8      	lsls	r0, r3, #31
 800886c:	d5ea      	bpl.n	8008844 <_printf_float+0x194>
 800886e:	1c4b      	adds	r3, r1, #1
 8008870:	e7e7      	b.n	8008842 <_printf_float+0x192>
 8008872:	2900      	cmp	r1, #0
 8008874:	bfd4      	ite	le
 8008876:	f1c1 0202 	rsble	r2, r1, #2
 800887a:	2201      	movgt	r2, #1
 800887c:	4413      	add	r3, r2
 800887e:	e7e0      	b.n	8008842 <_printf_float+0x192>
 8008880:	6823      	ldr	r3, [r4, #0]
 8008882:	055a      	lsls	r2, r3, #21
 8008884:	d407      	bmi.n	8008896 <_printf_float+0x1e6>
 8008886:	6923      	ldr	r3, [r4, #16]
 8008888:	4642      	mov	r2, r8
 800888a:	4631      	mov	r1, r6
 800888c:	4628      	mov	r0, r5
 800888e:	47b8      	blx	r7
 8008890:	3001      	adds	r0, #1
 8008892:	d12b      	bne.n	80088ec <_printf_float+0x23c>
 8008894:	e767      	b.n	8008766 <_printf_float+0xb6>
 8008896:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800889a:	f240 80dd 	bls.w	8008a58 <_printf_float+0x3a8>
 800889e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80088a2:	2200      	movs	r2, #0
 80088a4:	2300      	movs	r3, #0
 80088a6:	f7f8 f90f 	bl	8000ac8 <__aeabi_dcmpeq>
 80088aa:	2800      	cmp	r0, #0
 80088ac:	d033      	beq.n	8008916 <_printf_float+0x266>
 80088ae:	4a37      	ldr	r2, [pc, #220]	@ (800898c <_printf_float+0x2dc>)
 80088b0:	2301      	movs	r3, #1
 80088b2:	4631      	mov	r1, r6
 80088b4:	4628      	mov	r0, r5
 80088b6:	47b8      	blx	r7
 80088b8:	3001      	adds	r0, #1
 80088ba:	f43f af54 	beq.w	8008766 <_printf_float+0xb6>
 80088be:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80088c2:	4543      	cmp	r3, r8
 80088c4:	db02      	blt.n	80088cc <_printf_float+0x21c>
 80088c6:	6823      	ldr	r3, [r4, #0]
 80088c8:	07d8      	lsls	r0, r3, #31
 80088ca:	d50f      	bpl.n	80088ec <_printf_float+0x23c>
 80088cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088d0:	4631      	mov	r1, r6
 80088d2:	4628      	mov	r0, r5
 80088d4:	47b8      	blx	r7
 80088d6:	3001      	adds	r0, #1
 80088d8:	f43f af45 	beq.w	8008766 <_printf_float+0xb6>
 80088dc:	f04f 0900 	mov.w	r9, #0
 80088e0:	f108 38ff 	add.w	r8, r8, #4294967295
 80088e4:	f104 0a1a 	add.w	sl, r4, #26
 80088e8:	45c8      	cmp	r8, r9
 80088ea:	dc09      	bgt.n	8008900 <_printf_float+0x250>
 80088ec:	6823      	ldr	r3, [r4, #0]
 80088ee:	079b      	lsls	r3, r3, #30
 80088f0:	f100 8103 	bmi.w	8008afa <_printf_float+0x44a>
 80088f4:	68e0      	ldr	r0, [r4, #12]
 80088f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80088f8:	4298      	cmp	r0, r3
 80088fa:	bfb8      	it	lt
 80088fc:	4618      	movlt	r0, r3
 80088fe:	e734      	b.n	800876a <_printf_float+0xba>
 8008900:	2301      	movs	r3, #1
 8008902:	4652      	mov	r2, sl
 8008904:	4631      	mov	r1, r6
 8008906:	4628      	mov	r0, r5
 8008908:	47b8      	blx	r7
 800890a:	3001      	adds	r0, #1
 800890c:	f43f af2b 	beq.w	8008766 <_printf_float+0xb6>
 8008910:	f109 0901 	add.w	r9, r9, #1
 8008914:	e7e8      	b.n	80088e8 <_printf_float+0x238>
 8008916:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008918:	2b00      	cmp	r3, #0
 800891a:	dc39      	bgt.n	8008990 <_printf_float+0x2e0>
 800891c:	4a1b      	ldr	r2, [pc, #108]	@ (800898c <_printf_float+0x2dc>)
 800891e:	2301      	movs	r3, #1
 8008920:	4631      	mov	r1, r6
 8008922:	4628      	mov	r0, r5
 8008924:	47b8      	blx	r7
 8008926:	3001      	adds	r0, #1
 8008928:	f43f af1d 	beq.w	8008766 <_printf_float+0xb6>
 800892c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008930:	ea59 0303 	orrs.w	r3, r9, r3
 8008934:	d102      	bne.n	800893c <_printf_float+0x28c>
 8008936:	6823      	ldr	r3, [r4, #0]
 8008938:	07d9      	lsls	r1, r3, #31
 800893a:	d5d7      	bpl.n	80088ec <_printf_float+0x23c>
 800893c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008940:	4631      	mov	r1, r6
 8008942:	4628      	mov	r0, r5
 8008944:	47b8      	blx	r7
 8008946:	3001      	adds	r0, #1
 8008948:	f43f af0d 	beq.w	8008766 <_printf_float+0xb6>
 800894c:	f04f 0a00 	mov.w	sl, #0
 8008950:	f104 0b1a 	add.w	fp, r4, #26
 8008954:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008956:	425b      	negs	r3, r3
 8008958:	4553      	cmp	r3, sl
 800895a:	dc01      	bgt.n	8008960 <_printf_float+0x2b0>
 800895c:	464b      	mov	r3, r9
 800895e:	e793      	b.n	8008888 <_printf_float+0x1d8>
 8008960:	2301      	movs	r3, #1
 8008962:	465a      	mov	r2, fp
 8008964:	4631      	mov	r1, r6
 8008966:	4628      	mov	r0, r5
 8008968:	47b8      	blx	r7
 800896a:	3001      	adds	r0, #1
 800896c:	f43f aefb 	beq.w	8008766 <_printf_float+0xb6>
 8008970:	f10a 0a01 	add.w	sl, sl, #1
 8008974:	e7ee      	b.n	8008954 <_printf_float+0x2a4>
 8008976:	bf00      	nop
 8008978:	7fefffff 	.word	0x7fefffff
 800897c:	0807a564 	.word	0x0807a564
 8008980:	0807a560 	.word	0x0807a560
 8008984:	0807a56c 	.word	0x0807a56c
 8008988:	0807a568 	.word	0x0807a568
 800898c:	0807a570 	.word	0x0807a570
 8008990:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008992:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008996:	4553      	cmp	r3, sl
 8008998:	bfa8      	it	ge
 800899a:	4653      	movge	r3, sl
 800899c:	2b00      	cmp	r3, #0
 800899e:	4699      	mov	r9, r3
 80089a0:	dc36      	bgt.n	8008a10 <_printf_float+0x360>
 80089a2:	f04f 0b00 	mov.w	fp, #0
 80089a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80089aa:	f104 021a 	add.w	r2, r4, #26
 80089ae:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80089b0:	9306      	str	r3, [sp, #24]
 80089b2:	eba3 0309 	sub.w	r3, r3, r9
 80089b6:	455b      	cmp	r3, fp
 80089b8:	dc31      	bgt.n	8008a1e <_printf_float+0x36e>
 80089ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089bc:	459a      	cmp	sl, r3
 80089be:	dc3a      	bgt.n	8008a36 <_printf_float+0x386>
 80089c0:	6823      	ldr	r3, [r4, #0]
 80089c2:	07da      	lsls	r2, r3, #31
 80089c4:	d437      	bmi.n	8008a36 <_printf_float+0x386>
 80089c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089c8:	ebaa 0903 	sub.w	r9, sl, r3
 80089cc:	9b06      	ldr	r3, [sp, #24]
 80089ce:	ebaa 0303 	sub.w	r3, sl, r3
 80089d2:	4599      	cmp	r9, r3
 80089d4:	bfa8      	it	ge
 80089d6:	4699      	movge	r9, r3
 80089d8:	f1b9 0f00 	cmp.w	r9, #0
 80089dc:	dc33      	bgt.n	8008a46 <_printf_float+0x396>
 80089de:	f04f 0800 	mov.w	r8, #0
 80089e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80089e6:	f104 0b1a 	add.w	fp, r4, #26
 80089ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089ec:	ebaa 0303 	sub.w	r3, sl, r3
 80089f0:	eba3 0309 	sub.w	r3, r3, r9
 80089f4:	4543      	cmp	r3, r8
 80089f6:	f77f af79 	ble.w	80088ec <_printf_float+0x23c>
 80089fa:	2301      	movs	r3, #1
 80089fc:	465a      	mov	r2, fp
 80089fe:	4631      	mov	r1, r6
 8008a00:	4628      	mov	r0, r5
 8008a02:	47b8      	blx	r7
 8008a04:	3001      	adds	r0, #1
 8008a06:	f43f aeae 	beq.w	8008766 <_printf_float+0xb6>
 8008a0a:	f108 0801 	add.w	r8, r8, #1
 8008a0e:	e7ec      	b.n	80089ea <_printf_float+0x33a>
 8008a10:	4642      	mov	r2, r8
 8008a12:	4631      	mov	r1, r6
 8008a14:	4628      	mov	r0, r5
 8008a16:	47b8      	blx	r7
 8008a18:	3001      	adds	r0, #1
 8008a1a:	d1c2      	bne.n	80089a2 <_printf_float+0x2f2>
 8008a1c:	e6a3      	b.n	8008766 <_printf_float+0xb6>
 8008a1e:	2301      	movs	r3, #1
 8008a20:	4631      	mov	r1, r6
 8008a22:	4628      	mov	r0, r5
 8008a24:	9206      	str	r2, [sp, #24]
 8008a26:	47b8      	blx	r7
 8008a28:	3001      	adds	r0, #1
 8008a2a:	f43f ae9c 	beq.w	8008766 <_printf_float+0xb6>
 8008a2e:	9a06      	ldr	r2, [sp, #24]
 8008a30:	f10b 0b01 	add.w	fp, fp, #1
 8008a34:	e7bb      	b.n	80089ae <_printf_float+0x2fe>
 8008a36:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a3a:	4631      	mov	r1, r6
 8008a3c:	4628      	mov	r0, r5
 8008a3e:	47b8      	blx	r7
 8008a40:	3001      	adds	r0, #1
 8008a42:	d1c0      	bne.n	80089c6 <_printf_float+0x316>
 8008a44:	e68f      	b.n	8008766 <_printf_float+0xb6>
 8008a46:	9a06      	ldr	r2, [sp, #24]
 8008a48:	464b      	mov	r3, r9
 8008a4a:	4442      	add	r2, r8
 8008a4c:	4631      	mov	r1, r6
 8008a4e:	4628      	mov	r0, r5
 8008a50:	47b8      	blx	r7
 8008a52:	3001      	adds	r0, #1
 8008a54:	d1c3      	bne.n	80089de <_printf_float+0x32e>
 8008a56:	e686      	b.n	8008766 <_printf_float+0xb6>
 8008a58:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008a5c:	f1ba 0f01 	cmp.w	sl, #1
 8008a60:	dc01      	bgt.n	8008a66 <_printf_float+0x3b6>
 8008a62:	07db      	lsls	r3, r3, #31
 8008a64:	d536      	bpl.n	8008ad4 <_printf_float+0x424>
 8008a66:	2301      	movs	r3, #1
 8008a68:	4642      	mov	r2, r8
 8008a6a:	4631      	mov	r1, r6
 8008a6c:	4628      	mov	r0, r5
 8008a6e:	47b8      	blx	r7
 8008a70:	3001      	adds	r0, #1
 8008a72:	f43f ae78 	beq.w	8008766 <_printf_float+0xb6>
 8008a76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a7a:	4631      	mov	r1, r6
 8008a7c:	4628      	mov	r0, r5
 8008a7e:	47b8      	blx	r7
 8008a80:	3001      	adds	r0, #1
 8008a82:	f43f ae70 	beq.w	8008766 <_printf_float+0xb6>
 8008a86:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008a92:	f7f8 f819 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a96:	b9c0      	cbnz	r0, 8008aca <_printf_float+0x41a>
 8008a98:	4653      	mov	r3, sl
 8008a9a:	f108 0201 	add.w	r2, r8, #1
 8008a9e:	4631      	mov	r1, r6
 8008aa0:	4628      	mov	r0, r5
 8008aa2:	47b8      	blx	r7
 8008aa4:	3001      	adds	r0, #1
 8008aa6:	d10c      	bne.n	8008ac2 <_printf_float+0x412>
 8008aa8:	e65d      	b.n	8008766 <_printf_float+0xb6>
 8008aaa:	2301      	movs	r3, #1
 8008aac:	465a      	mov	r2, fp
 8008aae:	4631      	mov	r1, r6
 8008ab0:	4628      	mov	r0, r5
 8008ab2:	47b8      	blx	r7
 8008ab4:	3001      	adds	r0, #1
 8008ab6:	f43f ae56 	beq.w	8008766 <_printf_float+0xb6>
 8008aba:	f108 0801 	add.w	r8, r8, #1
 8008abe:	45d0      	cmp	r8, sl
 8008ac0:	dbf3      	blt.n	8008aaa <_printf_float+0x3fa>
 8008ac2:	464b      	mov	r3, r9
 8008ac4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008ac8:	e6df      	b.n	800888a <_printf_float+0x1da>
 8008aca:	f04f 0800 	mov.w	r8, #0
 8008ace:	f104 0b1a 	add.w	fp, r4, #26
 8008ad2:	e7f4      	b.n	8008abe <_printf_float+0x40e>
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	4642      	mov	r2, r8
 8008ad8:	e7e1      	b.n	8008a9e <_printf_float+0x3ee>
 8008ada:	2301      	movs	r3, #1
 8008adc:	464a      	mov	r2, r9
 8008ade:	4631      	mov	r1, r6
 8008ae0:	4628      	mov	r0, r5
 8008ae2:	47b8      	blx	r7
 8008ae4:	3001      	adds	r0, #1
 8008ae6:	f43f ae3e 	beq.w	8008766 <_printf_float+0xb6>
 8008aea:	f108 0801 	add.w	r8, r8, #1
 8008aee:	68e3      	ldr	r3, [r4, #12]
 8008af0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008af2:	1a5b      	subs	r3, r3, r1
 8008af4:	4543      	cmp	r3, r8
 8008af6:	dcf0      	bgt.n	8008ada <_printf_float+0x42a>
 8008af8:	e6fc      	b.n	80088f4 <_printf_float+0x244>
 8008afa:	f04f 0800 	mov.w	r8, #0
 8008afe:	f104 0919 	add.w	r9, r4, #25
 8008b02:	e7f4      	b.n	8008aee <_printf_float+0x43e>

08008b04 <_printf_common>:
 8008b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b08:	4616      	mov	r6, r2
 8008b0a:	4698      	mov	r8, r3
 8008b0c:	688a      	ldr	r2, [r1, #8]
 8008b0e:	690b      	ldr	r3, [r1, #16]
 8008b10:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008b14:	4293      	cmp	r3, r2
 8008b16:	bfb8      	it	lt
 8008b18:	4613      	movlt	r3, r2
 8008b1a:	6033      	str	r3, [r6, #0]
 8008b1c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008b20:	4607      	mov	r7, r0
 8008b22:	460c      	mov	r4, r1
 8008b24:	b10a      	cbz	r2, 8008b2a <_printf_common+0x26>
 8008b26:	3301      	adds	r3, #1
 8008b28:	6033      	str	r3, [r6, #0]
 8008b2a:	6823      	ldr	r3, [r4, #0]
 8008b2c:	0699      	lsls	r1, r3, #26
 8008b2e:	bf42      	ittt	mi
 8008b30:	6833      	ldrmi	r3, [r6, #0]
 8008b32:	3302      	addmi	r3, #2
 8008b34:	6033      	strmi	r3, [r6, #0]
 8008b36:	6825      	ldr	r5, [r4, #0]
 8008b38:	f015 0506 	ands.w	r5, r5, #6
 8008b3c:	d106      	bne.n	8008b4c <_printf_common+0x48>
 8008b3e:	f104 0a19 	add.w	sl, r4, #25
 8008b42:	68e3      	ldr	r3, [r4, #12]
 8008b44:	6832      	ldr	r2, [r6, #0]
 8008b46:	1a9b      	subs	r3, r3, r2
 8008b48:	42ab      	cmp	r3, r5
 8008b4a:	dc26      	bgt.n	8008b9a <_printf_common+0x96>
 8008b4c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008b50:	6822      	ldr	r2, [r4, #0]
 8008b52:	3b00      	subs	r3, #0
 8008b54:	bf18      	it	ne
 8008b56:	2301      	movne	r3, #1
 8008b58:	0692      	lsls	r2, r2, #26
 8008b5a:	d42b      	bmi.n	8008bb4 <_printf_common+0xb0>
 8008b5c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008b60:	4641      	mov	r1, r8
 8008b62:	4638      	mov	r0, r7
 8008b64:	47c8      	blx	r9
 8008b66:	3001      	adds	r0, #1
 8008b68:	d01e      	beq.n	8008ba8 <_printf_common+0xa4>
 8008b6a:	6823      	ldr	r3, [r4, #0]
 8008b6c:	6922      	ldr	r2, [r4, #16]
 8008b6e:	f003 0306 	and.w	r3, r3, #6
 8008b72:	2b04      	cmp	r3, #4
 8008b74:	bf02      	ittt	eq
 8008b76:	68e5      	ldreq	r5, [r4, #12]
 8008b78:	6833      	ldreq	r3, [r6, #0]
 8008b7a:	1aed      	subeq	r5, r5, r3
 8008b7c:	68a3      	ldr	r3, [r4, #8]
 8008b7e:	bf0c      	ite	eq
 8008b80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b84:	2500      	movne	r5, #0
 8008b86:	4293      	cmp	r3, r2
 8008b88:	bfc4      	itt	gt
 8008b8a:	1a9b      	subgt	r3, r3, r2
 8008b8c:	18ed      	addgt	r5, r5, r3
 8008b8e:	2600      	movs	r6, #0
 8008b90:	341a      	adds	r4, #26
 8008b92:	42b5      	cmp	r5, r6
 8008b94:	d11a      	bne.n	8008bcc <_printf_common+0xc8>
 8008b96:	2000      	movs	r0, #0
 8008b98:	e008      	b.n	8008bac <_printf_common+0xa8>
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	4652      	mov	r2, sl
 8008b9e:	4641      	mov	r1, r8
 8008ba0:	4638      	mov	r0, r7
 8008ba2:	47c8      	blx	r9
 8008ba4:	3001      	adds	r0, #1
 8008ba6:	d103      	bne.n	8008bb0 <_printf_common+0xac>
 8008ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8008bac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bb0:	3501      	adds	r5, #1
 8008bb2:	e7c6      	b.n	8008b42 <_printf_common+0x3e>
 8008bb4:	18e1      	adds	r1, r4, r3
 8008bb6:	1c5a      	adds	r2, r3, #1
 8008bb8:	2030      	movs	r0, #48	@ 0x30
 8008bba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008bbe:	4422      	add	r2, r4
 8008bc0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008bc4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008bc8:	3302      	adds	r3, #2
 8008bca:	e7c7      	b.n	8008b5c <_printf_common+0x58>
 8008bcc:	2301      	movs	r3, #1
 8008bce:	4622      	mov	r2, r4
 8008bd0:	4641      	mov	r1, r8
 8008bd2:	4638      	mov	r0, r7
 8008bd4:	47c8      	blx	r9
 8008bd6:	3001      	adds	r0, #1
 8008bd8:	d0e6      	beq.n	8008ba8 <_printf_common+0xa4>
 8008bda:	3601      	adds	r6, #1
 8008bdc:	e7d9      	b.n	8008b92 <_printf_common+0x8e>
	...

08008be0 <_printf_i>:
 8008be0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008be4:	7e0f      	ldrb	r7, [r1, #24]
 8008be6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008be8:	2f78      	cmp	r7, #120	@ 0x78
 8008bea:	4691      	mov	r9, r2
 8008bec:	4680      	mov	r8, r0
 8008bee:	460c      	mov	r4, r1
 8008bf0:	469a      	mov	sl, r3
 8008bf2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008bf6:	d807      	bhi.n	8008c08 <_printf_i+0x28>
 8008bf8:	2f62      	cmp	r7, #98	@ 0x62
 8008bfa:	d80a      	bhi.n	8008c12 <_printf_i+0x32>
 8008bfc:	2f00      	cmp	r7, #0
 8008bfe:	f000 80d1 	beq.w	8008da4 <_printf_i+0x1c4>
 8008c02:	2f58      	cmp	r7, #88	@ 0x58
 8008c04:	f000 80b8 	beq.w	8008d78 <_printf_i+0x198>
 8008c08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008c0c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008c10:	e03a      	b.n	8008c88 <_printf_i+0xa8>
 8008c12:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008c16:	2b15      	cmp	r3, #21
 8008c18:	d8f6      	bhi.n	8008c08 <_printf_i+0x28>
 8008c1a:	a101      	add	r1, pc, #4	@ (adr r1, 8008c20 <_printf_i+0x40>)
 8008c1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c20:	08008c79 	.word	0x08008c79
 8008c24:	08008c8d 	.word	0x08008c8d
 8008c28:	08008c09 	.word	0x08008c09
 8008c2c:	08008c09 	.word	0x08008c09
 8008c30:	08008c09 	.word	0x08008c09
 8008c34:	08008c09 	.word	0x08008c09
 8008c38:	08008c8d 	.word	0x08008c8d
 8008c3c:	08008c09 	.word	0x08008c09
 8008c40:	08008c09 	.word	0x08008c09
 8008c44:	08008c09 	.word	0x08008c09
 8008c48:	08008c09 	.word	0x08008c09
 8008c4c:	08008d8b 	.word	0x08008d8b
 8008c50:	08008cb7 	.word	0x08008cb7
 8008c54:	08008d45 	.word	0x08008d45
 8008c58:	08008c09 	.word	0x08008c09
 8008c5c:	08008c09 	.word	0x08008c09
 8008c60:	08008dad 	.word	0x08008dad
 8008c64:	08008c09 	.word	0x08008c09
 8008c68:	08008cb7 	.word	0x08008cb7
 8008c6c:	08008c09 	.word	0x08008c09
 8008c70:	08008c09 	.word	0x08008c09
 8008c74:	08008d4d 	.word	0x08008d4d
 8008c78:	6833      	ldr	r3, [r6, #0]
 8008c7a:	1d1a      	adds	r2, r3, #4
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	6032      	str	r2, [r6, #0]
 8008c80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008c84:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008c88:	2301      	movs	r3, #1
 8008c8a:	e09c      	b.n	8008dc6 <_printf_i+0x1e6>
 8008c8c:	6833      	ldr	r3, [r6, #0]
 8008c8e:	6820      	ldr	r0, [r4, #0]
 8008c90:	1d19      	adds	r1, r3, #4
 8008c92:	6031      	str	r1, [r6, #0]
 8008c94:	0606      	lsls	r6, r0, #24
 8008c96:	d501      	bpl.n	8008c9c <_printf_i+0xbc>
 8008c98:	681d      	ldr	r5, [r3, #0]
 8008c9a:	e003      	b.n	8008ca4 <_printf_i+0xc4>
 8008c9c:	0645      	lsls	r5, r0, #25
 8008c9e:	d5fb      	bpl.n	8008c98 <_printf_i+0xb8>
 8008ca0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008ca4:	2d00      	cmp	r5, #0
 8008ca6:	da03      	bge.n	8008cb0 <_printf_i+0xd0>
 8008ca8:	232d      	movs	r3, #45	@ 0x2d
 8008caa:	426d      	negs	r5, r5
 8008cac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008cb0:	4858      	ldr	r0, [pc, #352]	@ (8008e14 <_printf_i+0x234>)
 8008cb2:	230a      	movs	r3, #10
 8008cb4:	e011      	b.n	8008cda <_printf_i+0xfa>
 8008cb6:	6821      	ldr	r1, [r4, #0]
 8008cb8:	6833      	ldr	r3, [r6, #0]
 8008cba:	0608      	lsls	r0, r1, #24
 8008cbc:	f853 5b04 	ldr.w	r5, [r3], #4
 8008cc0:	d402      	bmi.n	8008cc8 <_printf_i+0xe8>
 8008cc2:	0649      	lsls	r1, r1, #25
 8008cc4:	bf48      	it	mi
 8008cc6:	b2ad      	uxthmi	r5, r5
 8008cc8:	2f6f      	cmp	r7, #111	@ 0x6f
 8008cca:	4852      	ldr	r0, [pc, #328]	@ (8008e14 <_printf_i+0x234>)
 8008ccc:	6033      	str	r3, [r6, #0]
 8008cce:	bf14      	ite	ne
 8008cd0:	230a      	movne	r3, #10
 8008cd2:	2308      	moveq	r3, #8
 8008cd4:	2100      	movs	r1, #0
 8008cd6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008cda:	6866      	ldr	r6, [r4, #4]
 8008cdc:	60a6      	str	r6, [r4, #8]
 8008cde:	2e00      	cmp	r6, #0
 8008ce0:	db05      	blt.n	8008cee <_printf_i+0x10e>
 8008ce2:	6821      	ldr	r1, [r4, #0]
 8008ce4:	432e      	orrs	r6, r5
 8008ce6:	f021 0104 	bic.w	r1, r1, #4
 8008cea:	6021      	str	r1, [r4, #0]
 8008cec:	d04b      	beq.n	8008d86 <_printf_i+0x1a6>
 8008cee:	4616      	mov	r6, r2
 8008cf0:	fbb5 f1f3 	udiv	r1, r5, r3
 8008cf4:	fb03 5711 	mls	r7, r3, r1, r5
 8008cf8:	5dc7      	ldrb	r7, [r0, r7]
 8008cfa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008cfe:	462f      	mov	r7, r5
 8008d00:	42bb      	cmp	r3, r7
 8008d02:	460d      	mov	r5, r1
 8008d04:	d9f4      	bls.n	8008cf0 <_printf_i+0x110>
 8008d06:	2b08      	cmp	r3, #8
 8008d08:	d10b      	bne.n	8008d22 <_printf_i+0x142>
 8008d0a:	6823      	ldr	r3, [r4, #0]
 8008d0c:	07df      	lsls	r7, r3, #31
 8008d0e:	d508      	bpl.n	8008d22 <_printf_i+0x142>
 8008d10:	6923      	ldr	r3, [r4, #16]
 8008d12:	6861      	ldr	r1, [r4, #4]
 8008d14:	4299      	cmp	r1, r3
 8008d16:	bfde      	ittt	le
 8008d18:	2330      	movle	r3, #48	@ 0x30
 8008d1a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008d1e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008d22:	1b92      	subs	r2, r2, r6
 8008d24:	6122      	str	r2, [r4, #16]
 8008d26:	f8cd a000 	str.w	sl, [sp]
 8008d2a:	464b      	mov	r3, r9
 8008d2c:	aa03      	add	r2, sp, #12
 8008d2e:	4621      	mov	r1, r4
 8008d30:	4640      	mov	r0, r8
 8008d32:	f7ff fee7 	bl	8008b04 <_printf_common>
 8008d36:	3001      	adds	r0, #1
 8008d38:	d14a      	bne.n	8008dd0 <_printf_i+0x1f0>
 8008d3a:	f04f 30ff 	mov.w	r0, #4294967295
 8008d3e:	b004      	add	sp, #16
 8008d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d44:	6823      	ldr	r3, [r4, #0]
 8008d46:	f043 0320 	orr.w	r3, r3, #32
 8008d4a:	6023      	str	r3, [r4, #0]
 8008d4c:	4832      	ldr	r0, [pc, #200]	@ (8008e18 <_printf_i+0x238>)
 8008d4e:	2778      	movs	r7, #120	@ 0x78
 8008d50:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008d54:	6823      	ldr	r3, [r4, #0]
 8008d56:	6831      	ldr	r1, [r6, #0]
 8008d58:	061f      	lsls	r7, r3, #24
 8008d5a:	f851 5b04 	ldr.w	r5, [r1], #4
 8008d5e:	d402      	bmi.n	8008d66 <_printf_i+0x186>
 8008d60:	065f      	lsls	r7, r3, #25
 8008d62:	bf48      	it	mi
 8008d64:	b2ad      	uxthmi	r5, r5
 8008d66:	6031      	str	r1, [r6, #0]
 8008d68:	07d9      	lsls	r1, r3, #31
 8008d6a:	bf44      	itt	mi
 8008d6c:	f043 0320 	orrmi.w	r3, r3, #32
 8008d70:	6023      	strmi	r3, [r4, #0]
 8008d72:	b11d      	cbz	r5, 8008d7c <_printf_i+0x19c>
 8008d74:	2310      	movs	r3, #16
 8008d76:	e7ad      	b.n	8008cd4 <_printf_i+0xf4>
 8008d78:	4826      	ldr	r0, [pc, #152]	@ (8008e14 <_printf_i+0x234>)
 8008d7a:	e7e9      	b.n	8008d50 <_printf_i+0x170>
 8008d7c:	6823      	ldr	r3, [r4, #0]
 8008d7e:	f023 0320 	bic.w	r3, r3, #32
 8008d82:	6023      	str	r3, [r4, #0]
 8008d84:	e7f6      	b.n	8008d74 <_printf_i+0x194>
 8008d86:	4616      	mov	r6, r2
 8008d88:	e7bd      	b.n	8008d06 <_printf_i+0x126>
 8008d8a:	6833      	ldr	r3, [r6, #0]
 8008d8c:	6825      	ldr	r5, [r4, #0]
 8008d8e:	6961      	ldr	r1, [r4, #20]
 8008d90:	1d18      	adds	r0, r3, #4
 8008d92:	6030      	str	r0, [r6, #0]
 8008d94:	062e      	lsls	r6, r5, #24
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	d501      	bpl.n	8008d9e <_printf_i+0x1be>
 8008d9a:	6019      	str	r1, [r3, #0]
 8008d9c:	e002      	b.n	8008da4 <_printf_i+0x1c4>
 8008d9e:	0668      	lsls	r0, r5, #25
 8008da0:	d5fb      	bpl.n	8008d9a <_printf_i+0x1ba>
 8008da2:	8019      	strh	r1, [r3, #0]
 8008da4:	2300      	movs	r3, #0
 8008da6:	6123      	str	r3, [r4, #16]
 8008da8:	4616      	mov	r6, r2
 8008daa:	e7bc      	b.n	8008d26 <_printf_i+0x146>
 8008dac:	6833      	ldr	r3, [r6, #0]
 8008dae:	1d1a      	adds	r2, r3, #4
 8008db0:	6032      	str	r2, [r6, #0]
 8008db2:	681e      	ldr	r6, [r3, #0]
 8008db4:	6862      	ldr	r2, [r4, #4]
 8008db6:	2100      	movs	r1, #0
 8008db8:	4630      	mov	r0, r6
 8008dba:	f7f7 fa09 	bl	80001d0 <memchr>
 8008dbe:	b108      	cbz	r0, 8008dc4 <_printf_i+0x1e4>
 8008dc0:	1b80      	subs	r0, r0, r6
 8008dc2:	6060      	str	r0, [r4, #4]
 8008dc4:	6863      	ldr	r3, [r4, #4]
 8008dc6:	6123      	str	r3, [r4, #16]
 8008dc8:	2300      	movs	r3, #0
 8008dca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008dce:	e7aa      	b.n	8008d26 <_printf_i+0x146>
 8008dd0:	6923      	ldr	r3, [r4, #16]
 8008dd2:	4632      	mov	r2, r6
 8008dd4:	4649      	mov	r1, r9
 8008dd6:	4640      	mov	r0, r8
 8008dd8:	47d0      	blx	sl
 8008dda:	3001      	adds	r0, #1
 8008ddc:	d0ad      	beq.n	8008d3a <_printf_i+0x15a>
 8008dde:	6823      	ldr	r3, [r4, #0]
 8008de0:	079b      	lsls	r3, r3, #30
 8008de2:	d413      	bmi.n	8008e0c <_printf_i+0x22c>
 8008de4:	68e0      	ldr	r0, [r4, #12]
 8008de6:	9b03      	ldr	r3, [sp, #12]
 8008de8:	4298      	cmp	r0, r3
 8008dea:	bfb8      	it	lt
 8008dec:	4618      	movlt	r0, r3
 8008dee:	e7a6      	b.n	8008d3e <_printf_i+0x15e>
 8008df0:	2301      	movs	r3, #1
 8008df2:	4632      	mov	r2, r6
 8008df4:	4649      	mov	r1, r9
 8008df6:	4640      	mov	r0, r8
 8008df8:	47d0      	blx	sl
 8008dfa:	3001      	adds	r0, #1
 8008dfc:	d09d      	beq.n	8008d3a <_printf_i+0x15a>
 8008dfe:	3501      	adds	r5, #1
 8008e00:	68e3      	ldr	r3, [r4, #12]
 8008e02:	9903      	ldr	r1, [sp, #12]
 8008e04:	1a5b      	subs	r3, r3, r1
 8008e06:	42ab      	cmp	r3, r5
 8008e08:	dcf2      	bgt.n	8008df0 <_printf_i+0x210>
 8008e0a:	e7eb      	b.n	8008de4 <_printf_i+0x204>
 8008e0c:	2500      	movs	r5, #0
 8008e0e:	f104 0619 	add.w	r6, r4, #25
 8008e12:	e7f5      	b.n	8008e00 <_printf_i+0x220>
 8008e14:	0807a572 	.word	0x0807a572
 8008e18:	0807a583 	.word	0x0807a583

08008e1c <std>:
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	b510      	push	{r4, lr}
 8008e20:	4604      	mov	r4, r0
 8008e22:	e9c0 3300 	strd	r3, r3, [r0]
 8008e26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008e2a:	6083      	str	r3, [r0, #8]
 8008e2c:	8181      	strh	r1, [r0, #12]
 8008e2e:	6643      	str	r3, [r0, #100]	@ 0x64
 8008e30:	81c2      	strh	r2, [r0, #14]
 8008e32:	6183      	str	r3, [r0, #24]
 8008e34:	4619      	mov	r1, r3
 8008e36:	2208      	movs	r2, #8
 8008e38:	305c      	adds	r0, #92	@ 0x5c
 8008e3a:	f000 f9f9 	bl	8009230 <memset>
 8008e3e:	4b0d      	ldr	r3, [pc, #52]	@ (8008e74 <std+0x58>)
 8008e40:	6263      	str	r3, [r4, #36]	@ 0x24
 8008e42:	4b0d      	ldr	r3, [pc, #52]	@ (8008e78 <std+0x5c>)
 8008e44:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008e46:	4b0d      	ldr	r3, [pc, #52]	@ (8008e7c <std+0x60>)
 8008e48:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8008e80 <std+0x64>)
 8008e4c:	6323      	str	r3, [r4, #48]	@ 0x30
 8008e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8008e84 <std+0x68>)
 8008e50:	6224      	str	r4, [r4, #32]
 8008e52:	429c      	cmp	r4, r3
 8008e54:	d006      	beq.n	8008e64 <std+0x48>
 8008e56:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008e5a:	4294      	cmp	r4, r2
 8008e5c:	d002      	beq.n	8008e64 <std+0x48>
 8008e5e:	33d0      	adds	r3, #208	@ 0xd0
 8008e60:	429c      	cmp	r4, r3
 8008e62:	d105      	bne.n	8008e70 <std+0x54>
 8008e64:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e6c:	f000 ba6c 	b.w	8009348 <__retarget_lock_init_recursive>
 8008e70:	bd10      	pop	{r4, pc}
 8008e72:	bf00      	nop
 8008e74:	08009081 	.word	0x08009081
 8008e78:	080090a3 	.word	0x080090a3
 8008e7c:	080090db 	.word	0x080090db
 8008e80:	080090ff 	.word	0x080090ff
 8008e84:	20003634 	.word	0x20003634

08008e88 <stdio_exit_handler>:
 8008e88:	4a02      	ldr	r2, [pc, #8]	@ (8008e94 <stdio_exit_handler+0xc>)
 8008e8a:	4903      	ldr	r1, [pc, #12]	@ (8008e98 <stdio_exit_handler+0x10>)
 8008e8c:	4803      	ldr	r0, [pc, #12]	@ (8008e9c <stdio_exit_handler+0x14>)
 8008e8e:	f000 b869 	b.w	8008f64 <_fwalk_sglue>
 8008e92:	bf00      	nop
 8008e94:	20000c6c 	.word	0x20000c6c
 8008e98:	0800ab35 	.word	0x0800ab35
 8008e9c:	20000c7c 	.word	0x20000c7c

08008ea0 <cleanup_stdio>:
 8008ea0:	6841      	ldr	r1, [r0, #4]
 8008ea2:	4b0c      	ldr	r3, [pc, #48]	@ (8008ed4 <cleanup_stdio+0x34>)
 8008ea4:	4299      	cmp	r1, r3
 8008ea6:	b510      	push	{r4, lr}
 8008ea8:	4604      	mov	r4, r0
 8008eaa:	d001      	beq.n	8008eb0 <cleanup_stdio+0x10>
 8008eac:	f001 fe42 	bl	800ab34 <_fflush_r>
 8008eb0:	68a1      	ldr	r1, [r4, #8]
 8008eb2:	4b09      	ldr	r3, [pc, #36]	@ (8008ed8 <cleanup_stdio+0x38>)
 8008eb4:	4299      	cmp	r1, r3
 8008eb6:	d002      	beq.n	8008ebe <cleanup_stdio+0x1e>
 8008eb8:	4620      	mov	r0, r4
 8008eba:	f001 fe3b 	bl	800ab34 <_fflush_r>
 8008ebe:	68e1      	ldr	r1, [r4, #12]
 8008ec0:	4b06      	ldr	r3, [pc, #24]	@ (8008edc <cleanup_stdio+0x3c>)
 8008ec2:	4299      	cmp	r1, r3
 8008ec4:	d004      	beq.n	8008ed0 <cleanup_stdio+0x30>
 8008ec6:	4620      	mov	r0, r4
 8008ec8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ecc:	f001 be32 	b.w	800ab34 <_fflush_r>
 8008ed0:	bd10      	pop	{r4, pc}
 8008ed2:	bf00      	nop
 8008ed4:	20003634 	.word	0x20003634
 8008ed8:	2000369c 	.word	0x2000369c
 8008edc:	20003704 	.word	0x20003704

08008ee0 <global_stdio_init.part.0>:
 8008ee0:	b510      	push	{r4, lr}
 8008ee2:	4b0b      	ldr	r3, [pc, #44]	@ (8008f10 <global_stdio_init.part.0+0x30>)
 8008ee4:	4c0b      	ldr	r4, [pc, #44]	@ (8008f14 <global_stdio_init.part.0+0x34>)
 8008ee6:	4a0c      	ldr	r2, [pc, #48]	@ (8008f18 <global_stdio_init.part.0+0x38>)
 8008ee8:	601a      	str	r2, [r3, #0]
 8008eea:	4620      	mov	r0, r4
 8008eec:	2200      	movs	r2, #0
 8008eee:	2104      	movs	r1, #4
 8008ef0:	f7ff ff94 	bl	8008e1c <std>
 8008ef4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008ef8:	2201      	movs	r2, #1
 8008efa:	2109      	movs	r1, #9
 8008efc:	f7ff ff8e 	bl	8008e1c <std>
 8008f00:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008f04:	2202      	movs	r2, #2
 8008f06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f0a:	2112      	movs	r1, #18
 8008f0c:	f7ff bf86 	b.w	8008e1c <std>
 8008f10:	2000376c 	.word	0x2000376c
 8008f14:	20003634 	.word	0x20003634
 8008f18:	08008e89 	.word	0x08008e89

08008f1c <__sfp_lock_acquire>:
 8008f1c:	4801      	ldr	r0, [pc, #4]	@ (8008f24 <__sfp_lock_acquire+0x8>)
 8008f1e:	f000 ba14 	b.w	800934a <__retarget_lock_acquire_recursive>
 8008f22:	bf00      	nop
 8008f24:	20003775 	.word	0x20003775

08008f28 <__sfp_lock_release>:
 8008f28:	4801      	ldr	r0, [pc, #4]	@ (8008f30 <__sfp_lock_release+0x8>)
 8008f2a:	f000 ba0f 	b.w	800934c <__retarget_lock_release_recursive>
 8008f2e:	bf00      	nop
 8008f30:	20003775 	.word	0x20003775

08008f34 <__sinit>:
 8008f34:	b510      	push	{r4, lr}
 8008f36:	4604      	mov	r4, r0
 8008f38:	f7ff fff0 	bl	8008f1c <__sfp_lock_acquire>
 8008f3c:	6a23      	ldr	r3, [r4, #32]
 8008f3e:	b11b      	cbz	r3, 8008f48 <__sinit+0x14>
 8008f40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f44:	f7ff bff0 	b.w	8008f28 <__sfp_lock_release>
 8008f48:	4b04      	ldr	r3, [pc, #16]	@ (8008f5c <__sinit+0x28>)
 8008f4a:	6223      	str	r3, [r4, #32]
 8008f4c:	4b04      	ldr	r3, [pc, #16]	@ (8008f60 <__sinit+0x2c>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d1f5      	bne.n	8008f40 <__sinit+0xc>
 8008f54:	f7ff ffc4 	bl	8008ee0 <global_stdio_init.part.0>
 8008f58:	e7f2      	b.n	8008f40 <__sinit+0xc>
 8008f5a:	bf00      	nop
 8008f5c:	08008ea1 	.word	0x08008ea1
 8008f60:	2000376c 	.word	0x2000376c

08008f64 <_fwalk_sglue>:
 8008f64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f68:	4607      	mov	r7, r0
 8008f6a:	4688      	mov	r8, r1
 8008f6c:	4614      	mov	r4, r2
 8008f6e:	2600      	movs	r6, #0
 8008f70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008f74:	f1b9 0901 	subs.w	r9, r9, #1
 8008f78:	d505      	bpl.n	8008f86 <_fwalk_sglue+0x22>
 8008f7a:	6824      	ldr	r4, [r4, #0]
 8008f7c:	2c00      	cmp	r4, #0
 8008f7e:	d1f7      	bne.n	8008f70 <_fwalk_sglue+0xc>
 8008f80:	4630      	mov	r0, r6
 8008f82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f86:	89ab      	ldrh	r3, [r5, #12]
 8008f88:	2b01      	cmp	r3, #1
 8008f8a:	d907      	bls.n	8008f9c <_fwalk_sglue+0x38>
 8008f8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008f90:	3301      	adds	r3, #1
 8008f92:	d003      	beq.n	8008f9c <_fwalk_sglue+0x38>
 8008f94:	4629      	mov	r1, r5
 8008f96:	4638      	mov	r0, r7
 8008f98:	47c0      	blx	r8
 8008f9a:	4306      	orrs	r6, r0
 8008f9c:	3568      	adds	r5, #104	@ 0x68
 8008f9e:	e7e9      	b.n	8008f74 <_fwalk_sglue+0x10>

08008fa0 <iprintf>:
 8008fa0:	b40f      	push	{r0, r1, r2, r3}
 8008fa2:	b507      	push	{r0, r1, r2, lr}
 8008fa4:	4906      	ldr	r1, [pc, #24]	@ (8008fc0 <iprintf+0x20>)
 8008fa6:	ab04      	add	r3, sp, #16
 8008fa8:	6808      	ldr	r0, [r1, #0]
 8008faa:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fae:	6881      	ldr	r1, [r0, #8]
 8008fb0:	9301      	str	r3, [sp, #4]
 8008fb2:	f001 fc23 	bl	800a7fc <_vfiprintf_r>
 8008fb6:	b003      	add	sp, #12
 8008fb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008fbc:	b004      	add	sp, #16
 8008fbe:	4770      	bx	lr
 8008fc0:	20000c78 	.word	0x20000c78

08008fc4 <_puts_r>:
 8008fc4:	6a03      	ldr	r3, [r0, #32]
 8008fc6:	b570      	push	{r4, r5, r6, lr}
 8008fc8:	6884      	ldr	r4, [r0, #8]
 8008fca:	4605      	mov	r5, r0
 8008fcc:	460e      	mov	r6, r1
 8008fce:	b90b      	cbnz	r3, 8008fd4 <_puts_r+0x10>
 8008fd0:	f7ff ffb0 	bl	8008f34 <__sinit>
 8008fd4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008fd6:	07db      	lsls	r3, r3, #31
 8008fd8:	d405      	bmi.n	8008fe6 <_puts_r+0x22>
 8008fda:	89a3      	ldrh	r3, [r4, #12]
 8008fdc:	0598      	lsls	r0, r3, #22
 8008fde:	d402      	bmi.n	8008fe6 <_puts_r+0x22>
 8008fe0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008fe2:	f000 f9b2 	bl	800934a <__retarget_lock_acquire_recursive>
 8008fe6:	89a3      	ldrh	r3, [r4, #12]
 8008fe8:	0719      	lsls	r1, r3, #28
 8008fea:	d502      	bpl.n	8008ff2 <_puts_r+0x2e>
 8008fec:	6923      	ldr	r3, [r4, #16]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d135      	bne.n	800905e <_puts_r+0x9a>
 8008ff2:	4621      	mov	r1, r4
 8008ff4:	4628      	mov	r0, r5
 8008ff6:	f000 f8c5 	bl	8009184 <__swsetup_r>
 8008ffa:	b380      	cbz	r0, 800905e <_puts_r+0x9a>
 8008ffc:	f04f 35ff 	mov.w	r5, #4294967295
 8009000:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009002:	07da      	lsls	r2, r3, #31
 8009004:	d405      	bmi.n	8009012 <_puts_r+0x4e>
 8009006:	89a3      	ldrh	r3, [r4, #12]
 8009008:	059b      	lsls	r3, r3, #22
 800900a:	d402      	bmi.n	8009012 <_puts_r+0x4e>
 800900c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800900e:	f000 f99d 	bl	800934c <__retarget_lock_release_recursive>
 8009012:	4628      	mov	r0, r5
 8009014:	bd70      	pop	{r4, r5, r6, pc}
 8009016:	2b00      	cmp	r3, #0
 8009018:	da04      	bge.n	8009024 <_puts_r+0x60>
 800901a:	69a2      	ldr	r2, [r4, #24]
 800901c:	429a      	cmp	r2, r3
 800901e:	dc17      	bgt.n	8009050 <_puts_r+0x8c>
 8009020:	290a      	cmp	r1, #10
 8009022:	d015      	beq.n	8009050 <_puts_r+0x8c>
 8009024:	6823      	ldr	r3, [r4, #0]
 8009026:	1c5a      	adds	r2, r3, #1
 8009028:	6022      	str	r2, [r4, #0]
 800902a:	7019      	strb	r1, [r3, #0]
 800902c:	68a3      	ldr	r3, [r4, #8]
 800902e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009032:	3b01      	subs	r3, #1
 8009034:	60a3      	str	r3, [r4, #8]
 8009036:	2900      	cmp	r1, #0
 8009038:	d1ed      	bne.n	8009016 <_puts_r+0x52>
 800903a:	2b00      	cmp	r3, #0
 800903c:	da11      	bge.n	8009062 <_puts_r+0x9e>
 800903e:	4622      	mov	r2, r4
 8009040:	210a      	movs	r1, #10
 8009042:	4628      	mov	r0, r5
 8009044:	f000 f85f 	bl	8009106 <__swbuf_r>
 8009048:	3001      	adds	r0, #1
 800904a:	d0d7      	beq.n	8008ffc <_puts_r+0x38>
 800904c:	250a      	movs	r5, #10
 800904e:	e7d7      	b.n	8009000 <_puts_r+0x3c>
 8009050:	4622      	mov	r2, r4
 8009052:	4628      	mov	r0, r5
 8009054:	f000 f857 	bl	8009106 <__swbuf_r>
 8009058:	3001      	adds	r0, #1
 800905a:	d1e7      	bne.n	800902c <_puts_r+0x68>
 800905c:	e7ce      	b.n	8008ffc <_puts_r+0x38>
 800905e:	3e01      	subs	r6, #1
 8009060:	e7e4      	b.n	800902c <_puts_r+0x68>
 8009062:	6823      	ldr	r3, [r4, #0]
 8009064:	1c5a      	adds	r2, r3, #1
 8009066:	6022      	str	r2, [r4, #0]
 8009068:	220a      	movs	r2, #10
 800906a:	701a      	strb	r2, [r3, #0]
 800906c:	e7ee      	b.n	800904c <_puts_r+0x88>
	...

08009070 <puts>:
 8009070:	4b02      	ldr	r3, [pc, #8]	@ (800907c <puts+0xc>)
 8009072:	4601      	mov	r1, r0
 8009074:	6818      	ldr	r0, [r3, #0]
 8009076:	f7ff bfa5 	b.w	8008fc4 <_puts_r>
 800907a:	bf00      	nop
 800907c:	20000c78 	.word	0x20000c78

08009080 <__sread>:
 8009080:	b510      	push	{r4, lr}
 8009082:	460c      	mov	r4, r1
 8009084:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009088:	f000 f900 	bl	800928c <_read_r>
 800908c:	2800      	cmp	r0, #0
 800908e:	bfab      	itete	ge
 8009090:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009092:	89a3      	ldrhlt	r3, [r4, #12]
 8009094:	181b      	addge	r3, r3, r0
 8009096:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800909a:	bfac      	ite	ge
 800909c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800909e:	81a3      	strhlt	r3, [r4, #12]
 80090a0:	bd10      	pop	{r4, pc}

080090a2 <__swrite>:
 80090a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090a6:	461f      	mov	r7, r3
 80090a8:	898b      	ldrh	r3, [r1, #12]
 80090aa:	05db      	lsls	r3, r3, #23
 80090ac:	4605      	mov	r5, r0
 80090ae:	460c      	mov	r4, r1
 80090b0:	4616      	mov	r6, r2
 80090b2:	d505      	bpl.n	80090c0 <__swrite+0x1e>
 80090b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090b8:	2302      	movs	r3, #2
 80090ba:	2200      	movs	r2, #0
 80090bc:	f000 f8d4 	bl	8009268 <_lseek_r>
 80090c0:	89a3      	ldrh	r3, [r4, #12]
 80090c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80090c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80090ca:	81a3      	strh	r3, [r4, #12]
 80090cc:	4632      	mov	r2, r6
 80090ce:	463b      	mov	r3, r7
 80090d0:	4628      	mov	r0, r5
 80090d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090d6:	f000 b8fb 	b.w	80092d0 <_write_r>

080090da <__sseek>:
 80090da:	b510      	push	{r4, lr}
 80090dc:	460c      	mov	r4, r1
 80090de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090e2:	f000 f8c1 	bl	8009268 <_lseek_r>
 80090e6:	1c43      	adds	r3, r0, #1
 80090e8:	89a3      	ldrh	r3, [r4, #12]
 80090ea:	bf15      	itete	ne
 80090ec:	6560      	strne	r0, [r4, #84]	@ 0x54
 80090ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80090f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80090f6:	81a3      	strheq	r3, [r4, #12]
 80090f8:	bf18      	it	ne
 80090fa:	81a3      	strhne	r3, [r4, #12]
 80090fc:	bd10      	pop	{r4, pc}

080090fe <__sclose>:
 80090fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009102:	f000 b8a1 	b.w	8009248 <_close_r>

08009106 <__swbuf_r>:
 8009106:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009108:	460e      	mov	r6, r1
 800910a:	4614      	mov	r4, r2
 800910c:	4605      	mov	r5, r0
 800910e:	b118      	cbz	r0, 8009118 <__swbuf_r+0x12>
 8009110:	6a03      	ldr	r3, [r0, #32]
 8009112:	b90b      	cbnz	r3, 8009118 <__swbuf_r+0x12>
 8009114:	f7ff ff0e 	bl	8008f34 <__sinit>
 8009118:	69a3      	ldr	r3, [r4, #24]
 800911a:	60a3      	str	r3, [r4, #8]
 800911c:	89a3      	ldrh	r3, [r4, #12]
 800911e:	071a      	lsls	r2, r3, #28
 8009120:	d501      	bpl.n	8009126 <__swbuf_r+0x20>
 8009122:	6923      	ldr	r3, [r4, #16]
 8009124:	b943      	cbnz	r3, 8009138 <__swbuf_r+0x32>
 8009126:	4621      	mov	r1, r4
 8009128:	4628      	mov	r0, r5
 800912a:	f000 f82b 	bl	8009184 <__swsetup_r>
 800912e:	b118      	cbz	r0, 8009138 <__swbuf_r+0x32>
 8009130:	f04f 37ff 	mov.w	r7, #4294967295
 8009134:	4638      	mov	r0, r7
 8009136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009138:	6823      	ldr	r3, [r4, #0]
 800913a:	6922      	ldr	r2, [r4, #16]
 800913c:	1a98      	subs	r0, r3, r2
 800913e:	6963      	ldr	r3, [r4, #20]
 8009140:	b2f6      	uxtb	r6, r6
 8009142:	4283      	cmp	r3, r0
 8009144:	4637      	mov	r7, r6
 8009146:	dc05      	bgt.n	8009154 <__swbuf_r+0x4e>
 8009148:	4621      	mov	r1, r4
 800914a:	4628      	mov	r0, r5
 800914c:	f001 fcf2 	bl	800ab34 <_fflush_r>
 8009150:	2800      	cmp	r0, #0
 8009152:	d1ed      	bne.n	8009130 <__swbuf_r+0x2a>
 8009154:	68a3      	ldr	r3, [r4, #8]
 8009156:	3b01      	subs	r3, #1
 8009158:	60a3      	str	r3, [r4, #8]
 800915a:	6823      	ldr	r3, [r4, #0]
 800915c:	1c5a      	adds	r2, r3, #1
 800915e:	6022      	str	r2, [r4, #0]
 8009160:	701e      	strb	r6, [r3, #0]
 8009162:	6962      	ldr	r2, [r4, #20]
 8009164:	1c43      	adds	r3, r0, #1
 8009166:	429a      	cmp	r2, r3
 8009168:	d004      	beq.n	8009174 <__swbuf_r+0x6e>
 800916a:	89a3      	ldrh	r3, [r4, #12]
 800916c:	07db      	lsls	r3, r3, #31
 800916e:	d5e1      	bpl.n	8009134 <__swbuf_r+0x2e>
 8009170:	2e0a      	cmp	r6, #10
 8009172:	d1df      	bne.n	8009134 <__swbuf_r+0x2e>
 8009174:	4621      	mov	r1, r4
 8009176:	4628      	mov	r0, r5
 8009178:	f001 fcdc 	bl	800ab34 <_fflush_r>
 800917c:	2800      	cmp	r0, #0
 800917e:	d0d9      	beq.n	8009134 <__swbuf_r+0x2e>
 8009180:	e7d6      	b.n	8009130 <__swbuf_r+0x2a>
	...

08009184 <__swsetup_r>:
 8009184:	b538      	push	{r3, r4, r5, lr}
 8009186:	4b29      	ldr	r3, [pc, #164]	@ (800922c <__swsetup_r+0xa8>)
 8009188:	4605      	mov	r5, r0
 800918a:	6818      	ldr	r0, [r3, #0]
 800918c:	460c      	mov	r4, r1
 800918e:	b118      	cbz	r0, 8009198 <__swsetup_r+0x14>
 8009190:	6a03      	ldr	r3, [r0, #32]
 8009192:	b90b      	cbnz	r3, 8009198 <__swsetup_r+0x14>
 8009194:	f7ff fece 	bl	8008f34 <__sinit>
 8009198:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800919c:	0719      	lsls	r1, r3, #28
 800919e:	d422      	bmi.n	80091e6 <__swsetup_r+0x62>
 80091a0:	06da      	lsls	r2, r3, #27
 80091a2:	d407      	bmi.n	80091b4 <__swsetup_r+0x30>
 80091a4:	2209      	movs	r2, #9
 80091a6:	602a      	str	r2, [r5, #0]
 80091a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80091ac:	81a3      	strh	r3, [r4, #12]
 80091ae:	f04f 30ff 	mov.w	r0, #4294967295
 80091b2:	e033      	b.n	800921c <__swsetup_r+0x98>
 80091b4:	0758      	lsls	r0, r3, #29
 80091b6:	d512      	bpl.n	80091de <__swsetup_r+0x5a>
 80091b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80091ba:	b141      	cbz	r1, 80091ce <__swsetup_r+0x4a>
 80091bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80091c0:	4299      	cmp	r1, r3
 80091c2:	d002      	beq.n	80091ca <__swsetup_r+0x46>
 80091c4:	4628      	mov	r0, r5
 80091c6:	f000 ff2b 	bl	800a020 <_free_r>
 80091ca:	2300      	movs	r3, #0
 80091cc:	6363      	str	r3, [r4, #52]	@ 0x34
 80091ce:	89a3      	ldrh	r3, [r4, #12]
 80091d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80091d4:	81a3      	strh	r3, [r4, #12]
 80091d6:	2300      	movs	r3, #0
 80091d8:	6063      	str	r3, [r4, #4]
 80091da:	6923      	ldr	r3, [r4, #16]
 80091dc:	6023      	str	r3, [r4, #0]
 80091de:	89a3      	ldrh	r3, [r4, #12]
 80091e0:	f043 0308 	orr.w	r3, r3, #8
 80091e4:	81a3      	strh	r3, [r4, #12]
 80091e6:	6923      	ldr	r3, [r4, #16]
 80091e8:	b94b      	cbnz	r3, 80091fe <__swsetup_r+0x7a>
 80091ea:	89a3      	ldrh	r3, [r4, #12]
 80091ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80091f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80091f4:	d003      	beq.n	80091fe <__swsetup_r+0x7a>
 80091f6:	4621      	mov	r1, r4
 80091f8:	4628      	mov	r0, r5
 80091fa:	f001 fce9 	bl	800abd0 <__smakebuf_r>
 80091fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009202:	f013 0201 	ands.w	r2, r3, #1
 8009206:	d00a      	beq.n	800921e <__swsetup_r+0x9a>
 8009208:	2200      	movs	r2, #0
 800920a:	60a2      	str	r2, [r4, #8]
 800920c:	6962      	ldr	r2, [r4, #20]
 800920e:	4252      	negs	r2, r2
 8009210:	61a2      	str	r2, [r4, #24]
 8009212:	6922      	ldr	r2, [r4, #16]
 8009214:	b942      	cbnz	r2, 8009228 <__swsetup_r+0xa4>
 8009216:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800921a:	d1c5      	bne.n	80091a8 <__swsetup_r+0x24>
 800921c:	bd38      	pop	{r3, r4, r5, pc}
 800921e:	0799      	lsls	r1, r3, #30
 8009220:	bf58      	it	pl
 8009222:	6962      	ldrpl	r2, [r4, #20]
 8009224:	60a2      	str	r2, [r4, #8]
 8009226:	e7f4      	b.n	8009212 <__swsetup_r+0x8e>
 8009228:	2000      	movs	r0, #0
 800922a:	e7f7      	b.n	800921c <__swsetup_r+0x98>
 800922c:	20000c78 	.word	0x20000c78

08009230 <memset>:
 8009230:	4402      	add	r2, r0
 8009232:	4603      	mov	r3, r0
 8009234:	4293      	cmp	r3, r2
 8009236:	d100      	bne.n	800923a <memset+0xa>
 8009238:	4770      	bx	lr
 800923a:	f803 1b01 	strb.w	r1, [r3], #1
 800923e:	e7f9      	b.n	8009234 <memset+0x4>

08009240 <_localeconv_r>:
 8009240:	4800      	ldr	r0, [pc, #0]	@ (8009244 <_localeconv_r+0x4>)
 8009242:	4770      	bx	lr
 8009244:	20000db8 	.word	0x20000db8

08009248 <_close_r>:
 8009248:	b538      	push	{r3, r4, r5, lr}
 800924a:	4d06      	ldr	r5, [pc, #24]	@ (8009264 <_close_r+0x1c>)
 800924c:	2300      	movs	r3, #0
 800924e:	4604      	mov	r4, r0
 8009250:	4608      	mov	r0, r1
 8009252:	602b      	str	r3, [r5, #0]
 8009254:	f001 ff20 	bl	800b098 <_close>
 8009258:	1c43      	adds	r3, r0, #1
 800925a:	d102      	bne.n	8009262 <_close_r+0x1a>
 800925c:	682b      	ldr	r3, [r5, #0]
 800925e:	b103      	cbz	r3, 8009262 <_close_r+0x1a>
 8009260:	6023      	str	r3, [r4, #0]
 8009262:	bd38      	pop	{r3, r4, r5, pc}
 8009264:	20003770 	.word	0x20003770

08009268 <_lseek_r>:
 8009268:	b538      	push	{r3, r4, r5, lr}
 800926a:	4d07      	ldr	r5, [pc, #28]	@ (8009288 <_lseek_r+0x20>)
 800926c:	4604      	mov	r4, r0
 800926e:	4608      	mov	r0, r1
 8009270:	4611      	mov	r1, r2
 8009272:	2200      	movs	r2, #0
 8009274:	602a      	str	r2, [r5, #0]
 8009276:	461a      	mov	r2, r3
 8009278:	f001 ff36 	bl	800b0e8 <_lseek>
 800927c:	1c43      	adds	r3, r0, #1
 800927e:	d102      	bne.n	8009286 <_lseek_r+0x1e>
 8009280:	682b      	ldr	r3, [r5, #0]
 8009282:	b103      	cbz	r3, 8009286 <_lseek_r+0x1e>
 8009284:	6023      	str	r3, [r4, #0]
 8009286:	bd38      	pop	{r3, r4, r5, pc}
 8009288:	20003770 	.word	0x20003770

0800928c <_read_r>:
 800928c:	b538      	push	{r3, r4, r5, lr}
 800928e:	4d07      	ldr	r5, [pc, #28]	@ (80092ac <_read_r+0x20>)
 8009290:	4604      	mov	r4, r0
 8009292:	4608      	mov	r0, r1
 8009294:	4611      	mov	r1, r2
 8009296:	2200      	movs	r2, #0
 8009298:	602a      	str	r2, [r5, #0]
 800929a:	461a      	mov	r2, r3
 800929c:	f001 ff2c 	bl	800b0f8 <_read>
 80092a0:	1c43      	adds	r3, r0, #1
 80092a2:	d102      	bne.n	80092aa <_read_r+0x1e>
 80092a4:	682b      	ldr	r3, [r5, #0]
 80092a6:	b103      	cbz	r3, 80092aa <_read_r+0x1e>
 80092a8:	6023      	str	r3, [r4, #0]
 80092aa:	bd38      	pop	{r3, r4, r5, pc}
 80092ac:	20003770 	.word	0x20003770

080092b0 <_sbrk_r>:
 80092b0:	b538      	push	{r3, r4, r5, lr}
 80092b2:	4d06      	ldr	r5, [pc, #24]	@ (80092cc <_sbrk_r+0x1c>)
 80092b4:	2300      	movs	r3, #0
 80092b6:	4604      	mov	r4, r0
 80092b8:	4608      	mov	r0, r1
 80092ba:	602b      	str	r3, [r5, #0]
 80092bc:	f7f8 fbb2 	bl	8001a24 <_sbrk>
 80092c0:	1c43      	adds	r3, r0, #1
 80092c2:	d102      	bne.n	80092ca <_sbrk_r+0x1a>
 80092c4:	682b      	ldr	r3, [r5, #0]
 80092c6:	b103      	cbz	r3, 80092ca <_sbrk_r+0x1a>
 80092c8:	6023      	str	r3, [r4, #0]
 80092ca:	bd38      	pop	{r3, r4, r5, pc}
 80092cc:	20003770 	.word	0x20003770

080092d0 <_write_r>:
 80092d0:	b538      	push	{r3, r4, r5, lr}
 80092d2:	4d07      	ldr	r5, [pc, #28]	@ (80092f0 <_write_r+0x20>)
 80092d4:	4604      	mov	r4, r0
 80092d6:	4608      	mov	r0, r1
 80092d8:	4611      	mov	r1, r2
 80092da:	2200      	movs	r2, #0
 80092dc:	602a      	str	r2, [r5, #0]
 80092de:	461a      	mov	r2, r3
 80092e0:	f7f7 ff54 	bl	800118c <_write>
 80092e4:	1c43      	adds	r3, r0, #1
 80092e6:	d102      	bne.n	80092ee <_write_r+0x1e>
 80092e8:	682b      	ldr	r3, [r5, #0]
 80092ea:	b103      	cbz	r3, 80092ee <_write_r+0x1e>
 80092ec:	6023      	str	r3, [r4, #0]
 80092ee:	bd38      	pop	{r3, r4, r5, pc}
 80092f0:	20003770 	.word	0x20003770

080092f4 <__errno>:
 80092f4:	4b01      	ldr	r3, [pc, #4]	@ (80092fc <__errno+0x8>)
 80092f6:	6818      	ldr	r0, [r3, #0]
 80092f8:	4770      	bx	lr
 80092fa:	bf00      	nop
 80092fc:	20000c78 	.word	0x20000c78

08009300 <__libc_init_array>:
 8009300:	b570      	push	{r4, r5, r6, lr}
 8009302:	4d0d      	ldr	r5, [pc, #52]	@ (8009338 <__libc_init_array+0x38>)
 8009304:	4c0d      	ldr	r4, [pc, #52]	@ (800933c <__libc_init_array+0x3c>)
 8009306:	1b64      	subs	r4, r4, r5
 8009308:	10a4      	asrs	r4, r4, #2
 800930a:	2600      	movs	r6, #0
 800930c:	42a6      	cmp	r6, r4
 800930e:	d109      	bne.n	8009324 <__libc_init_array+0x24>
 8009310:	4d0b      	ldr	r5, [pc, #44]	@ (8009340 <__libc_init_array+0x40>)
 8009312:	4c0c      	ldr	r4, [pc, #48]	@ (8009344 <__libc_init_array+0x44>)
 8009314:	f001 fefa 	bl	800b10c <_init>
 8009318:	1b64      	subs	r4, r4, r5
 800931a:	10a4      	asrs	r4, r4, #2
 800931c:	2600      	movs	r6, #0
 800931e:	42a6      	cmp	r6, r4
 8009320:	d105      	bne.n	800932e <__libc_init_array+0x2e>
 8009322:	bd70      	pop	{r4, r5, r6, pc}
 8009324:	f855 3b04 	ldr.w	r3, [r5], #4
 8009328:	4798      	blx	r3
 800932a:	3601      	adds	r6, #1
 800932c:	e7ee      	b.n	800930c <__libc_init_array+0xc>
 800932e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009332:	4798      	blx	r3
 8009334:	3601      	adds	r6, #1
 8009336:	e7f2      	b.n	800931e <__libc_init_array+0x1e>
 8009338:	0807a8f4 	.word	0x0807a8f4
 800933c:	0807a8f4 	.word	0x0807a8f4
 8009340:	0807a8f4 	.word	0x0807a8f4
 8009344:	0807a8f8 	.word	0x0807a8f8

08009348 <__retarget_lock_init_recursive>:
 8009348:	4770      	bx	lr

0800934a <__retarget_lock_acquire_recursive>:
 800934a:	4770      	bx	lr

0800934c <__retarget_lock_release_recursive>:
 800934c:	4770      	bx	lr

0800934e <memcpy>:
 800934e:	440a      	add	r2, r1
 8009350:	4291      	cmp	r1, r2
 8009352:	f100 33ff 	add.w	r3, r0, #4294967295
 8009356:	d100      	bne.n	800935a <memcpy+0xc>
 8009358:	4770      	bx	lr
 800935a:	b510      	push	{r4, lr}
 800935c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009360:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009364:	4291      	cmp	r1, r2
 8009366:	d1f9      	bne.n	800935c <memcpy+0xe>
 8009368:	bd10      	pop	{r4, pc}

0800936a <quorem>:
 800936a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800936e:	6903      	ldr	r3, [r0, #16]
 8009370:	690c      	ldr	r4, [r1, #16]
 8009372:	42a3      	cmp	r3, r4
 8009374:	4607      	mov	r7, r0
 8009376:	db7e      	blt.n	8009476 <quorem+0x10c>
 8009378:	3c01      	subs	r4, #1
 800937a:	f101 0814 	add.w	r8, r1, #20
 800937e:	00a3      	lsls	r3, r4, #2
 8009380:	f100 0514 	add.w	r5, r0, #20
 8009384:	9300      	str	r3, [sp, #0]
 8009386:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800938a:	9301      	str	r3, [sp, #4]
 800938c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009390:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009394:	3301      	adds	r3, #1
 8009396:	429a      	cmp	r2, r3
 8009398:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800939c:	fbb2 f6f3 	udiv	r6, r2, r3
 80093a0:	d32e      	bcc.n	8009400 <quorem+0x96>
 80093a2:	f04f 0a00 	mov.w	sl, #0
 80093a6:	46c4      	mov	ip, r8
 80093a8:	46ae      	mov	lr, r5
 80093aa:	46d3      	mov	fp, sl
 80093ac:	f85c 3b04 	ldr.w	r3, [ip], #4
 80093b0:	b298      	uxth	r0, r3
 80093b2:	fb06 a000 	mla	r0, r6, r0, sl
 80093b6:	0c02      	lsrs	r2, r0, #16
 80093b8:	0c1b      	lsrs	r3, r3, #16
 80093ba:	fb06 2303 	mla	r3, r6, r3, r2
 80093be:	f8de 2000 	ldr.w	r2, [lr]
 80093c2:	b280      	uxth	r0, r0
 80093c4:	b292      	uxth	r2, r2
 80093c6:	1a12      	subs	r2, r2, r0
 80093c8:	445a      	add	r2, fp
 80093ca:	f8de 0000 	ldr.w	r0, [lr]
 80093ce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80093d2:	b29b      	uxth	r3, r3
 80093d4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80093d8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80093dc:	b292      	uxth	r2, r2
 80093de:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80093e2:	45e1      	cmp	r9, ip
 80093e4:	f84e 2b04 	str.w	r2, [lr], #4
 80093e8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80093ec:	d2de      	bcs.n	80093ac <quorem+0x42>
 80093ee:	9b00      	ldr	r3, [sp, #0]
 80093f0:	58eb      	ldr	r3, [r5, r3]
 80093f2:	b92b      	cbnz	r3, 8009400 <quorem+0x96>
 80093f4:	9b01      	ldr	r3, [sp, #4]
 80093f6:	3b04      	subs	r3, #4
 80093f8:	429d      	cmp	r5, r3
 80093fa:	461a      	mov	r2, r3
 80093fc:	d32f      	bcc.n	800945e <quorem+0xf4>
 80093fe:	613c      	str	r4, [r7, #16]
 8009400:	4638      	mov	r0, r7
 8009402:	f001 f8c9 	bl	800a598 <__mcmp>
 8009406:	2800      	cmp	r0, #0
 8009408:	db25      	blt.n	8009456 <quorem+0xec>
 800940a:	4629      	mov	r1, r5
 800940c:	2000      	movs	r0, #0
 800940e:	f858 2b04 	ldr.w	r2, [r8], #4
 8009412:	f8d1 c000 	ldr.w	ip, [r1]
 8009416:	fa1f fe82 	uxth.w	lr, r2
 800941a:	fa1f f38c 	uxth.w	r3, ip
 800941e:	eba3 030e 	sub.w	r3, r3, lr
 8009422:	4403      	add	r3, r0
 8009424:	0c12      	lsrs	r2, r2, #16
 8009426:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800942a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800942e:	b29b      	uxth	r3, r3
 8009430:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009434:	45c1      	cmp	r9, r8
 8009436:	f841 3b04 	str.w	r3, [r1], #4
 800943a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800943e:	d2e6      	bcs.n	800940e <quorem+0xa4>
 8009440:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009444:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009448:	b922      	cbnz	r2, 8009454 <quorem+0xea>
 800944a:	3b04      	subs	r3, #4
 800944c:	429d      	cmp	r5, r3
 800944e:	461a      	mov	r2, r3
 8009450:	d30b      	bcc.n	800946a <quorem+0x100>
 8009452:	613c      	str	r4, [r7, #16]
 8009454:	3601      	adds	r6, #1
 8009456:	4630      	mov	r0, r6
 8009458:	b003      	add	sp, #12
 800945a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800945e:	6812      	ldr	r2, [r2, #0]
 8009460:	3b04      	subs	r3, #4
 8009462:	2a00      	cmp	r2, #0
 8009464:	d1cb      	bne.n	80093fe <quorem+0x94>
 8009466:	3c01      	subs	r4, #1
 8009468:	e7c6      	b.n	80093f8 <quorem+0x8e>
 800946a:	6812      	ldr	r2, [r2, #0]
 800946c:	3b04      	subs	r3, #4
 800946e:	2a00      	cmp	r2, #0
 8009470:	d1ef      	bne.n	8009452 <quorem+0xe8>
 8009472:	3c01      	subs	r4, #1
 8009474:	e7ea      	b.n	800944c <quorem+0xe2>
 8009476:	2000      	movs	r0, #0
 8009478:	e7ee      	b.n	8009458 <quorem+0xee>
 800947a:	0000      	movs	r0, r0
 800947c:	0000      	movs	r0, r0
	...

08009480 <_dtoa_r>:
 8009480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009484:	69c7      	ldr	r7, [r0, #28]
 8009486:	b097      	sub	sp, #92	@ 0x5c
 8009488:	ed8d 0b04 	vstr	d0, [sp, #16]
 800948c:	ec55 4b10 	vmov	r4, r5, d0
 8009490:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8009492:	9107      	str	r1, [sp, #28]
 8009494:	4681      	mov	r9, r0
 8009496:	920c      	str	r2, [sp, #48]	@ 0x30
 8009498:	9311      	str	r3, [sp, #68]	@ 0x44
 800949a:	b97f      	cbnz	r7, 80094bc <_dtoa_r+0x3c>
 800949c:	2010      	movs	r0, #16
 800949e:	f7fe ffb1 	bl	8008404 <malloc>
 80094a2:	4602      	mov	r2, r0
 80094a4:	f8c9 001c 	str.w	r0, [r9, #28]
 80094a8:	b920      	cbnz	r0, 80094b4 <_dtoa_r+0x34>
 80094aa:	4ba9      	ldr	r3, [pc, #676]	@ (8009750 <_dtoa_r+0x2d0>)
 80094ac:	21ef      	movs	r1, #239	@ 0xef
 80094ae:	48a9      	ldr	r0, [pc, #676]	@ (8009754 <_dtoa_r+0x2d4>)
 80094b0:	f001 fbec 	bl	800ac8c <__assert_func>
 80094b4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80094b8:	6007      	str	r7, [r0, #0]
 80094ba:	60c7      	str	r7, [r0, #12]
 80094bc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80094c0:	6819      	ldr	r1, [r3, #0]
 80094c2:	b159      	cbz	r1, 80094dc <_dtoa_r+0x5c>
 80094c4:	685a      	ldr	r2, [r3, #4]
 80094c6:	604a      	str	r2, [r1, #4]
 80094c8:	2301      	movs	r3, #1
 80094ca:	4093      	lsls	r3, r2
 80094cc:	608b      	str	r3, [r1, #8]
 80094ce:	4648      	mov	r0, r9
 80094d0:	f000 fe30 	bl	800a134 <_Bfree>
 80094d4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80094d8:	2200      	movs	r2, #0
 80094da:	601a      	str	r2, [r3, #0]
 80094dc:	1e2b      	subs	r3, r5, #0
 80094de:	bfb9      	ittee	lt
 80094e0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80094e4:	9305      	strlt	r3, [sp, #20]
 80094e6:	2300      	movge	r3, #0
 80094e8:	6033      	strge	r3, [r6, #0]
 80094ea:	9f05      	ldr	r7, [sp, #20]
 80094ec:	4b9a      	ldr	r3, [pc, #616]	@ (8009758 <_dtoa_r+0x2d8>)
 80094ee:	bfbc      	itt	lt
 80094f0:	2201      	movlt	r2, #1
 80094f2:	6032      	strlt	r2, [r6, #0]
 80094f4:	43bb      	bics	r3, r7
 80094f6:	d112      	bne.n	800951e <_dtoa_r+0x9e>
 80094f8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80094fa:	f242 730f 	movw	r3, #9999	@ 0x270f
 80094fe:	6013      	str	r3, [r2, #0]
 8009500:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009504:	4323      	orrs	r3, r4
 8009506:	f000 855a 	beq.w	8009fbe <_dtoa_r+0xb3e>
 800950a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800950c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800976c <_dtoa_r+0x2ec>
 8009510:	2b00      	cmp	r3, #0
 8009512:	f000 855c 	beq.w	8009fce <_dtoa_r+0xb4e>
 8009516:	f10a 0303 	add.w	r3, sl, #3
 800951a:	f000 bd56 	b.w	8009fca <_dtoa_r+0xb4a>
 800951e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009522:	2200      	movs	r2, #0
 8009524:	ec51 0b17 	vmov	r0, r1, d7
 8009528:	2300      	movs	r3, #0
 800952a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800952e:	f7f7 facb 	bl	8000ac8 <__aeabi_dcmpeq>
 8009532:	4680      	mov	r8, r0
 8009534:	b158      	cbz	r0, 800954e <_dtoa_r+0xce>
 8009536:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009538:	2301      	movs	r3, #1
 800953a:	6013      	str	r3, [r2, #0]
 800953c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800953e:	b113      	cbz	r3, 8009546 <_dtoa_r+0xc6>
 8009540:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009542:	4b86      	ldr	r3, [pc, #536]	@ (800975c <_dtoa_r+0x2dc>)
 8009544:	6013      	str	r3, [r2, #0]
 8009546:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8009770 <_dtoa_r+0x2f0>
 800954a:	f000 bd40 	b.w	8009fce <_dtoa_r+0xb4e>
 800954e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8009552:	aa14      	add	r2, sp, #80	@ 0x50
 8009554:	a915      	add	r1, sp, #84	@ 0x54
 8009556:	4648      	mov	r0, r9
 8009558:	f001 f8ce 	bl	800a6f8 <__d2b>
 800955c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009560:	9002      	str	r0, [sp, #8]
 8009562:	2e00      	cmp	r6, #0
 8009564:	d078      	beq.n	8009658 <_dtoa_r+0x1d8>
 8009566:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009568:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800956c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009570:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009574:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009578:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800957c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009580:	4619      	mov	r1, r3
 8009582:	2200      	movs	r2, #0
 8009584:	4b76      	ldr	r3, [pc, #472]	@ (8009760 <_dtoa_r+0x2e0>)
 8009586:	f7f6 fe7f 	bl	8000288 <__aeabi_dsub>
 800958a:	a36b      	add	r3, pc, #428	@ (adr r3, 8009738 <_dtoa_r+0x2b8>)
 800958c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009590:	f7f7 f832 	bl	80005f8 <__aeabi_dmul>
 8009594:	a36a      	add	r3, pc, #424	@ (adr r3, 8009740 <_dtoa_r+0x2c0>)
 8009596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800959a:	f7f6 fe77 	bl	800028c <__adddf3>
 800959e:	4604      	mov	r4, r0
 80095a0:	4630      	mov	r0, r6
 80095a2:	460d      	mov	r5, r1
 80095a4:	f7f6 ffbe 	bl	8000524 <__aeabi_i2d>
 80095a8:	a367      	add	r3, pc, #412	@ (adr r3, 8009748 <_dtoa_r+0x2c8>)
 80095aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ae:	f7f7 f823 	bl	80005f8 <__aeabi_dmul>
 80095b2:	4602      	mov	r2, r0
 80095b4:	460b      	mov	r3, r1
 80095b6:	4620      	mov	r0, r4
 80095b8:	4629      	mov	r1, r5
 80095ba:	f7f6 fe67 	bl	800028c <__adddf3>
 80095be:	4604      	mov	r4, r0
 80095c0:	460d      	mov	r5, r1
 80095c2:	f7f7 fac9 	bl	8000b58 <__aeabi_d2iz>
 80095c6:	2200      	movs	r2, #0
 80095c8:	4607      	mov	r7, r0
 80095ca:	2300      	movs	r3, #0
 80095cc:	4620      	mov	r0, r4
 80095ce:	4629      	mov	r1, r5
 80095d0:	f7f7 fa84 	bl	8000adc <__aeabi_dcmplt>
 80095d4:	b140      	cbz	r0, 80095e8 <_dtoa_r+0x168>
 80095d6:	4638      	mov	r0, r7
 80095d8:	f7f6 ffa4 	bl	8000524 <__aeabi_i2d>
 80095dc:	4622      	mov	r2, r4
 80095de:	462b      	mov	r3, r5
 80095e0:	f7f7 fa72 	bl	8000ac8 <__aeabi_dcmpeq>
 80095e4:	b900      	cbnz	r0, 80095e8 <_dtoa_r+0x168>
 80095e6:	3f01      	subs	r7, #1
 80095e8:	2f16      	cmp	r7, #22
 80095ea:	d852      	bhi.n	8009692 <_dtoa_r+0x212>
 80095ec:	4b5d      	ldr	r3, [pc, #372]	@ (8009764 <_dtoa_r+0x2e4>)
 80095ee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80095f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095f6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80095fa:	f7f7 fa6f 	bl	8000adc <__aeabi_dcmplt>
 80095fe:	2800      	cmp	r0, #0
 8009600:	d049      	beq.n	8009696 <_dtoa_r+0x216>
 8009602:	3f01      	subs	r7, #1
 8009604:	2300      	movs	r3, #0
 8009606:	9310      	str	r3, [sp, #64]	@ 0x40
 8009608:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800960a:	1b9b      	subs	r3, r3, r6
 800960c:	1e5a      	subs	r2, r3, #1
 800960e:	bf45      	ittet	mi
 8009610:	f1c3 0301 	rsbmi	r3, r3, #1
 8009614:	9300      	strmi	r3, [sp, #0]
 8009616:	2300      	movpl	r3, #0
 8009618:	2300      	movmi	r3, #0
 800961a:	9206      	str	r2, [sp, #24]
 800961c:	bf54      	ite	pl
 800961e:	9300      	strpl	r3, [sp, #0]
 8009620:	9306      	strmi	r3, [sp, #24]
 8009622:	2f00      	cmp	r7, #0
 8009624:	db39      	blt.n	800969a <_dtoa_r+0x21a>
 8009626:	9b06      	ldr	r3, [sp, #24]
 8009628:	970d      	str	r7, [sp, #52]	@ 0x34
 800962a:	443b      	add	r3, r7
 800962c:	9306      	str	r3, [sp, #24]
 800962e:	2300      	movs	r3, #0
 8009630:	9308      	str	r3, [sp, #32]
 8009632:	9b07      	ldr	r3, [sp, #28]
 8009634:	2b09      	cmp	r3, #9
 8009636:	d863      	bhi.n	8009700 <_dtoa_r+0x280>
 8009638:	2b05      	cmp	r3, #5
 800963a:	bfc4      	itt	gt
 800963c:	3b04      	subgt	r3, #4
 800963e:	9307      	strgt	r3, [sp, #28]
 8009640:	9b07      	ldr	r3, [sp, #28]
 8009642:	f1a3 0302 	sub.w	r3, r3, #2
 8009646:	bfcc      	ite	gt
 8009648:	2400      	movgt	r4, #0
 800964a:	2401      	movle	r4, #1
 800964c:	2b03      	cmp	r3, #3
 800964e:	d863      	bhi.n	8009718 <_dtoa_r+0x298>
 8009650:	e8df f003 	tbb	[pc, r3]
 8009654:	2b375452 	.word	0x2b375452
 8009658:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800965c:	441e      	add	r6, r3
 800965e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009662:	2b20      	cmp	r3, #32
 8009664:	bfc1      	itttt	gt
 8009666:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800966a:	409f      	lslgt	r7, r3
 800966c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009670:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009674:	bfd6      	itet	le
 8009676:	f1c3 0320 	rsble	r3, r3, #32
 800967a:	ea47 0003 	orrgt.w	r0, r7, r3
 800967e:	fa04 f003 	lslle.w	r0, r4, r3
 8009682:	f7f6 ff3f 	bl	8000504 <__aeabi_ui2d>
 8009686:	2201      	movs	r2, #1
 8009688:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800968c:	3e01      	subs	r6, #1
 800968e:	9212      	str	r2, [sp, #72]	@ 0x48
 8009690:	e776      	b.n	8009580 <_dtoa_r+0x100>
 8009692:	2301      	movs	r3, #1
 8009694:	e7b7      	b.n	8009606 <_dtoa_r+0x186>
 8009696:	9010      	str	r0, [sp, #64]	@ 0x40
 8009698:	e7b6      	b.n	8009608 <_dtoa_r+0x188>
 800969a:	9b00      	ldr	r3, [sp, #0]
 800969c:	1bdb      	subs	r3, r3, r7
 800969e:	9300      	str	r3, [sp, #0]
 80096a0:	427b      	negs	r3, r7
 80096a2:	9308      	str	r3, [sp, #32]
 80096a4:	2300      	movs	r3, #0
 80096a6:	930d      	str	r3, [sp, #52]	@ 0x34
 80096a8:	e7c3      	b.n	8009632 <_dtoa_r+0x1b2>
 80096aa:	2301      	movs	r3, #1
 80096ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80096ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80096b0:	eb07 0b03 	add.w	fp, r7, r3
 80096b4:	f10b 0301 	add.w	r3, fp, #1
 80096b8:	2b01      	cmp	r3, #1
 80096ba:	9303      	str	r3, [sp, #12]
 80096bc:	bfb8      	it	lt
 80096be:	2301      	movlt	r3, #1
 80096c0:	e006      	b.n	80096d0 <_dtoa_r+0x250>
 80096c2:	2301      	movs	r3, #1
 80096c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80096c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	dd28      	ble.n	800971e <_dtoa_r+0x29e>
 80096cc:	469b      	mov	fp, r3
 80096ce:	9303      	str	r3, [sp, #12]
 80096d0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80096d4:	2100      	movs	r1, #0
 80096d6:	2204      	movs	r2, #4
 80096d8:	f102 0514 	add.w	r5, r2, #20
 80096dc:	429d      	cmp	r5, r3
 80096de:	d926      	bls.n	800972e <_dtoa_r+0x2ae>
 80096e0:	6041      	str	r1, [r0, #4]
 80096e2:	4648      	mov	r0, r9
 80096e4:	f000 fce6 	bl	800a0b4 <_Balloc>
 80096e8:	4682      	mov	sl, r0
 80096ea:	2800      	cmp	r0, #0
 80096ec:	d142      	bne.n	8009774 <_dtoa_r+0x2f4>
 80096ee:	4b1e      	ldr	r3, [pc, #120]	@ (8009768 <_dtoa_r+0x2e8>)
 80096f0:	4602      	mov	r2, r0
 80096f2:	f240 11af 	movw	r1, #431	@ 0x1af
 80096f6:	e6da      	b.n	80094ae <_dtoa_r+0x2e>
 80096f8:	2300      	movs	r3, #0
 80096fa:	e7e3      	b.n	80096c4 <_dtoa_r+0x244>
 80096fc:	2300      	movs	r3, #0
 80096fe:	e7d5      	b.n	80096ac <_dtoa_r+0x22c>
 8009700:	2401      	movs	r4, #1
 8009702:	2300      	movs	r3, #0
 8009704:	9307      	str	r3, [sp, #28]
 8009706:	9409      	str	r4, [sp, #36]	@ 0x24
 8009708:	f04f 3bff 	mov.w	fp, #4294967295
 800970c:	2200      	movs	r2, #0
 800970e:	f8cd b00c 	str.w	fp, [sp, #12]
 8009712:	2312      	movs	r3, #18
 8009714:	920c      	str	r2, [sp, #48]	@ 0x30
 8009716:	e7db      	b.n	80096d0 <_dtoa_r+0x250>
 8009718:	2301      	movs	r3, #1
 800971a:	9309      	str	r3, [sp, #36]	@ 0x24
 800971c:	e7f4      	b.n	8009708 <_dtoa_r+0x288>
 800971e:	f04f 0b01 	mov.w	fp, #1
 8009722:	f8cd b00c 	str.w	fp, [sp, #12]
 8009726:	465b      	mov	r3, fp
 8009728:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800972c:	e7d0      	b.n	80096d0 <_dtoa_r+0x250>
 800972e:	3101      	adds	r1, #1
 8009730:	0052      	lsls	r2, r2, #1
 8009732:	e7d1      	b.n	80096d8 <_dtoa_r+0x258>
 8009734:	f3af 8000 	nop.w
 8009738:	636f4361 	.word	0x636f4361
 800973c:	3fd287a7 	.word	0x3fd287a7
 8009740:	8b60c8b3 	.word	0x8b60c8b3
 8009744:	3fc68a28 	.word	0x3fc68a28
 8009748:	509f79fb 	.word	0x509f79fb
 800974c:	3fd34413 	.word	0x3fd34413
 8009750:	0807a5a1 	.word	0x0807a5a1
 8009754:	0807a5b8 	.word	0x0807a5b8
 8009758:	7ff00000 	.word	0x7ff00000
 800975c:	0807a571 	.word	0x0807a571
 8009760:	3ff80000 	.word	0x3ff80000
 8009764:	0807a708 	.word	0x0807a708
 8009768:	0807a610 	.word	0x0807a610
 800976c:	0807a59d 	.word	0x0807a59d
 8009770:	0807a570 	.word	0x0807a570
 8009774:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009778:	6018      	str	r0, [r3, #0]
 800977a:	9b03      	ldr	r3, [sp, #12]
 800977c:	2b0e      	cmp	r3, #14
 800977e:	f200 80a1 	bhi.w	80098c4 <_dtoa_r+0x444>
 8009782:	2c00      	cmp	r4, #0
 8009784:	f000 809e 	beq.w	80098c4 <_dtoa_r+0x444>
 8009788:	2f00      	cmp	r7, #0
 800978a:	dd33      	ble.n	80097f4 <_dtoa_r+0x374>
 800978c:	4b9c      	ldr	r3, [pc, #624]	@ (8009a00 <_dtoa_r+0x580>)
 800978e:	f007 020f 	and.w	r2, r7, #15
 8009792:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009796:	ed93 7b00 	vldr	d7, [r3]
 800979a:	05f8      	lsls	r0, r7, #23
 800979c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80097a0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80097a4:	d516      	bpl.n	80097d4 <_dtoa_r+0x354>
 80097a6:	4b97      	ldr	r3, [pc, #604]	@ (8009a04 <_dtoa_r+0x584>)
 80097a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80097ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80097b0:	f7f7 f84c 	bl	800084c <__aeabi_ddiv>
 80097b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80097b8:	f004 040f 	and.w	r4, r4, #15
 80097bc:	2603      	movs	r6, #3
 80097be:	4d91      	ldr	r5, [pc, #580]	@ (8009a04 <_dtoa_r+0x584>)
 80097c0:	b954      	cbnz	r4, 80097d8 <_dtoa_r+0x358>
 80097c2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80097c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80097ca:	f7f7 f83f 	bl	800084c <__aeabi_ddiv>
 80097ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80097d2:	e028      	b.n	8009826 <_dtoa_r+0x3a6>
 80097d4:	2602      	movs	r6, #2
 80097d6:	e7f2      	b.n	80097be <_dtoa_r+0x33e>
 80097d8:	07e1      	lsls	r1, r4, #31
 80097da:	d508      	bpl.n	80097ee <_dtoa_r+0x36e>
 80097dc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80097e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80097e4:	f7f6 ff08 	bl	80005f8 <__aeabi_dmul>
 80097e8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80097ec:	3601      	adds	r6, #1
 80097ee:	1064      	asrs	r4, r4, #1
 80097f0:	3508      	adds	r5, #8
 80097f2:	e7e5      	b.n	80097c0 <_dtoa_r+0x340>
 80097f4:	f000 80af 	beq.w	8009956 <_dtoa_r+0x4d6>
 80097f8:	427c      	negs	r4, r7
 80097fa:	4b81      	ldr	r3, [pc, #516]	@ (8009a00 <_dtoa_r+0x580>)
 80097fc:	4d81      	ldr	r5, [pc, #516]	@ (8009a04 <_dtoa_r+0x584>)
 80097fe:	f004 020f 	and.w	r2, r4, #15
 8009802:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800980a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800980e:	f7f6 fef3 	bl	80005f8 <__aeabi_dmul>
 8009812:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009816:	1124      	asrs	r4, r4, #4
 8009818:	2300      	movs	r3, #0
 800981a:	2602      	movs	r6, #2
 800981c:	2c00      	cmp	r4, #0
 800981e:	f040 808f 	bne.w	8009940 <_dtoa_r+0x4c0>
 8009822:	2b00      	cmp	r3, #0
 8009824:	d1d3      	bne.n	80097ce <_dtoa_r+0x34e>
 8009826:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009828:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800982c:	2b00      	cmp	r3, #0
 800982e:	f000 8094 	beq.w	800995a <_dtoa_r+0x4da>
 8009832:	4b75      	ldr	r3, [pc, #468]	@ (8009a08 <_dtoa_r+0x588>)
 8009834:	2200      	movs	r2, #0
 8009836:	4620      	mov	r0, r4
 8009838:	4629      	mov	r1, r5
 800983a:	f7f7 f94f 	bl	8000adc <__aeabi_dcmplt>
 800983e:	2800      	cmp	r0, #0
 8009840:	f000 808b 	beq.w	800995a <_dtoa_r+0x4da>
 8009844:	9b03      	ldr	r3, [sp, #12]
 8009846:	2b00      	cmp	r3, #0
 8009848:	f000 8087 	beq.w	800995a <_dtoa_r+0x4da>
 800984c:	f1bb 0f00 	cmp.w	fp, #0
 8009850:	dd34      	ble.n	80098bc <_dtoa_r+0x43c>
 8009852:	4620      	mov	r0, r4
 8009854:	4b6d      	ldr	r3, [pc, #436]	@ (8009a0c <_dtoa_r+0x58c>)
 8009856:	2200      	movs	r2, #0
 8009858:	4629      	mov	r1, r5
 800985a:	f7f6 fecd 	bl	80005f8 <__aeabi_dmul>
 800985e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009862:	f107 38ff 	add.w	r8, r7, #4294967295
 8009866:	3601      	adds	r6, #1
 8009868:	465c      	mov	r4, fp
 800986a:	4630      	mov	r0, r6
 800986c:	f7f6 fe5a 	bl	8000524 <__aeabi_i2d>
 8009870:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009874:	f7f6 fec0 	bl	80005f8 <__aeabi_dmul>
 8009878:	4b65      	ldr	r3, [pc, #404]	@ (8009a10 <_dtoa_r+0x590>)
 800987a:	2200      	movs	r2, #0
 800987c:	f7f6 fd06 	bl	800028c <__adddf3>
 8009880:	4605      	mov	r5, r0
 8009882:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009886:	2c00      	cmp	r4, #0
 8009888:	d16a      	bne.n	8009960 <_dtoa_r+0x4e0>
 800988a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800988e:	4b61      	ldr	r3, [pc, #388]	@ (8009a14 <_dtoa_r+0x594>)
 8009890:	2200      	movs	r2, #0
 8009892:	f7f6 fcf9 	bl	8000288 <__aeabi_dsub>
 8009896:	4602      	mov	r2, r0
 8009898:	460b      	mov	r3, r1
 800989a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800989e:	462a      	mov	r2, r5
 80098a0:	4633      	mov	r3, r6
 80098a2:	f7f7 f939 	bl	8000b18 <__aeabi_dcmpgt>
 80098a6:	2800      	cmp	r0, #0
 80098a8:	f040 8298 	bne.w	8009ddc <_dtoa_r+0x95c>
 80098ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80098b0:	462a      	mov	r2, r5
 80098b2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80098b6:	f7f7 f911 	bl	8000adc <__aeabi_dcmplt>
 80098ba:	bb38      	cbnz	r0, 800990c <_dtoa_r+0x48c>
 80098bc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80098c0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80098c4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	f2c0 8157 	blt.w	8009b7a <_dtoa_r+0x6fa>
 80098cc:	2f0e      	cmp	r7, #14
 80098ce:	f300 8154 	bgt.w	8009b7a <_dtoa_r+0x6fa>
 80098d2:	4b4b      	ldr	r3, [pc, #300]	@ (8009a00 <_dtoa_r+0x580>)
 80098d4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80098d8:	ed93 7b00 	vldr	d7, [r3]
 80098dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80098de:	2b00      	cmp	r3, #0
 80098e0:	ed8d 7b00 	vstr	d7, [sp]
 80098e4:	f280 80e5 	bge.w	8009ab2 <_dtoa_r+0x632>
 80098e8:	9b03      	ldr	r3, [sp, #12]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	f300 80e1 	bgt.w	8009ab2 <_dtoa_r+0x632>
 80098f0:	d10c      	bne.n	800990c <_dtoa_r+0x48c>
 80098f2:	4b48      	ldr	r3, [pc, #288]	@ (8009a14 <_dtoa_r+0x594>)
 80098f4:	2200      	movs	r2, #0
 80098f6:	ec51 0b17 	vmov	r0, r1, d7
 80098fa:	f7f6 fe7d 	bl	80005f8 <__aeabi_dmul>
 80098fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009902:	f7f7 f8ff 	bl	8000b04 <__aeabi_dcmpge>
 8009906:	2800      	cmp	r0, #0
 8009908:	f000 8266 	beq.w	8009dd8 <_dtoa_r+0x958>
 800990c:	2400      	movs	r4, #0
 800990e:	4625      	mov	r5, r4
 8009910:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009912:	4656      	mov	r6, sl
 8009914:	ea6f 0803 	mvn.w	r8, r3
 8009918:	2700      	movs	r7, #0
 800991a:	4621      	mov	r1, r4
 800991c:	4648      	mov	r0, r9
 800991e:	f000 fc09 	bl	800a134 <_Bfree>
 8009922:	2d00      	cmp	r5, #0
 8009924:	f000 80bd 	beq.w	8009aa2 <_dtoa_r+0x622>
 8009928:	b12f      	cbz	r7, 8009936 <_dtoa_r+0x4b6>
 800992a:	42af      	cmp	r7, r5
 800992c:	d003      	beq.n	8009936 <_dtoa_r+0x4b6>
 800992e:	4639      	mov	r1, r7
 8009930:	4648      	mov	r0, r9
 8009932:	f000 fbff 	bl	800a134 <_Bfree>
 8009936:	4629      	mov	r1, r5
 8009938:	4648      	mov	r0, r9
 800993a:	f000 fbfb 	bl	800a134 <_Bfree>
 800993e:	e0b0      	b.n	8009aa2 <_dtoa_r+0x622>
 8009940:	07e2      	lsls	r2, r4, #31
 8009942:	d505      	bpl.n	8009950 <_dtoa_r+0x4d0>
 8009944:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009948:	f7f6 fe56 	bl	80005f8 <__aeabi_dmul>
 800994c:	3601      	adds	r6, #1
 800994e:	2301      	movs	r3, #1
 8009950:	1064      	asrs	r4, r4, #1
 8009952:	3508      	adds	r5, #8
 8009954:	e762      	b.n	800981c <_dtoa_r+0x39c>
 8009956:	2602      	movs	r6, #2
 8009958:	e765      	b.n	8009826 <_dtoa_r+0x3a6>
 800995a:	9c03      	ldr	r4, [sp, #12]
 800995c:	46b8      	mov	r8, r7
 800995e:	e784      	b.n	800986a <_dtoa_r+0x3ea>
 8009960:	4b27      	ldr	r3, [pc, #156]	@ (8009a00 <_dtoa_r+0x580>)
 8009962:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009964:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009968:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800996c:	4454      	add	r4, sl
 800996e:	2900      	cmp	r1, #0
 8009970:	d054      	beq.n	8009a1c <_dtoa_r+0x59c>
 8009972:	4929      	ldr	r1, [pc, #164]	@ (8009a18 <_dtoa_r+0x598>)
 8009974:	2000      	movs	r0, #0
 8009976:	f7f6 ff69 	bl	800084c <__aeabi_ddiv>
 800997a:	4633      	mov	r3, r6
 800997c:	462a      	mov	r2, r5
 800997e:	f7f6 fc83 	bl	8000288 <__aeabi_dsub>
 8009982:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009986:	4656      	mov	r6, sl
 8009988:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800998c:	f7f7 f8e4 	bl	8000b58 <__aeabi_d2iz>
 8009990:	4605      	mov	r5, r0
 8009992:	f7f6 fdc7 	bl	8000524 <__aeabi_i2d>
 8009996:	4602      	mov	r2, r0
 8009998:	460b      	mov	r3, r1
 800999a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800999e:	f7f6 fc73 	bl	8000288 <__aeabi_dsub>
 80099a2:	3530      	adds	r5, #48	@ 0x30
 80099a4:	4602      	mov	r2, r0
 80099a6:	460b      	mov	r3, r1
 80099a8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80099ac:	f806 5b01 	strb.w	r5, [r6], #1
 80099b0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80099b4:	f7f7 f892 	bl	8000adc <__aeabi_dcmplt>
 80099b8:	2800      	cmp	r0, #0
 80099ba:	d172      	bne.n	8009aa2 <_dtoa_r+0x622>
 80099bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80099c0:	4911      	ldr	r1, [pc, #68]	@ (8009a08 <_dtoa_r+0x588>)
 80099c2:	2000      	movs	r0, #0
 80099c4:	f7f6 fc60 	bl	8000288 <__aeabi_dsub>
 80099c8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80099cc:	f7f7 f886 	bl	8000adc <__aeabi_dcmplt>
 80099d0:	2800      	cmp	r0, #0
 80099d2:	f040 80b4 	bne.w	8009b3e <_dtoa_r+0x6be>
 80099d6:	42a6      	cmp	r6, r4
 80099d8:	f43f af70 	beq.w	80098bc <_dtoa_r+0x43c>
 80099dc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80099e0:	4b0a      	ldr	r3, [pc, #40]	@ (8009a0c <_dtoa_r+0x58c>)
 80099e2:	2200      	movs	r2, #0
 80099e4:	f7f6 fe08 	bl	80005f8 <__aeabi_dmul>
 80099e8:	4b08      	ldr	r3, [pc, #32]	@ (8009a0c <_dtoa_r+0x58c>)
 80099ea:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80099ee:	2200      	movs	r2, #0
 80099f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80099f4:	f7f6 fe00 	bl	80005f8 <__aeabi_dmul>
 80099f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80099fc:	e7c4      	b.n	8009988 <_dtoa_r+0x508>
 80099fe:	bf00      	nop
 8009a00:	0807a708 	.word	0x0807a708
 8009a04:	0807a6e0 	.word	0x0807a6e0
 8009a08:	3ff00000 	.word	0x3ff00000
 8009a0c:	40240000 	.word	0x40240000
 8009a10:	401c0000 	.word	0x401c0000
 8009a14:	40140000 	.word	0x40140000
 8009a18:	3fe00000 	.word	0x3fe00000
 8009a1c:	4631      	mov	r1, r6
 8009a1e:	4628      	mov	r0, r5
 8009a20:	f7f6 fdea 	bl	80005f8 <__aeabi_dmul>
 8009a24:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009a28:	9413      	str	r4, [sp, #76]	@ 0x4c
 8009a2a:	4656      	mov	r6, sl
 8009a2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a30:	f7f7 f892 	bl	8000b58 <__aeabi_d2iz>
 8009a34:	4605      	mov	r5, r0
 8009a36:	f7f6 fd75 	bl	8000524 <__aeabi_i2d>
 8009a3a:	4602      	mov	r2, r0
 8009a3c:	460b      	mov	r3, r1
 8009a3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a42:	f7f6 fc21 	bl	8000288 <__aeabi_dsub>
 8009a46:	3530      	adds	r5, #48	@ 0x30
 8009a48:	f806 5b01 	strb.w	r5, [r6], #1
 8009a4c:	4602      	mov	r2, r0
 8009a4e:	460b      	mov	r3, r1
 8009a50:	42a6      	cmp	r6, r4
 8009a52:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009a56:	f04f 0200 	mov.w	r2, #0
 8009a5a:	d124      	bne.n	8009aa6 <_dtoa_r+0x626>
 8009a5c:	4baf      	ldr	r3, [pc, #700]	@ (8009d1c <_dtoa_r+0x89c>)
 8009a5e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009a62:	f7f6 fc13 	bl	800028c <__adddf3>
 8009a66:	4602      	mov	r2, r0
 8009a68:	460b      	mov	r3, r1
 8009a6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a6e:	f7f7 f853 	bl	8000b18 <__aeabi_dcmpgt>
 8009a72:	2800      	cmp	r0, #0
 8009a74:	d163      	bne.n	8009b3e <_dtoa_r+0x6be>
 8009a76:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009a7a:	49a8      	ldr	r1, [pc, #672]	@ (8009d1c <_dtoa_r+0x89c>)
 8009a7c:	2000      	movs	r0, #0
 8009a7e:	f7f6 fc03 	bl	8000288 <__aeabi_dsub>
 8009a82:	4602      	mov	r2, r0
 8009a84:	460b      	mov	r3, r1
 8009a86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a8a:	f7f7 f827 	bl	8000adc <__aeabi_dcmplt>
 8009a8e:	2800      	cmp	r0, #0
 8009a90:	f43f af14 	beq.w	80098bc <_dtoa_r+0x43c>
 8009a94:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009a96:	1e73      	subs	r3, r6, #1
 8009a98:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009a9a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009a9e:	2b30      	cmp	r3, #48	@ 0x30
 8009aa0:	d0f8      	beq.n	8009a94 <_dtoa_r+0x614>
 8009aa2:	4647      	mov	r7, r8
 8009aa4:	e03b      	b.n	8009b1e <_dtoa_r+0x69e>
 8009aa6:	4b9e      	ldr	r3, [pc, #632]	@ (8009d20 <_dtoa_r+0x8a0>)
 8009aa8:	f7f6 fda6 	bl	80005f8 <__aeabi_dmul>
 8009aac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009ab0:	e7bc      	b.n	8009a2c <_dtoa_r+0x5ac>
 8009ab2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009ab6:	4656      	mov	r6, sl
 8009ab8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009abc:	4620      	mov	r0, r4
 8009abe:	4629      	mov	r1, r5
 8009ac0:	f7f6 fec4 	bl	800084c <__aeabi_ddiv>
 8009ac4:	f7f7 f848 	bl	8000b58 <__aeabi_d2iz>
 8009ac8:	4680      	mov	r8, r0
 8009aca:	f7f6 fd2b 	bl	8000524 <__aeabi_i2d>
 8009ace:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ad2:	f7f6 fd91 	bl	80005f8 <__aeabi_dmul>
 8009ad6:	4602      	mov	r2, r0
 8009ad8:	460b      	mov	r3, r1
 8009ada:	4620      	mov	r0, r4
 8009adc:	4629      	mov	r1, r5
 8009ade:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009ae2:	f7f6 fbd1 	bl	8000288 <__aeabi_dsub>
 8009ae6:	f806 4b01 	strb.w	r4, [r6], #1
 8009aea:	9d03      	ldr	r5, [sp, #12]
 8009aec:	eba6 040a 	sub.w	r4, r6, sl
 8009af0:	42a5      	cmp	r5, r4
 8009af2:	4602      	mov	r2, r0
 8009af4:	460b      	mov	r3, r1
 8009af6:	d133      	bne.n	8009b60 <_dtoa_r+0x6e0>
 8009af8:	f7f6 fbc8 	bl	800028c <__adddf3>
 8009afc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b00:	4604      	mov	r4, r0
 8009b02:	460d      	mov	r5, r1
 8009b04:	f7f7 f808 	bl	8000b18 <__aeabi_dcmpgt>
 8009b08:	b9c0      	cbnz	r0, 8009b3c <_dtoa_r+0x6bc>
 8009b0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b0e:	4620      	mov	r0, r4
 8009b10:	4629      	mov	r1, r5
 8009b12:	f7f6 ffd9 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b16:	b110      	cbz	r0, 8009b1e <_dtoa_r+0x69e>
 8009b18:	f018 0f01 	tst.w	r8, #1
 8009b1c:	d10e      	bne.n	8009b3c <_dtoa_r+0x6bc>
 8009b1e:	9902      	ldr	r1, [sp, #8]
 8009b20:	4648      	mov	r0, r9
 8009b22:	f000 fb07 	bl	800a134 <_Bfree>
 8009b26:	2300      	movs	r3, #0
 8009b28:	7033      	strb	r3, [r6, #0]
 8009b2a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009b2c:	3701      	adds	r7, #1
 8009b2e:	601f      	str	r7, [r3, #0]
 8009b30:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	f000 824b 	beq.w	8009fce <_dtoa_r+0xb4e>
 8009b38:	601e      	str	r6, [r3, #0]
 8009b3a:	e248      	b.n	8009fce <_dtoa_r+0xb4e>
 8009b3c:	46b8      	mov	r8, r7
 8009b3e:	4633      	mov	r3, r6
 8009b40:	461e      	mov	r6, r3
 8009b42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009b46:	2a39      	cmp	r2, #57	@ 0x39
 8009b48:	d106      	bne.n	8009b58 <_dtoa_r+0x6d8>
 8009b4a:	459a      	cmp	sl, r3
 8009b4c:	d1f8      	bne.n	8009b40 <_dtoa_r+0x6c0>
 8009b4e:	2230      	movs	r2, #48	@ 0x30
 8009b50:	f108 0801 	add.w	r8, r8, #1
 8009b54:	f88a 2000 	strb.w	r2, [sl]
 8009b58:	781a      	ldrb	r2, [r3, #0]
 8009b5a:	3201      	adds	r2, #1
 8009b5c:	701a      	strb	r2, [r3, #0]
 8009b5e:	e7a0      	b.n	8009aa2 <_dtoa_r+0x622>
 8009b60:	4b6f      	ldr	r3, [pc, #444]	@ (8009d20 <_dtoa_r+0x8a0>)
 8009b62:	2200      	movs	r2, #0
 8009b64:	f7f6 fd48 	bl	80005f8 <__aeabi_dmul>
 8009b68:	2200      	movs	r2, #0
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	4604      	mov	r4, r0
 8009b6e:	460d      	mov	r5, r1
 8009b70:	f7f6 ffaa 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b74:	2800      	cmp	r0, #0
 8009b76:	d09f      	beq.n	8009ab8 <_dtoa_r+0x638>
 8009b78:	e7d1      	b.n	8009b1e <_dtoa_r+0x69e>
 8009b7a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b7c:	2a00      	cmp	r2, #0
 8009b7e:	f000 80ea 	beq.w	8009d56 <_dtoa_r+0x8d6>
 8009b82:	9a07      	ldr	r2, [sp, #28]
 8009b84:	2a01      	cmp	r2, #1
 8009b86:	f300 80cd 	bgt.w	8009d24 <_dtoa_r+0x8a4>
 8009b8a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009b8c:	2a00      	cmp	r2, #0
 8009b8e:	f000 80c1 	beq.w	8009d14 <_dtoa_r+0x894>
 8009b92:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009b96:	9c08      	ldr	r4, [sp, #32]
 8009b98:	9e00      	ldr	r6, [sp, #0]
 8009b9a:	9a00      	ldr	r2, [sp, #0]
 8009b9c:	441a      	add	r2, r3
 8009b9e:	9200      	str	r2, [sp, #0]
 8009ba0:	9a06      	ldr	r2, [sp, #24]
 8009ba2:	2101      	movs	r1, #1
 8009ba4:	441a      	add	r2, r3
 8009ba6:	4648      	mov	r0, r9
 8009ba8:	9206      	str	r2, [sp, #24]
 8009baa:	f000 fb77 	bl	800a29c <__i2b>
 8009bae:	4605      	mov	r5, r0
 8009bb0:	b166      	cbz	r6, 8009bcc <_dtoa_r+0x74c>
 8009bb2:	9b06      	ldr	r3, [sp, #24]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	dd09      	ble.n	8009bcc <_dtoa_r+0x74c>
 8009bb8:	42b3      	cmp	r3, r6
 8009bba:	9a00      	ldr	r2, [sp, #0]
 8009bbc:	bfa8      	it	ge
 8009bbe:	4633      	movge	r3, r6
 8009bc0:	1ad2      	subs	r2, r2, r3
 8009bc2:	9200      	str	r2, [sp, #0]
 8009bc4:	9a06      	ldr	r2, [sp, #24]
 8009bc6:	1af6      	subs	r6, r6, r3
 8009bc8:	1ad3      	subs	r3, r2, r3
 8009bca:	9306      	str	r3, [sp, #24]
 8009bcc:	9b08      	ldr	r3, [sp, #32]
 8009bce:	b30b      	cbz	r3, 8009c14 <_dtoa_r+0x794>
 8009bd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	f000 80c6 	beq.w	8009d64 <_dtoa_r+0x8e4>
 8009bd8:	2c00      	cmp	r4, #0
 8009bda:	f000 80c0 	beq.w	8009d5e <_dtoa_r+0x8de>
 8009bde:	4629      	mov	r1, r5
 8009be0:	4622      	mov	r2, r4
 8009be2:	4648      	mov	r0, r9
 8009be4:	f000 fc12 	bl	800a40c <__pow5mult>
 8009be8:	9a02      	ldr	r2, [sp, #8]
 8009bea:	4601      	mov	r1, r0
 8009bec:	4605      	mov	r5, r0
 8009bee:	4648      	mov	r0, r9
 8009bf0:	f000 fb6a 	bl	800a2c8 <__multiply>
 8009bf4:	9902      	ldr	r1, [sp, #8]
 8009bf6:	4680      	mov	r8, r0
 8009bf8:	4648      	mov	r0, r9
 8009bfa:	f000 fa9b 	bl	800a134 <_Bfree>
 8009bfe:	9b08      	ldr	r3, [sp, #32]
 8009c00:	1b1b      	subs	r3, r3, r4
 8009c02:	9308      	str	r3, [sp, #32]
 8009c04:	f000 80b1 	beq.w	8009d6a <_dtoa_r+0x8ea>
 8009c08:	9a08      	ldr	r2, [sp, #32]
 8009c0a:	4641      	mov	r1, r8
 8009c0c:	4648      	mov	r0, r9
 8009c0e:	f000 fbfd 	bl	800a40c <__pow5mult>
 8009c12:	9002      	str	r0, [sp, #8]
 8009c14:	2101      	movs	r1, #1
 8009c16:	4648      	mov	r0, r9
 8009c18:	f000 fb40 	bl	800a29c <__i2b>
 8009c1c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009c1e:	4604      	mov	r4, r0
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	f000 81d8 	beq.w	8009fd6 <_dtoa_r+0xb56>
 8009c26:	461a      	mov	r2, r3
 8009c28:	4601      	mov	r1, r0
 8009c2a:	4648      	mov	r0, r9
 8009c2c:	f000 fbee 	bl	800a40c <__pow5mult>
 8009c30:	9b07      	ldr	r3, [sp, #28]
 8009c32:	2b01      	cmp	r3, #1
 8009c34:	4604      	mov	r4, r0
 8009c36:	f300 809f 	bgt.w	8009d78 <_dtoa_r+0x8f8>
 8009c3a:	9b04      	ldr	r3, [sp, #16]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	f040 8097 	bne.w	8009d70 <_dtoa_r+0x8f0>
 8009c42:	9b05      	ldr	r3, [sp, #20]
 8009c44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	f040 8093 	bne.w	8009d74 <_dtoa_r+0x8f4>
 8009c4e:	9b05      	ldr	r3, [sp, #20]
 8009c50:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009c54:	0d1b      	lsrs	r3, r3, #20
 8009c56:	051b      	lsls	r3, r3, #20
 8009c58:	b133      	cbz	r3, 8009c68 <_dtoa_r+0x7e8>
 8009c5a:	9b00      	ldr	r3, [sp, #0]
 8009c5c:	3301      	adds	r3, #1
 8009c5e:	9300      	str	r3, [sp, #0]
 8009c60:	9b06      	ldr	r3, [sp, #24]
 8009c62:	3301      	adds	r3, #1
 8009c64:	9306      	str	r3, [sp, #24]
 8009c66:	2301      	movs	r3, #1
 8009c68:	9308      	str	r3, [sp, #32]
 8009c6a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	f000 81b8 	beq.w	8009fe2 <_dtoa_r+0xb62>
 8009c72:	6923      	ldr	r3, [r4, #16]
 8009c74:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009c78:	6918      	ldr	r0, [r3, #16]
 8009c7a:	f000 fac3 	bl	800a204 <__hi0bits>
 8009c7e:	f1c0 0020 	rsb	r0, r0, #32
 8009c82:	9b06      	ldr	r3, [sp, #24]
 8009c84:	4418      	add	r0, r3
 8009c86:	f010 001f 	ands.w	r0, r0, #31
 8009c8a:	f000 8082 	beq.w	8009d92 <_dtoa_r+0x912>
 8009c8e:	f1c0 0320 	rsb	r3, r0, #32
 8009c92:	2b04      	cmp	r3, #4
 8009c94:	dd73      	ble.n	8009d7e <_dtoa_r+0x8fe>
 8009c96:	9b00      	ldr	r3, [sp, #0]
 8009c98:	f1c0 001c 	rsb	r0, r0, #28
 8009c9c:	4403      	add	r3, r0
 8009c9e:	9300      	str	r3, [sp, #0]
 8009ca0:	9b06      	ldr	r3, [sp, #24]
 8009ca2:	4403      	add	r3, r0
 8009ca4:	4406      	add	r6, r0
 8009ca6:	9306      	str	r3, [sp, #24]
 8009ca8:	9b00      	ldr	r3, [sp, #0]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	dd05      	ble.n	8009cba <_dtoa_r+0x83a>
 8009cae:	9902      	ldr	r1, [sp, #8]
 8009cb0:	461a      	mov	r2, r3
 8009cb2:	4648      	mov	r0, r9
 8009cb4:	f000 fc04 	bl	800a4c0 <__lshift>
 8009cb8:	9002      	str	r0, [sp, #8]
 8009cba:	9b06      	ldr	r3, [sp, #24]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	dd05      	ble.n	8009ccc <_dtoa_r+0x84c>
 8009cc0:	4621      	mov	r1, r4
 8009cc2:	461a      	mov	r2, r3
 8009cc4:	4648      	mov	r0, r9
 8009cc6:	f000 fbfb 	bl	800a4c0 <__lshift>
 8009cca:	4604      	mov	r4, r0
 8009ccc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d061      	beq.n	8009d96 <_dtoa_r+0x916>
 8009cd2:	9802      	ldr	r0, [sp, #8]
 8009cd4:	4621      	mov	r1, r4
 8009cd6:	f000 fc5f 	bl	800a598 <__mcmp>
 8009cda:	2800      	cmp	r0, #0
 8009cdc:	da5b      	bge.n	8009d96 <_dtoa_r+0x916>
 8009cde:	2300      	movs	r3, #0
 8009ce0:	9902      	ldr	r1, [sp, #8]
 8009ce2:	220a      	movs	r2, #10
 8009ce4:	4648      	mov	r0, r9
 8009ce6:	f000 fa47 	bl	800a178 <__multadd>
 8009cea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cec:	9002      	str	r0, [sp, #8]
 8009cee:	f107 38ff 	add.w	r8, r7, #4294967295
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	f000 8177 	beq.w	8009fe6 <_dtoa_r+0xb66>
 8009cf8:	4629      	mov	r1, r5
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	220a      	movs	r2, #10
 8009cfe:	4648      	mov	r0, r9
 8009d00:	f000 fa3a 	bl	800a178 <__multadd>
 8009d04:	f1bb 0f00 	cmp.w	fp, #0
 8009d08:	4605      	mov	r5, r0
 8009d0a:	dc6f      	bgt.n	8009dec <_dtoa_r+0x96c>
 8009d0c:	9b07      	ldr	r3, [sp, #28]
 8009d0e:	2b02      	cmp	r3, #2
 8009d10:	dc49      	bgt.n	8009da6 <_dtoa_r+0x926>
 8009d12:	e06b      	b.n	8009dec <_dtoa_r+0x96c>
 8009d14:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009d16:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009d1a:	e73c      	b.n	8009b96 <_dtoa_r+0x716>
 8009d1c:	3fe00000 	.word	0x3fe00000
 8009d20:	40240000 	.word	0x40240000
 8009d24:	9b03      	ldr	r3, [sp, #12]
 8009d26:	1e5c      	subs	r4, r3, #1
 8009d28:	9b08      	ldr	r3, [sp, #32]
 8009d2a:	42a3      	cmp	r3, r4
 8009d2c:	db09      	blt.n	8009d42 <_dtoa_r+0x8c2>
 8009d2e:	1b1c      	subs	r4, r3, r4
 8009d30:	9b03      	ldr	r3, [sp, #12]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	f6bf af30 	bge.w	8009b98 <_dtoa_r+0x718>
 8009d38:	9b00      	ldr	r3, [sp, #0]
 8009d3a:	9a03      	ldr	r2, [sp, #12]
 8009d3c:	1a9e      	subs	r6, r3, r2
 8009d3e:	2300      	movs	r3, #0
 8009d40:	e72b      	b.n	8009b9a <_dtoa_r+0x71a>
 8009d42:	9b08      	ldr	r3, [sp, #32]
 8009d44:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009d46:	9408      	str	r4, [sp, #32]
 8009d48:	1ae3      	subs	r3, r4, r3
 8009d4a:	441a      	add	r2, r3
 8009d4c:	9e00      	ldr	r6, [sp, #0]
 8009d4e:	9b03      	ldr	r3, [sp, #12]
 8009d50:	920d      	str	r2, [sp, #52]	@ 0x34
 8009d52:	2400      	movs	r4, #0
 8009d54:	e721      	b.n	8009b9a <_dtoa_r+0x71a>
 8009d56:	9c08      	ldr	r4, [sp, #32]
 8009d58:	9e00      	ldr	r6, [sp, #0]
 8009d5a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8009d5c:	e728      	b.n	8009bb0 <_dtoa_r+0x730>
 8009d5e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009d62:	e751      	b.n	8009c08 <_dtoa_r+0x788>
 8009d64:	9a08      	ldr	r2, [sp, #32]
 8009d66:	9902      	ldr	r1, [sp, #8]
 8009d68:	e750      	b.n	8009c0c <_dtoa_r+0x78c>
 8009d6a:	f8cd 8008 	str.w	r8, [sp, #8]
 8009d6e:	e751      	b.n	8009c14 <_dtoa_r+0x794>
 8009d70:	2300      	movs	r3, #0
 8009d72:	e779      	b.n	8009c68 <_dtoa_r+0x7e8>
 8009d74:	9b04      	ldr	r3, [sp, #16]
 8009d76:	e777      	b.n	8009c68 <_dtoa_r+0x7e8>
 8009d78:	2300      	movs	r3, #0
 8009d7a:	9308      	str	r3, [sp, #32]
 8009d7c:	e779      	b.n	8009c72 <_dtoa_r+0x7f2>
 8009d7e:	d093      	beq.n	8009ca8 <_dtoa_r+0x828>
 8009d80:	9a00      	ldr	r2, [sp, #0]
 8009d82:	331c      	adds	r3, #28
 8009d84:	441a      	add	r2, r3
 8009d86:	9200      	str	r2, [sp, #0]
 8009d88:	9a06      	ldr	r2, [sp, #24]
 8009d8a:	441a      	add	r2, r3
 8009d8c:	441e      	add	r6, r3
 8009d8e:	9206      	str	r2, [sp, #24]
 8009d90:	e78a      	b.n	8009ca8 <_dtoa_r+0x828>
 8009d92:	4603      	mov	r3, r0
 8009d94:	e7f4      	b.n	8009d80 <_dtoa_r+0x900>
 8009d96:	9b03      	ldr	r3, [sp, #12]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	46b8      	mov	r8, r7
 8009d9c:	dc20      	bgt.n	8009de0 <_dtoa_r+0x960>
 8009d9e:	469b      	mov	fp, r3
 8009da0:	9b07      	ldr	r3, [sp, #28]
 8009da2:	2b02      	cmp	r3, #2
 8009da4:	dd1e      	ble.n	8009de4 <_dtoa_r+0x964>
 8009da6:	f1bb 0f00 	cmp.w	fp, #0
 8009daa:	f47f adb1 	bne.w	8009910 <_dtoa_r+0x490>
 8009dae:	4621      	mov	r1, r4
 8009db0:	465b      	mov	r3, fp
 8009db2:	2205      	movs	r2, #5
 8009db4:	4648      	mov	r0, r9
 8009db6:	f000 f9df 	bl	800a178 <__multadd>
 8009dba:	4601      	mov	r1, r0
 8009dbc:	4604      	mov	r4, r0
 8009dbe:	9802      	ldr	r0, [sp, #8]
 8009dc0:	f000 fbea 	bl	800a598 <__mcmp>
 8009dc4:	2800      	cmp	r0, #0
 8009dc6:	f77f ada3 	ble.w	8009910 <_dtoa_r+0x490>
 8009dca:	4656      	mov	r6, sl
 8009dcc:	2331      	movs	r3, #49	@ 0x31
 8009dce:	f806 3b01 	strb.w	r3, [r6], #1
 8009dd2:	f108 0801 	add.w	r8, r8, #1
 8009dd6:	e59f      	b.n	8009918 <_dtoa_r+0x498>
 8009dd8:	9c03      	ldr	r4, [sp, #12]
 8009dda:	46b8      	mov	r8, r7
 8009ddc:	4625      	mov	r5, r4
 8009dde:	e7f4      	b.n	8009dca <_dtoa_r+0x94a>
 8009de0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8009de4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	f000 8101 	beq.w	8009fee <_dtoa_r+0xb6e>
 8009dec:	2e00      	cmp	r6, #0
 8009dee:	dd05      	ble.n	8009dfc <_dtoa_r+0x97c>
 8009df0:	4629      	mov	r1, r5
 8009df2:	4632      	mov	r2, r6
 8009df4:	4648      	mov	r0, r9
 8009df6:	f000 fb63 	bl	800a4c0 <__lshift>
 8009dfa:	4605      	mov	r5, r0
 8009dfc:	9b08      	ldr	r3, [sp, #32]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d05c      	beq.n	8009ebc <_dtoa_r+0xa3c>
 8009e02:	6869      	ldr	r1, [r5, #4]
 8009e04:	4648      	mov	r0, r9
 8009e06:	f000 f955 	bl	800a0b4 <_Balloc>
 8009e0a:	4606      	mov	r6, r0
 8009e0c:	b928      	cbnz	r0, 8009e1a <_dtoa_r+0x99a>
 8009e0e:	4b82      	ldr	r3, [pc, #520]	@ (800a018 <_dtoa_r+0xb98>)
 8009e10:	4602      	mov	r2, r0
 8009e12:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009e16:	f7ff bb4a 	b.w	80094ae <_dtoa_r+0x2e>
 8009e1a:	692a      	ldr	r2, [r5, #16]
 8009e1c:	3202      	adds	r2, #2
 8009e1e:	0092      	lsls	r2, r2, #2
 8009e20:	f105 010c 	add.w	r1, r5, #12
 8009e24:	300c      	adds	r0, #12
 8009e26:	f7ff fa92 	bl	800934e <memcpy>
 8009e2a:	2201      	movs	r2, #1
 8009e2c:	4631      	mov	r1, r6
 8009e2e:	4648      	mov	r0, r9
 8009e30:	f000 fb46 	bl	800a4c0 <__lshift>
 8009e34:	f10a 0301 	add.w	r3, sl, #1
 8009e38:	9300      	str	r3, [sp, #0]
 8009e3a:	eb0a 030b 	add.w	r3, sl, fp
 8009e3e:	9308      	str	r3, [sp, #32]
 8009e40:	9b04      	ldr	r3, [sp, #16]
 8009e42:	f003 0301 	and.w	r3, r3, #1
 8009e46:	462f      	mov	r7, r5
 8009e48:	9306      	str	r3, [sp, #24]
 8009e4a:	4605      	mov	r5, r0
 8009e4c:	9b00      	ldr	r3, [sp, #0]
 8009e4e:	9802      	ldr	r0, [sp, #8]
 8009e50:	4621      	mov	r1, r4
 8009e52:	f103 3bff 	add.w	fp, r3, #4294967295
 8009e56:	f7ff fa88 	bl	800936a <quorem>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	3330      	adds	r3, #48	@ 0x30
 8009e5e:	9003      	str	r0, [sp, #12]
 8009e60:	4639      	mov	r1, r7
 8009e62:	9802      	ldr	r0, [sp, #8]
 8009e64:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e66:	f000 fb97 	bl	800a598 <__mcmp>
 8009e6a:	462a      	mov	r2, r5
 8009e6c:	9004      	str	r0, [sp, #16]
 8009e6e:	4621      	mov	r1, r4
 8009e70:	4648      	mov	r0, r9
 8009e72:	f000 fbad 	bl	800a5d0 <__mdiff>
 8009e76:	68c2      	ldr	r2, [r0, #12]
 8009e78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e7a:	4606      	mov	r6, r0
 8009e7c:	bb02      	cbnz	r2, 8009ec0 <_dtoa_r+0xa40>
 8009e7e:	4601      	mov	r1, r0
 8009e80:	9802      	ldr	r0, [sp, #8]
 8009e82:	f000 fb89 	bl	800a598 <__mcmp>
 8009e86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e88:	4602      	mov	r2, r0
 8009e8a:	4631      	mov	r1, r6
 8009e8c:	4648      	mov	r0, r9
 8009e8e:	920c      	str	r2, [sp, #48]	@ 0x30
 8009e90:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e92:	f000 f94f 	bl	800a134 <_Bfree>
 8009e96:	9b07      	ldr	r3, [sp, #28]
 8009e98:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009e9a:	9e00      	ldr	r6, [sp, #0]
 8009e9c:	ea42 0103 	orr.w	r1, r2, r3
 8009ea0:	9b06      	ldr	r3, [sp, #24]
 8009ea2:	4319      	orrs	r1, r3
 8009ea4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ea6:	d10d      	bne.n	8009ec4 <_dtoa_r+0xa44>
 8009ea8:	2b39      	cmp	r3, #57	@ 0x39
 8009eaa:	d027      	beq.n	8009efc <_dtoa_r+0xa7c>
 8009eac:	9a04      	ldr	r2, [sp, #16]
 8009eae:	2a00      	cmp	r2, #0
 8009eb0:	dd01      	ble.n	8009eb6 <_dtoa_r+0xa36>
 8009eb2:	9b03      	ldr	r3, [sp, #12]
 8009eb4:	3331      	adds	r3, #49	@ 0x31
 8009eb6:	f88b 3000 	strb.w	r3, [fp]
 8009eba:	e52e      	b.n	800991a <_dtoa_r+0x49a>
 8009ebc:	4628      	mov	r0, r5
 8009ebe:	e7b9      	b.n	8009e34 <_dtoa_r+0x9b4>
 8009ec0:	2201      	movs	r2, #1
 8009ec2:	e7e2      	b.n	8009e8a <_dtoa_r+0xa0a>
 8009ec4:	9904      	ldr	r1, [sp, #16]
 8009ec6:	2900      	cmp	r1, #0
 8009ec8:	db04      	blt.n	8009ed4 <_dtoa_r+0xa54>
 8009eca:	9807      	ldr	r0, [sp, #28]
 8009ecc:	4301      	orrs	r1, r0
 8009ece:	9806      	ldr	r0, [sp, #24]
 8009ed0:	4301      	orrs	r1, r0
 8009ed2:	d120      	bne.n	8009f16 <_dtoa_r+0xa96>
 8009ed4:	2a00      	cmp	r2, #0
 8009ed6:	ddee      	ble.n	8009eb6 <_dtoa_r+0xa36>
 8009ed8:	9902      	ldr	r1, [sp, #8]
 8009eda:	9300      	str	r3, [sp, #0]
 8009edc:	2201      	movs	r2, #1
 8009ede:	4648      	mov	r0, r9
 8009ee0:	f000 faee 	bl	800a4c0 <__lshift>
 8009ee4:	4621      	mov	r1, r4
 8009ee6:	9002      	str	r0, [sp, #8]
 8009ee8:	f000 fb56 	bl	800a598 <__mcmp>
 8009eec:	2800      	cmp	r0, #0
 8009eee:	9b00      	ldr	r3, [sp, #0]
 8009ef0:	dc02      	bgt.n	8009ef8 <_dtoa_r+0xa78>
 8009ef2:	d1e0      	bne.n	8009eb6 <_dtoa_r+0xa36>
 8009ef4:	07da      	lsls	r2, r3, #31
 8009ef6:	d5de      	bpl.n	8009eb6 <_dtoa_r+0xa36>
 8009ef8:	2b39      	cmp	r3, #57	@ 0x39
 8009efa:	d1da      	bne.n	8009eb2 <_dtoa_r+0xa32>
 8009efc:	2339      	movs	r3, #57	@ 0x39
 8009efe:	f88b 3000 	strb.w	r3, [fp]
 8009f02:	4633      	mov	r3, r6
 8009f04:	461e      	mov	r6, r3
 8009f06:	3b01      	subs	r3, #1
 8009f08:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009f0c:	2a39      	cmp	r2, #57	@ 0x39
 8009f0e:	d04e      	beq.n	8009fae <_dtoa_r+0xb2e>
 8009f10:	3201      	adds	r2, #1
 8009f12:	701a      	strb	r2, [r3, #0]
 8009f14:	e501      	b.n	800991a <_dtoa_r+0x49a>
 8009f16:	2a00      	cmp	r2, #0
 8009f18:	dd03      	ble.n	8009f22 <_dtoa_r+0xaa2>
 8009f1a:	2b39      	cmp	r3, #57	@ 0x39
 8009f1c:	d0ee      	beq.n	8009efc <_dtoa_r+0xa7c>
 8009f1e:	3301      	adds	r3, #1
 8009f20:	e7c9      	b.n	8009eb6 <_dtoa_r+0xa36>
 8009f22:	9a00      	ldr	r2, [sp, #0]
 8009f24:	9908      	ldr	r1, [sp, #32]
 8009f26:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009f2a:	428a      	cmp	r2, r1
 8009f2c:	d028      	beq.n	8009f80 <_dtoa_r+0xb00>
 8009f2e:	9902      	ldr	r1, [sp, #8]
 8009f30:	2300      	movs	r3, #0
 8009f32:	220a      	movs	r2, #10
 8009f34:	4648      	mov	r0, r9
 8009f36:	f000 f91f 	bl	800a178 <__multadd>
 8009f3a:	42af      	cmp	r7, r5
 8009f3c:	9002      	str	r0, [sp, #8]
 8009f3e:	f04f 0300 	mov.w	r3, #0
 8009f42:	f04f 020a 	mov.w	r2, #10
 8009f46:	4639      	mov	r1, r7
 8009f48:	4648      	mov	r0, r9
 8009f4a:	d107      	bne.n	8009f5c <_dtoa_r+0xadc>
 8009f4c:	f000 f914 	bl	800a178 <__multadd>
 8009f50:	4607      	mov	r7, r0
 8009f52:	4605      	mov	r5, r0
 8009f54:	9b00      	ldr	r3, [sp, #0]
 8009f56:	3301      	adds	r3, #1
 8009f58:	9300      	str	r3, [sp, #0]
 8009f5a:	e777      	b.n	8009e4c <_dtoa_r+0x9cc>
 8009f5c:	f000 f90c 	bl	800a178 <__multadd>
 8009f60:	4629      	mov	r1, r5
 8009f62:	4607      	mov	r7, r0
 8009f64:	2300      	movs	r3, #0
 8009f66:	220a      	movs	r2, #10
 8009f68:	4648      	mov	r0, r9
 8009f6a:	f000 f905 	bl	800a178 <__multadd>
 8009f6e:	4605      	mov	r5, r0
 8009f70:	e7f0      	b.n	8009f54 <_dtoa_r+0xad4>
 8009f72:	f1bb 0f00 	cmp.w	fp, #0
 8009f76:	bfcc      	ite	gt
 8009f78:	465e      	movgt	r6, fp
 8009f7a:	2601      	movle	r6, #1
 8009f7c:	4456      	add	r6, sl
 8009f7e:	2700      	movs	r7, #0
 8009f80:	9902      	ldr	r1, [sp, #8]
 8009f82:	9300      	str	r3, [sp, #0]
 8009f84:	2201      	movs	r2, #1
 8009f86:	4648      	mov	r0, r9
 8009f88:	f000 fa9a 	bl	800a4c0 <__lshift>
 8009f8c:	4621      	mov	r1, r4
 8009f8e:	9002      	str	r0, [sp, #8]
 8009f90:	f000 fb02 	bl	800a598 <__mcmp>
 8009f94:	2800      	cmp	r0, #0
 8009f96:	dcb4      	bgt.n	8009f02 <_dtoa_r+0xa82>
 8009f98:	d102      	bne.n	8009fa0 <_dtoa_r+0xb20>
 8009f9a:	9b00      	ldr	r3, [sp, #0]
 8009f9c:	07db      	lsls	r3, r3, #31
 8009f9e:	d4b0      	bmi.n	8009f02 <_dtoa_r+0xa82>
 8009fa0:	4633      	mov	r3, r6
 8009fa2:	461e      	mov	r6, r3
 8009fa4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009fa8:	2a30      	cmp	r2, #48	@ 0x30
 8009faa:	d0fa      	beq.n	8009fa2 <_dtoa_r+0xb22>
 8009fac:	e4b5      	b.n	800991a <_dtoa_r+0x49a>
 8009fae:	459a      	cmp	sl, r3
 8009fb0:	d1a8      	bne.n	8009f04 <_dtoa_r+0xa84>
 8009fb2:	2331      	movs	r3, #49	@ 0x31
 8009fb4:	f108 0801 	add.w	r8, r8, #1
 8009fb8:	f88a 3000 	strb.w	r3, [sl]
 8009fbc:	e4ad      	b.n	800991a <_dtoa_r+0x49a>
 8009fbe:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009fc0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800a01c <_dtoa_r+0xb9c>
 8009fc4:	b11b      	cbz	r3, 8009fce <_dtoa_r+0xb4e>
 8009fc6:	f10a 0308 	add.w	r3, sl, #8
 8009fca:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009fcc:	6013      	str	r3, [r2, #0]
 8009fce:	4650      	mov	r0, sl
 8009fd0:	b017      	add	sp, #92	@ 0x5c
 8009fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fd6:	9b07      	ldr	r3, [sp, #28]
 8009fd8:	2b01      	cmp	r3, #1
 8009fda:	f77f ae2e 	ble.w	8009c3a <_dtoa_r+0x7ba>
 8009fde:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009fe0:	9308      	str	r3, [sp, #32]
 8009fe2:	2001      	movs	r0, #1
 8009fe4:	e64d      	b.n	8009c82 <_dtoa_r+0x802>
 8009fe6:	f1bb 0f00 	cmp.w	fp, #0
 8009fea:	f77f aed9 	ble.w	8009da0 <_dtoa_r+0x920>
 8009fee:	4656      	mov	r6, sl
 8009ff0:	9802      	ldr	r0, [sp, #8]
 8009ff2:	4621      	mov	r1, r4
 8009ff4:	f7ff f9b9 	bl	800936a <quorem>
 8009ff8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8009ffc:	f806 3b01 	strb.w	r3, [r6], #1
 800a000:	eba6 020a 	sub.w	r2, r6, sl
 800a004:	4593      	cmp	fp, r2
 800a006:	ddb4      	ble.n	8009f72 <_dtoa_r+0xaf2>
 800a008:	9902      	ldr	r1, [sp, #8]
 800a00a:	2300      	movs	r3, #0
 800a00c:	220a      	movs	r2, #10
 800a00e:	4648      	mov	r0, r9
 800a010:	f000 f8b2 	bl	800a178 <__multadd>
 800a014:	9002      	str	r0, [sp, #8]
 800a016:	e7eb      	b.n	8009ff0 <_dtoa_r+0xb70>
 800a018:	0807a610 	.word	0x0807a610
 800a01c:	0807a594 	.word	0x0807a594

0800a020 <_free_r>:
 800a020:	b538      	push	{r3, r4, r5, lr}
 800a022:	4605      	mov	r5, r0
 800a024:	2900      	cmp	r1, #0
 800a026:	d041      	beq.n	800a0ac <_free_r+0x8c>
 800a028:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a02c:	1f0c      	subs	r4, r1, #4
 800a02e:	2b00      	cmp	r3, #0
 800a030:	bfb8      	it	lt
 800a032:	18e4      	addlt	r4, r4, r3
 800a034:	f7fe fa90 	bl	8008558 <__malloc_lock>
 800a038:	4a1d      	ldr	r2, [pc, #116]	@ (800a0b0 <_free_r+0x90>)
 800a03a:	6813      	ldr	r3, [r2, #0]
 800a03c:	b933      	cbnz	r3, 800a04c <_free_r+0x2c>
 800a03e:	6063      	str	r3, [r4, #4]
 800a040:	6014      	str	r4, [r2, #0]
 800a042:	4628      	mov	r0, r5
 800a044:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a048:	f7fe ba8c 	b.w	8008564 <__malloc_unlock>
 800a04c:	42a3      	cmp	r3, r4
 800a04e:	d908      	bls.n	800a062 <_free_r+0x42>
 800a050:	6820      	ldr	r0, [r4, #0]
 800a052:	1821      	adds	r1, r4, r0
 800a054:	428b      	cmp	r3, r1
 800a056:	bf01      	itttt	eq
 800a058:	6819      	ldreq	r1, [r3, #0]
 800a05a:	685b      	ldreq	r3, [r3, #4]
 800a05c:	1809      	addeq	r1, r1, r0
 800a05e:	6021      	streq	r1, [r4, #0]
 800a060:	e7ed      	b.n	800a03e <_free_r+0x1e>
 800a062:	461a      	mov	r2, r3
 800a064:	685b      	ldr	r3, [r3, #4]
 800a066:	b10b      	cbz	r3, 800a06c <_free_r+0x4c>
 800a068:	42a3      	cmp	r3, r4
 800a06a:	d9fa      	bls.n	800a062 <_free_r+0x42>
 800a06c:	6811      	ldr	r1, [r2, #0]
 800a06e:	1850      	adds	r0, r2, r1
 800a070:	42a0      	cmp	r0, r4
 800a072:	d10b      	bne.n	800a08c <_free_r+0x6c>
 800a074:	6820      	ldr	r0, [r4, #0]
 800a076:	4401      	add	r1, r0
 800a078:	1850      	adds	r0, r2, r1
 800a07a:	4283      	cmp	r3, r0
 800a07c:	6011      	str	r1, [r2, #0]
 800a07e:	d1e0      	bne.n	800a042 <_free_r+0x22>
 800a080:	6818      	ldr	r0, [r3, #0]
 800a082:	685b      	ldr	r3, [r3, #4]
 800a084:	6053      	str	r3, [r2, #4]
 800a086:	4408      	add	r0, r1
 800a088:	6010      	str	r0, [r2, #0]
 800a08a:	e7da      	b.n	800a042 <_free_r+0x22>
 800a08c:	d902      	bls.n	800a094 <_free_r+0x74>
 800a08e:	230c      	movs	r3, #12
 800a090:	602b      	str	r3, [r5, #0]
 800a092:	e7d6      	b.n	800a042 <_free_r+0x22>
 800a094:	6820      	ldr	r0, [r4, #0]
 800a096:	1821      	adds	r1, r4, r0
 800a098:	428b      	cmp	r3, r1
 800a09a:	bf04      	itt	eq
 800a09c:	6819      	ldreq	r1, [r3, #0]
 800a09e:	685b      	ldreq	r3, [r3, #4]
 800a0a0:	6063      	str	r3, [r4, #4]
 800a0a2:	bf04      	itt	eq
 800a0a4:	1809      	addeq	r1, r1, r0
 800a0a6:	6021      	streq	r1, [r4, #0]
 800a0a8:	6054      	str	r4, [r2, #4]
 800a0aa:	e7ca      	b.n	800a042 <_free_r+0x22>
 800a0ac:	bd38      	pop	{r3, r4, r5, pc}
 800a0ae:	bf00      	nop
 800a0b0:	20003630 	.word	0x20003630

0800a0b4 <_Balloc>:
 800a0b4:	b570      	push	{r4, r5, r6, lr}
 800a0b6:	69c6      	ldr	r6, [r0, #28]
 800a0b8:	4604      	mov	r4, r0
 800a0ba:	460d      	mov	r5, r1
 800a0bc:	b976      	cbnz	r6, 800a0dc <_Balloc+0x28>
 800a0be:	2010      	movs	r0, #16
 800a0c0:	f7fe f9a0 	bl	8008404 <malloc>
 800a0c4:	4602      	mov	r2, r0
 800a0c6:	61e0      	str	r0, [r4, #28]
 800a0c8:	b920      	cbnz	r0, 800a0d4 <_Balloc+0x20>
 800a0ca:	4b18      	ldr	r3, [pc, #96]	@ (800a12c <_Balloc+0x78>)
 800a0cc:	4818      	ldr	r0, [pc, #96]	@ (800a130 <_Balloc+0x7c>)
 800a0ce:	216b      	movs	r1, #107	@ 0x6b
 800a0d0:	f000 fddc 	bl	800ac8c <__assert_func>
 800a0d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a0d8:	6006      	str	r6, [r0, #0]
 800a0da:	60c6      	str	r6, [r0, #12]
 800a0dc:	69e6      	ldr	r6, [r4, #28]
 800a0de:	68f3      	ldr	r3, [r6, #12]
 800a0e0:	b183      	cbz	r3, 800a104 <_Balloc+0x50>
 800a0e2:	69e3      	ldr	r3, [r4, #28]
 800a0e4:	68db      	ldr	r3, [r3, #12]
 800a0e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a0ea:	b9b8      	cbnz	r0, 800a11c <_Balloc+0x68>
 800a0ec:	2101      	movs	r1, #1
 800a0ee:	fa01 f605 	lsl.w	r6, r1, r5
 800a0f2:	1d72      	adds	r2, r6, #5
 800a0f4:	0092      	lsls	r2, r2, #2
 800a0f6:	4620      	mov	r0, r4
 800a0f8:	f000 fde6 	bl	800acc8 <_calloc_r>
 800a0fc:	b160      	cbz	r0, 800a118 <_Balloc+0x64>
 800a0fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a102:	e00e      	b.n	800a122 <_Balloc+0x6e>
 800a104:	2221      	movs	r2, #33	@ 0x21
 800a106:	2104      	movs	r1, #4
 800a108:	4620      	mov	r0, r4
 800a10a:	f000 fddd 	bl	800acc8 <_calloc_r>
 800a10e:	69e3      	ldr	r3, [r4, #28]
 800a110:	60f0      	str	r0, [r6, #12]
 800a112:	68db      	ldr	r3, [r3, #12]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d1e4      	bne.n	800a0e2 <_Balloc+0x2e>
 800a118:	2000      	movs	r0, #0
 800a11a:	bd70      	pop	{r4, r5, r6, pc}
 800a11c:	6802      	ldr	r2, [r0, #0]
 800a11e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a122:	2300      	movs	r3, #0
 800a124:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a128:	e7f7      	b.n	800a11a <_Balloc+0x66>
 800a12a:	bf00      	nop
 800a12c:	0807a5a1 	.word	0x0807a5a1
 800a130:	0807a621 	.word	0x0807a621

0800a134 <_Bfree>:
 800a134:	b570      	push	{r4, r5, r6, lr}
 800a136:	69c6      	ldr	r6, [r0, #28]
 800a138:	4605      	mov	r5, r0
 800a13a:	460c      	mov	r4, r1
 800a13c:	b976      	cbnz	r6, 800a15c <_Bfree+0x28>
 800a13e:	2010      	movs	r0, #16
 800a140:	f7fe f960 	bl	8008404 <malloc>
 800a144:	4602      	mov	r2, r0
 800a146:	61e8      	str	r0, [r5, #28]
 800a148:	b920      	cbnz	r0, 800a154 <_Bfree+0x20>
 800a14a:	4b09      	ldr	r3, [pc, #36]	@ (800a170 <_Bfree+0x3c>)
 800a14c:	4809      	ldr	r0, [pc, #36]	@ (800a174 <_Bfree+0x40>)
 800a14e:	218f      	movs	r1, #143	@ 0x8f
 800a150:	f000 fd9c 	bl	800ac8c <__assert_func>
 800a154:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a158:	6006      	str	r6, [r0, #0]
 800a15a:	60c6      	str	r6, [r0, #12]
 800a15c:	b13c      	cbz	r4, 800a16e <_Bfree+0x3a>
 800a15e:	69eb      	ldr	r3, [r5, #28]
 800a160:	6862      	ldr	r2, [r4, #4]
 800a162:	68db      	ldr	r3, [r3, #12]
 800a164:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a168:	6021      	str	r1, [r4, #0]
 800a16a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a16e:	bd70      	pop	{r4, r5, r6, pc}
 800a170:	0807a5a1 	.word	0x0807a5a1
 800a174:	0807a621 	.word	0x0807a621

0800a178 <__multadd>:
 800a178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a17c:	690d      	ldr	r5, [r1, #16]
 800a17e:	4607      	mov	r7, r0
 800a180:	460c      	mov	r4, r1
 800a182:	461e      	mov	r6, r3
 800a184:	f101 0c14 	add.w	ip, r1, #20
 800a188:	2000      	movs	r0, #0
 800a18a:	f8dc 3000 	ldr.w	r3, [ip]
 800a18e:	b299      	uxth	r1, r3
 800a190:	fb02 6101 	mla	r1, r2, r1, r6
 800a194:	0c1e      	lsrs	r6, r3, #16
 800a196:	0c0b      	lsrs	r3, r1, #16
 800a198:	fb02 3306 	mla	r3, r2, r6, r3
 800a19c:	b289      	uxth	r1, r1
 800a19e:	3001      	adds	r0, #1
 800a1a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a1a4:	4285      	cmp	r5, r0
 800a1a6:	f84c 1b04 	str.w	r1, [ip], #4
 800a1aa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a1ae:	dcec      	bgt.n	800a18a <__multadd+0x12>
 800a1b0:	b30e      	cbz	r6, 800a1f6 <__multadd+0x7e>
 800a1b2:	68a3      	ldr	r3, [r4, #8]
 800a1b4:	42ab      	cmp	r3, r5
 800a1b6:	dc19      	bgt.n	800a1ec <__multadd+0x74>
 800a1b8:	6861      	ldr	r1, [r4, #4]
 800a1ba:	4638      	mov	r0, r7
 800a1bc:	3101      	adds	r1, #1
 800a1be:	f7ff ff79 	bl	800a0b4 <_Balloc>
 800a1c2:	4680      	mov	r8, r0
 800a1c4:	b928      	cbnz	r0, 800a1d2 <__multadd+0x5a>
 800a1c6:	4602      	mov	r2, r0
 800a1c8:	4b0c      	ldr	r3, [pc, #48]	@ (800a1fc <__multadd+0x84>)
 800a1ca:	480d      	ldr	r0, [pc, #52]	@ (800a200 <__multadd+0x88>)
 800a1cc:	21ba      	movs	r1, #186	@ 0xba
 800a1ce:	f000 fd5d 	bl	800ac8c <__assert_func>
 800a1d2:	6922      	ldr	r2, [r4, #16]
 800a1d4:	3202      	adds	r2, #2
 800a1d6:	f104 010c 	add.w	r1, r4, #12
 800a1da:	0092      	lsls	r2, r2, #2
 800a1dc:	300c      	adds	r0, #12
 800a1de:	f7ff f8b6 	bl	800934e <memcpy>
 800a1e2:	4621      	mov	r1, r4
 800a1e4:	4638      	mov	r0, r7
 800a1e6:	f7ff ffa5 	bl	800a134 <_Bfree>
 800a1ea:	4644      	mov	r4, r8
 800a1ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a1f0:	3501      	adds	r5, #1
 800a1f2:	615e      	str	r6, [r3, #20]
 800a1f4:	6125      	str	r5, [r4, #16]
 800a1f6:	4620      	mov	r0, r4
 800a1f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1fc:	0807a610 	.word	0x0807a610
 800a200:	0807a621 	.word	0x0807a621

0800a204 <__hi0bits>:
 800a204:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a208:	4603      	mov	r3, r0
 800a20a:	bf36      	itet	cc
 800a20c:	0403      	lslcc	r3, r0, #16
 800a20e:	2000      	movcs	r0, #0
 800a210:	2010      	movcc	r0, #16
 800a212:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a216:	bf3c      	itt	cc
 800a218:	021b      	lslcc	r3, r3, #8
 800a21a:	3008      	addcc	r0, #8
 800a21c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a220:	bf3c      	itt	cc
 800a222:	011b      	lslcc	r3, r3, #4
 800a224:	3004      	addcc	r0, #4
 800a226:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a22a:	bf3c      	itt	cc
 800a22c:	009b      	lslcc	r3, r3, #2
 800a22e:	3002      	addcc	r0, #2
 800a230:	2b00      	cmp	r3, #0
 800a232:	db05      	blt.n	800a240 <__hi0bits+0x3c>
 800a234:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a238:	f100 0001 	add.w	r0, r0, #1
 800a23c:	bf08      	it	eq
 800a23e:	2020      	moveq	r0, #32
 800a240:	4770      	bx	lr

0800a242 <__lo0bits>:
 800a242:	6803      	ldr	r3, [r0, #0]
 800a244:	4602      	mov	r2, r0
 800a246:	f013 0007 	ands.w	r0, r3, #7
 800a24a:	d00b      	beq.n	800a264 <__lo0bits+0x22>
 800a24c:	07d9      	lsls	r1, r3, #31
 800a24e:	d421      	bmi.n	800a294 <__lo0bits+0x52>
 800a250:	0798      	lsls	r0, r3, #30
 800a252:	bf49      	itett	mi
 800a254:	085b      	lsrmi	r3, r3, #1
 800a256:	089b      	lsrpl	r3, r3, #2
 800a258:	2001      	movmi	r0, #1
 800a25a:	6013      	strmi	r3, [r2, #0]
 800a25c:	bf5c      	itt	pl
 800a25e:	6013      	strpl	r3, [r2, #0]
 800a260:	2002      	movpl	r0, #2
 800a262:	4770      	bx	lr
 800a264:	b299      	uxth	r1, r3
 800a266:	b909      	cbnz	r1, 800a26c <__lo0bits+0x2a>
 800a268:	0c1b      	lsrs	r3, r3, #16
 800a26a:	2010      	movs	r0, #16
 800a26c:	b2d9      	uxtb	r1, r3
 800a26e:	b909      	cbnz	r1, 800a274 <__lo0bits+0x32>
 800a270:	3008      	adds	r0, #8
 800a272:	0a1b      	lsrs	r3, r3, #8
 800a274:	0719      	lsls	r1, r3, #28
 800a276:	bf04      	itt	eq
 800a278:	091b      	lsreq	r3, r3, #4
 800a27a:	3004      	addeq	r0, #4
 800a27c:	0799      	lsls	r1, r3, #30
 800a27e:	bf04      	itt	eq
 800a280:	089b      	lsreq	r3, r3, #2
 800a282:	3002      	addeq	r0, #2
 800a284:	07d9      	lsls	r1, r3, #31
 800a286:	d403      	bmi.n	800a290 <__lo0bits+0x4e>
 800a288:	085b      	lsrs	r3, r3, #1
 800a28a:	f100 0001 	add.w	r0, r0, #1
 800a28e:	d003      	beq.n	800a298 <__lo0bits+0x56>
 800a290:	6013      	str	r3, [r2, #0]
 800a292:	4770      	bx	lr
 800a294:	2000      	movs	r0, #0
 800a296:	4770      	bx	lr
 800a298:	2020      	movs	r0, #32
 800a29a:	4770      	bx	lr

0800a29c <__i2b>:
 800a29c:	b510      	push	{r4, lr}
 800a29e:	460c      	mov	r4, r1
 800a2a0:	2101      	movs	r1, #1
 800a2a2:	f7ff ff07 	bl	800a0b4 <_Balloc>
 800a2a6:	4602      	mov	r2, r0
 800a2a8:	b928      	cbnz	r0, 800a2b6 <__i2b+0x1a>
 800a2aa:	4b05      	ldr	r3, [pc, #20]	@ (800a2c0 <__i2b+0x24>)
 800a2ac:	4805      	ldr	r0, [pc, #20]	@ (800a2c4 <__i2b+0x28>)
 800a2ae:	f240 1145 	movw	r1, #325	@ 0x145
 800a2b2:	f000 fceb 	bl	800ac8c <__assert_func>
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	6144      	str	r4, [r0, #20]
 800a2ba:	6103      	str	r3, [r0, #16]
 800a2bc:	bd10      	pop	{r4, pc}
 800a2be:	bf00      	nop
 800a2c0:	0807a610 	.word	0x0807a610
 800a2c4:	0807a621 	.word	0x0807a621

0800a2c8 <__multiply>:
 800a2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2cc:	4617      	mov	r7, r2
 800a2ce:	690a      	ldr	r2, [r1, #16]
 800a2d0:	693b      	ldr	r3, [r7, #16]
 800a2d2:	429a      	cmp	r2, r3
 800a2d4:	bfa8      	it	ge
 800a2d6:	463b      	movge	r3, r7
 800a2d8:	4689      	mov	r9, r1
 800a2da:	bfa4      	itt	ge
 800a2dc:	460f      	movge	r7, r1
 800a2de:	4699      	movge	r9, r3
 800a2e0:	693d      	ldr	r5, [r7, #16]
 800a2e2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	6879      	ldr	r1, [r7, #4]
 800a2ea:	eb05 060a 	add.w	r6, r5, sl
 800a2ee:	42b3      	cmp	r3, r6
 800a2f0:	b085      	sub	sp, #20
 800a2f2:	bfb8      	it	lt
 800a2f4:	3101      	addlt	r1, #1
 800a2f6:	f7ff fedd 	bl	800a0b4 <_Balloc>
 800a2fa:	b930      	cbnz	r0, 800a30a <__multiply+0x42>
 800a2fc:	4602      	mov	r2, r0
 800a2fe:	4b41      	ldr	r3, [pc, #260]	@ (800a404 <__multiply+0x13c>)
 800a300:	4841      	ldr	r0, [pc, #260]	@ (800a408 <__multiply+0x140>)
 800a302:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a306:	f000 fcc1 	bl	800ac8c <__assert_func>
 800a30a:	f100 0414 	add.w	r4, r0, #20
 800a30e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a312:	4623      	mov	r3, r4
 800a314:	2200      	movs	r2, #0
 800a316:	4573      	cmp	r3, lr
 800a318:	d320      	bcc.n	800a35c <__multiply+0x94>
 800a31a:	f107 0814 	add.w	r8, r7, #20
 800a31e:	f109 0114 	add.w	r1, r9, #20
 800a322:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a326:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a32a:	9302      	str	r3, [sp, #8]
 800a32c:	1beb      	subs	r3, r5, r7
 800a32e:	3b15      	subs	r3, #21
 800a330:	f023 0303 	bic.w	r3, r3, #3
 800a334:	3304      	adds	r3, #4
 800a336:	3715      	adds	r7, #21
 800a338:	42bd      	cmp	r5, r7
 800a33a:	bf38      	it	cc
 800a33c:	2304      	movcc	r3, #4
 800a33e:	9301      	str	r3, [sp, #4]
 800a340:	9b02      	ldr	r3, [sp, #8]
 800a342:	9103      	str	r1, [sp, #12]
 800a344:	428b      	cmp	r3, r1
 800a346:	d80c      	bhi.n	800a362 <__multiply+0x9a>
 800a348:	2e00      	cmp	r6, #0
 800a34a:	dd03      	ble.n	800a354 <__multiply+0x8c>
 800a34c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a350:	2b00      	cmp	r3, #0
 800a352:	d055      	beq.n	800a400 <__multiply+0x138>
 800a354:	6106      	str	r6, [r0, #16]
 800a356:	b005      	add	sp, #20
 800a358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a35c:	f843 2b04 	str.w	r2, [r3], #4
 800a360:	e7d9      	b.n	800a316 <__multiply+0x4e>
 800a362:	f8b1 a000 	ldrh.w	sl, [r1]
 800a366:	f1ba 0f00 	cmp.w	sl, #0
 800a36a:	d01f      	beq.n	800a3ac <__multiply+0xe4>
 800a36c:	46c4      	mov	ip, r8
 800a36e:	46a1      	mov	r9, r4
 800a370:	2700      	movs	r7, #0
 800a372:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a376:	f8d9 3000 	ldr.w	r3, [r9]
 800a37a:	fa1f fb82 	uxth.w	fp, r2
 800a37e:	b29b      	uxth	r3, r3
 800a380:	fb0a 330b 	mla	r3, sl, fp, r3
 800a384:	443b      	add	r3, r7
 800a386:	f8d9 7000 	ldr.w	r7, [r9]
 800a38a:	0c12      	lsrs	r2, r2, #16
 800a38c:	0c3f      	lsrs	r7, r7, #16
 800a38e:	fb0a 7202 	mla	r2, sl, r2, r7
 800a392:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a396:	b29b      	uxth	r3, r3
 800a398:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a39c:	4565      	cmp	r5, ip
 800a39e:	f849 3b04 	str.w	r3, [r9], #4
 800a3a2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a3a6:	d8e4      	bhi.n	800a372 <__multiply+0xaa>
 800a3a8:	9b01      	ldr	r3, [sp, #4]
 800a3aa:	50e7      	str	r7, [r4, r3]
 800a3ac:	9b03      	ldr	r3, [sp, #12]
 800a3ae:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a3b2:	3104      	adds	r1, #4
 800a3b4:	f1b9 0f00 	cmp.w	r9, #0
 800a3b8:	d020      	beq.n	800a3fc <__multiply+0x134>
 800a3ba:	6823      	ldr	r3, [r4, #0]
 800a3bc:	4647      	mov	r7, r8
 800a3be:	46a4      	mov	ip, r4
 800a3c0:	f04f 0a00 	mov.w	sl, #0
 800a3c4:	f8b7 b000 	ldrh.w	fp, [r7]
 800a3c8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a3cc:	fb09 220b 	mla	r2, r9, fp, r2
 800a3d0:	4452      	add	r2, sl
 800a3d2:	b29b      	uxth	r3, r3
 800a3d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a3d8:	f84c 3b04 	str.w	r3, [ip], #4
 800a3dc:	f857 3b04 	ldr.w	r3, [r7], #4
 800a3e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a3e4:	f8bc 3000 	ldrh.w	r3, [ip]
 800a3e8:	fb09 330a 	mla	r3, r9, sl, r3
 800a3ec:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a3f0:	42bd      	cmp	r5, r7
 800a3f2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a3f6:	d8e5      	bhi.n	800a3c4 <__multiply+0xfc>
 800a3f8:	9a01      	ldr	r2, [sp, #4]
 800a3fa:	50a3      	str	r3, [r4, r2]
 800a3fc:	3404      	adds	r4, #4
 800a3fe:	e79f      	b.n	800a340 <__multiply+0x78>
 800a400:	3e01      	subs	r6, #1
 800a402:	e7a1      	b.n	800a348 <__multiply+0x80>
 800a404:	0807a610 	.word	0x0807a610
 800a408:	0807a621 	.word	0x0807a621

0800a40c <__pow5mult>:
 800a40c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a410:	4615      	mov	r5, r2
 800a412:	f012 0203 	ands.w	r2, r2, #3
 800a416:	4607      	mov	r7, r0
 800a418:	460e      	mov	r6, r1
 800a41a:	d007      	beq.n	800a42c <__pow5mult+0x20>
 800a41c:	4c25      	ldr	r4, [pc, #148]	@ (800a4b4 <__pow5mult+0xa8>)
 800a41e:	3a01      	subs	r2, #1
 800a420:	2300      	movs	r3, #0
 800a422:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a426:	f7ff fea7 	bl	800a178 <__multadd>
 800a42a:	4606      	mov	r6, r0
 800a42c:	10ad      	asrs	r5, r5, #2
 800a42e:	d03d      	beq.n	800a4ac <__pow5mult+0xa0>
 800a430:	69fc      	ldr	r4, [r7, #28]
 800a432:	b97c      	cbnz	r4, 800a454 <__pow5mult+0x48>
 800a434:	2010      	movs	r0, #16
 800a436:	f7fd ffe5 	bl	8008404 <malloc>
 800a43a:	4602      	mov	r2, r0
 800a43c:	61f8      	str	r0, [r7, #28]
 800a43e:	b928      	cbnz	r0, 800a44c <__pow5mult+0x40>
 800a440:	4b1d      	ldr	r3, [pc, #116]	@ (800a4b8 <__pow5mult+0xac>)
 800a442:	481e      	ldr	r0, [pc, #120]	@ (800a4bc <__pow5mult+0xb0>)
 800a444:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a448:	f000 fc20 	bl	800ac8c <__assert_func>
 800a44c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a450:	6004      	str	r4, [r0, #0]
 800a452:	60c4      	str	r4, [r0, #12]
 800a454:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a458:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a45c:	b94c      	cbnz	r4, 800a472 <__pow5mult+0x66>
 800a45e:	f240 2171 	movw	r1, #625	@ 0x271
 800a462:	4638      	mov	r0, r7
 800a464:	f7ff ff1a 	bl	800a29c <__i2b>
 800a468:	2300      	movs	r3, #0
 800a46a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a46e:	4604      	mov	r4, r0
 800a470:	6003      	str	r3, [r0, #0]
 800a472:	f04f 0900 	mov.w	r9, #0
 800a476:	07eb      	lsls	r3, r5, #31
 800a478:	d50a      	bpl.n	800a490 <__pow5mult+0x84>
 800a47a:	4631      	mov	r1, r6
 800a47c:	4622      	mov	r2, r4
 800a47e:	4638      	mov	r0, r7
 800a480:	f7ff ff22 	bl	800a2c8 <__multiply>
 800a484:	4631      	mov	r1, r6
 800a486:	4680      	mov	r8, r0
 800a488:	4638      	mov	r0, r7
 800a48a:	f7ff fe53 	bl	800a134 <_Bfree>
 800a48e:	4646      	mov	r6, r8
 800a490:	106d      	asrs	r5, r5, #1
 800a492:	d00b      	beq.n	800a4ac <__pow5mult+0xa0>
 800a494:	6820      	ldr	r0, [r4, #0]
 800a496:	b938      	cbnz	r0, 800a4a8 <__pow5mult+0x9c>
 800a498:	4622      	mov	r2, r4
 800a49a:	4621      	mov	r1, r4
 800a49c:	4638      	mov	r0, r7
 800a49e:	f7ff ff13 	bl	800a2c8 <__multiply>
 800a4a2:	6020      	str	r0, [r4, #0]
 800a4a4:	f8c0 9000 	str.w	r9, [r0]
 800a4a8:	4604      	mov	r4, r0
 800a4aa:	e7e4      	b.n	800a476 <__pow5mult+0x6a>
 800a4ac:	4630      	mov	r0, r6
 800a4ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4b2:	bf00      	nop
 800a4b4:	0807a6d4 	.word	0x0807a6d4
 800a4b8:	0807a5a1 	.word	0x0807a5a1
 800a4bc:	0807a621 	.word	0x0807a621

0800a4c0 <__lshift>:
 800a4c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4c4:	460c      	mov	r4, r1
 800a4c6:	6849      	ldr	r1, [r1, #4]
 800a4c8:	6923      	ldr	r3, [r4, #16]
 800a4ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a4ce:	68a3      	ldr	r3, [r4, #8]
 800a4d0:	4607      	mov	r7, r0
 800a4d2:	4691      	mov	r9, r2
 800a4d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a4d8:	f108 0601 	add.w	r6, r8, #1
 800a4dc:	42b3      	cmp	r3, r6
 800a4de:	db0b      	blt.n	800a4f8 <__lshift+0x38>
 800a4e0:	4638      	mov	r0, r7
 800a4e2:	f7ff fde7 	bl	800a0b4 <_Balloc>
 800a4e6:	4605      	mov	r5, r0
 800a4e8:	b948      	cbnz	r0, 800a4fe <__lshift+0x3e>
 800a4ea:	4602      	mov	r2, r0
 800a4ec:	4b28      	ldr	r3, [pc, #160]	@ (800a590 <__lshift+0xd0>)
 800a4ee:	4829      	ldr	r0, [pc, #164]	@ (800a594 <__lshift+0xd4>)
 800a4f0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a4f4:	f000 fbca 	bl	800ac8c <__assert_func>
 800a4f8:	3101      	adds	r1, #1
 800a4fa:	005b      	lsls	r3, r3, #1
 800a4fc:	e7ee      	b.n	800a4dc <__lshift+0x1c>
 800a4fe:	2300      	movs	r3, #0
 800a500:	f100 0114 	add.w	r1, r0, #20
 800a504:	f100 0210 	add.w	r2, r0, #16
 800a508:	4618      	mov	r0, r3
 800a50a:	4553      	cmp	r3, sl
 800a50c:	db33      	blt.n	800a576 <__lshift+0xb6>
 800a50e:	6920      	ldr	r0, [r4, #16]
 800a510:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a514:	f104 0314 	add.w	r3, r4, #20
 800a518:	f019 091f 	ands.w	r9, r9, #31
 800a51c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a520:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a524:	d02b      	beq.n	800a57e <__lshift+0xbe>
 800a526:	f1c9 0e20 	rsb	lr, r9, #32
 800a52a:	468a      	mov	sl, r1
 800a52c:	2200      	movs	r2, #0
 800a52e:	6818      	ldr	r0, [r3, #0]
 800a530:	fa00 f009 	lsl.w	r0, r0, r9
 800a534:	4310      	orrs	r0, r2
 800a536:	f84a 0b04 	str.w	r0, [sl], #4
 800a53a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a53e:	459c      	cmp	ip, r3
 800a540:	fa22 f20e 	lsr.w	r2, r2, lr
 800a544:	d8f3      	bhi.n	800a52e <__lshift+0x6e>
 800a546:	ebac 0304 	sub.w	r3, ip, r4
 800a54a:	3b15      	subs	r3, #21
 800a54c:	f023 0303 	bic.w	r3, r3, #3
 800a550:	3304      	adds	r3, #4
 800a552:	f104 0015 	add.w	r0, r4, #21
 800a556:	4560      	cmp	r0, ip
 800a558:	bf88      	it	hi
 800a55a:	2304      	movhi	r3, #4
 800a55c:	50ca      	str	r2, [r1, r3]
 800a55e:	b10a      	cbz	r2, 800a564 <__lshift+0xa4>
 800a560:	f108 0602 	add.w	r6, r8, #2
 800a564:	3e01      	subs	r6, #1
 800a566:	4638      	mov	r0, r7
 800a568:	612e      	str	r6, [r5, #16]
 800a56a:	4621      	mov	r1, r4
 800a56c:	f7ff fde2 	bl	800a134 <_Bfree>
 800a570:	4628      	mov	r0, r5
 800a572:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a576:	f842 0f04 	str.w	r0, [r2, #4]!
 800a57a:	3301      	adds	r3, #1
 800a57c:	e7c5      	b.n	800a50a <__lshift+0x4a>
 800a57e:	3904      	subs	r1, #4
 800a580:	f853 2b04 	ldr.w	r2, [r3], #4
 800a584:	f841 2f04 	str.w	r2, [r1, #4]!
 800a588:	459c      	cmp	ip, r3
 800a58a:	d8f9      	bhi.n	800a580 <__lshift+0xc0>
 800a58c:	e7ea      	b.n	800a564 <__lshift+0xa4>
 800a58e:	bf00      	nop
 800a590:	0807a610 	.word	0x0807a610
 800a594:	0807a621 	.word	0x0807a621

0800a598 <__mcmp>:
 800a598:	690a      	ldr	r2, [r1, #16]
 800a59a:	4603      	mov	r3, r0
 800a59c:	6900      	ldr	r0, [r0, #16]
 800a59e:	1a80      	subs	r0, r0, r2
 800a5a0:	b530      	push	{r4, r5, lr}
 800a5a2:	d10e      	bne.n	800a5c2 <__mcmp+0x2a>
 800a5a4:	3314      	adds	r3, #20
 800a5a6:	3114      	adds	r1, #20
 800a5a8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a5ac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a5b0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a5b4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a5b8:	4295      	cmp	r5, r2
 800a5ba:	d003      	beq.n	800a5c4 <__mcmp+0x2c>
 800a5bc:	d205      	bcs.n	800a5ca <__mcmp+0x32>
 800a5be:	f04f 30ff 	mov.w	r0, #4294967295
 800a5c2:	bd30      	pop	{r4, r5, pc}
 800a5c4:	42a3      	cmp	r3, r4
 800a5c6:	d3f3      	bcc.n	800a5b0 <__mcmp+0x18>
 800a5c8:	e7fb      	b.n	800a5c2 <__mcmp+0x2a>
 800a5ca:	2001      	movs	r0, #1
 800a5cc:	e7f9      	b.n	800a5c2 <__mcmp+0x2a>
	...

0800a5d0 <__mdiff>:
 800a5d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5d4:	4689      	mov	r9, r1
 800a5d6:	4606      	mov	r6, r0
 800a5d8:	4611      	mov	r1, r2
 800a5da:	4648      	mov	r0, r9
 800a5dc:	4614      	mov	r4, r2
 800a5de:	f7ff ffdb 	bl	800a598 <__mcmp>
 800a5e2:	1e05      	subs	r5, r0, #0
 800a5e4:	d112      	bne.n	800a60c <__mdiff+0x3c>
 800a5e6:	4629      	mov	r1, r5
 800a5e8:	4630      	mov	r0, r6
 800a5ea:	f7ff fd63 	bl	800a0b4 <_Balloc>
 800a5ee:	4602      	mov	r2, r0
 800a5f0:	b928      	cbnz	r0, 800a5fe <__mdiff+0x2e>
 800a5f2:	4b3f      	ldr	r3, [pc, #252]	@ (800a6f0 <__mdiff+0x120>)
 800a5f4:	f240 2137 	movw	r1, #567	@ 0x237
 800a5f8:	483e      	ldr	r0, [pc, #248]	@ (800a6f4 <__mdiff+0x124>)
 800a5fa:	f000 fb47 	bl	800ac8c <__assert_func>
 800a5fe:	2301      	movs	r3, #1
 800a600:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a604:	4610      	mov	r0, r2
 800a606:	b003      	add	sp, #12
 800a608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a60c:	bfbc      	itt	lt
 800a60e:	464b      	movlt	r3, r9
 800a610:	46a1      	movlt	r9, r4
 800a612:	4630      	mov	r0, r6
 800a614:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a618:	bfba      	itte	lt
 800a61a:	461c      	movlt	r4, r3
 800a61c:	2501      	movlt	r5, #1
 800a61e:	2500      	movge	r5, #0
 800a620:	f7ff fd48 	bl	800a0b4 <_Balloc>
 800a624:	4602      	mov	r2, r0
 800a626:	b918      	cbnz	r0, 800a630 <__mdiff+0x60>
 800a628:	4b31      	ldr	r3, [pc, #196]	@ (800a6f0 <__mdiff+0x120>)
 800a62a:	f240 2145 	movw	r1, #581	@ 0x245
 800a62e:	e7e3      	b.n	800a5f8 <__mdiff+0x28>
 800a630:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a634:	6926      	ldr	r6, [r4, #16]
 800a636:	60c5      	str	r5, [r0, #12]
 800a638:	f109 0310 	add.w	r3, r9, #16
 800a63c:	f109 0514 	add.w	r5, r9, #20
 800a640:	f104 0e14 	add.w	lr, r4, #20
 800a644:	f100 0b14 	add.w	fp, r0, #20
 800a648:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a64c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a650:	9301      	str	r3, [sp, #4]
 800a652:	46d9      	mov	r9, fp
 800a654:	f04f 0c00 	mov.w	ip, #0
 800a658:	9b01      	ldr	r3, [sp, #4]
 800a65a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a65e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a662:	9301      	str	r3, [sp, #4]
 800a664:	fa1f f38a 	uxth.w	r3, sl
 800a668:	4619      	mov	r1, r3
 800a66a:	b283      	uxth	r3, r0
 800a66c:	1acb      	subs	r3, r1, r3
 800a66e:	0c00      	lsrs	r0, r0, #16
 800a670:	4463      	add	r3, ip
 800a672:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a676:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a67a:	b29b      	uxth	r3, r3
 800a67c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a680:	4576      	cmp	r6, lr
 800a682:	f849 3b04 	str.w	r3, [r9], #4
 800a686:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a68a:	d8e5      	bhi.n	800a658 <__mdiff+0x88>
 800a68c:	1b33      	subs	r3, r6, r4
 800a68e:	3b15      	subs	r3, #21
 800a690:	f023 0303 	bic.w	r3, r3, #3
 800a694:	3415      	adds	r4, #21
 800a696:	3304      	adds	r3, #4
 800a698:	42a6      	cmp	r6, r4
 800a69a:	bf38      	it	cc
 800a69c:	2304      	movcc	r3, #4
 800a69e:	441d      	add	r5, r3
 800a6a0:	445b      	add	r3, fp
 800a6a2:	461e      	mov	r6, r3
 800a6a4:	462c      	mov	r4, r5
 800a6a6:	4544      	cmp	r4, r8
 800a6a8:	d30e      	bcc.n	800a6c8 <__mdiff+0xf8>
 800a6aa:	f108 0103 	add.w	r1, r8, #3
 800a6ae:	1b49      	subs	r1, r1, r5
 800a6b0:	f021 0103 	bic.w	r1, r1, #3
 800a6b4:	3d03      	subs	r5, #3
 800a6b6:	45a8      	cmp	r8, r5
 800a6b8:	bf38      	it	cc
 800a6ba:	2100      	movcc	r1, #0
 800a6bc:	440b      	add	r3, r1
 800a6be:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a6c2:	b191      	cbz	r1, 800a6ea <__mdiff+0x11a>
 800a6c4:	6117      	str	r7, [r2, #16]
 800a6c6:	e79d      	b.n	800a604 <__mdiff+0x34>
 800a6c8:	f854 1b04 	ldr.w	r1, [r4], #4
 800a6cc:	46e6      	mov	lr, ip
 800a6ce:	0c08      	lsrs	r0, r1, #16
 800a6d0:	fa1c fc81 	uxtah	ip, ip, r1
 800a6d4:	4471      	add	r1, lr
 800a6d6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a6da:	b289      	uxth	r1, r1
 800a6dc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a6e0:	f846 1b04 	str.w	r1, [r6], #4
 800a6e4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a6e8:	e7dd      	b.n	800a6a6 <__mdiff+0xd6>
 800a6ea:	3f01      	subs	r7, #1
 800a6ec:	e7e7      	b.n	800a6be <__mdiff+0xee>
 800a6ee:	bf00      	nop
 800a6f0:	0807a610 	.word	0x0807a610
 800a6f4:	0807a621 	.word	0x0807a621

0800a6f8 <__d2b>:
 800a6f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a6fc:	460f      	mov	r7, r1
 800a6fe:	2101      	movs	r1, #1
 800a700:	ec59 8b10 	vmov	r8, r9, d0
 800a704:	4616      	mov	r6, r2
 800a706:	f7ff fcd5 	bl	800a0b4 <_Balloc>
 800a70a:	4604      	mov	r4, r0
 800a70c:	b930      	cbnz	r0, 800a71c <__d2b+0x24>
 800a70e:	4602      	mov	r2, r0
 800a710:	4b23      	ldr	r3, [pc, #140]	@ (800a7a0 <__d2b+0xa8>)
 800a712:	4824      	ldr	r0, [pc, #144]	@ (800a7a4 <__d2b+0xac>)
 800a714:	f240 310f 	movw	r1, #783	@ 0x30f
 800a718:	f000 fab8 	bl	800ac8c <__assert_func>
 800a71c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a720:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a724:	b10d      	cbz	r5, 800a72a <__d2b+0x32>
 800a726:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a72a:	9301      	str	r3, [sp, #4]
 800a72c:	f1b8 0300 	subs.w	r3, r8, #0
 800a730:	d023      	beq.n	800a77a <__d2b+0x82>
 800a732:	4668      	mov	r0, sp
 800a734:	9300      	str	r3, [sp, #0]
 800a736:	f7ff fd84 	bl	800a242 <__lo0bits>
 800a73a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a73e:	b1d0      	cbz	r0, 800a776 <__d2b+0x7e>
 800a740:	f1c0 0320 	rsb	r3, r0, #32
 800a744:	fa02 f303 	lsl.w	r3, r2, r3
 800a748:	430b      	orrs	r3, r1
 800a74a:	40c2      	lsrs	r2, r0
 800a74c:	6163      	str	r3, [r4, #20]
 800a74e:	9201      	str	r2, [sp, #4]
 800a750:	9b01      	ldr	r3, [sp, #4]
 800a752:	61a3      	str	r3, [r4, #24]
 800a754:	2b00      	cmp	r3, #0
 800a756:	bf0c      	ite	eq
 800a758:	2201      	moveq	r2, #1
 800a75a:	2202      	movne	r2, #2
 800a75c:	6122      	str	r2, [r4, #16]
 800a75e:	b1a5      	cbz	r5, 800a78a <__d2b+0x92>
 800a760:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a764:	4405      	add	r5, r0
 800a766:	603d      	str	r5, [r7, #0]
 800a768:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a76c:	6030      	str	r0, [r6, #0]
 800a76e:	4620      	mov	r0, r4
 800a770:	b003      	add	sp, #12
 800a772:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a776:	6161      	str	r1, [r4, #20]
 800a778:	e7ea      	b.n	800a750 <__d2b+0x58>
 800a77a:	a801      	add	r0, sp, #4
 800a77c:	f7ff fd61 	bl	800a242 <__lo0bits>
 800a780:	9b01      	ldr	r3, [sp, #4]
 800a782:	6163      	str	r3, [r4, #20]
 800a784:	3020      	adds	r0, #32
 800a786:	2201      	movs	r2, #1
 800a788:	e7e8      	b.n	800a75c <__d2b+0x64>
 800a78a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a78e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a792:	6038      	str	r0, [r7, #0]
 800a794:	6918      	ldr	r0, [r3, #16]
 800a796:	f7ff fd35 	bl	800a204 <__hi0bits>
 800a79a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a79e:	e7e5      	b.n	800a76c <__d2b+0x74>
 800a7a0:	0807a610 	.word	0x0807a610
 800a7a4:	0807a621 	.word	0x0807a621

0800a7a8 <__sfputc_r>:
 800a7a8:	6893      	ldr	r3, [r2, #8]
 800a7aa:	3b01      	subs	r3, #1
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	b410      	push	{r4}
 800a7b0:	6093      	str	r3, [r2, #8]
 800a7b2:	da08      	bge.n	800a7c6 <__sfputc_r+0x1e>
 800a7b4:	6994      	ldr	r4, [r2, #24]
 800a7b6:	42a3      	cmp	r3, r4
 800a7b8:	db01      	blt.n	800a7be <__sfputc_r+0x16>
 800a7ba:	290a      	cmp	r1, #10
 800a7bc:	d103      	bne.n	800a7c6 <__sfputc_r+0x1e>
 800a7be:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7c2:	f7fe bca0 	b.w	8009106 <__swbuf_r>
 800a7c6:	6813      	ldr	r3, [r2, #0]
 800a7c8:	1c58      	adds	r0, r3, #1
 800a7ca:	6010      	str	r0, [r2, #0]
 800a7cc:	7019      	strb	r1, [r3, #0]
 800a7ce:	4608      	mov	r0, r1
 800a7d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7d4:	4770      	bx	lr

0800a7d6 <__sfputs_r>:
 800a7d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7d8:	4606      	mov	r6, r0
 800a7da:	460f      	mov	r7, r1
 800a7dc:	4614      	mov	r4, r2
 800a7de:	18d5      	adds	r5, r2, r3
 800a7e0:	42ac      	cmp	r4, r5
 800a7e2:	d101      	bne.n	800a7e8 <__sfputs_r+0x12>
 800a7e4:	2000      	movs	r0, #0
 800a7e6:	e007      	b.n	800a7f8 <__sfputs_r+0x22>
 800a7e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7ec:	463a      	mov	r2, r7
 800a7ee:	4630      	mov	r0, r6
 800a7f0:	f7ff ffda 	bl	800a7a8 <__sfputc_r>
 800a7f4:	1c43      	adds	r3, r0, #1
 800a7f6:	d1f3      	bne.n	800a7e0 <__sfputs_r+0xa>
 800a7f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a7fc <_vfiprintf_r>:
 800a7fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a800:	460d      	mov	r5, r1
 800a802:	b09d      	sub	sp, #116	@ 0x74
 800a804:	4614      	mov	r4, r2
 800a806:	4698      	mov	r8, r3
 800a808:	4606      	mov	r6, r0
 800a80a:	b118      	cbz	r0, 800a814 <_vfiprintf_r+0x18>
 800a80c:	6a03      	ldr	r3, [r0, #32]
 800a80e:	b90b      	cbnz	r3, 800a814 <_vfiprintf_r+0x18>
 800a810:	f7fe fb90 	bl	8008f34 <__sinit>
 800a814:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a816:	07d9      	lsls	r1, r3, #31
 800a818:	d405      	bmi.n	800a826 <_vfiprintf_r+0x2a>
 800a81a:	89ab      	ldrh	r3, [r5, #12]
 800a81c:	059a      	lsls	r2, r3, #22
 800a81e:	d402      	bmi.n	800a826 <_vfiprintf_r+0x2a>
 800a820:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a822:	f7fe fd92 	bl	800934a <__retarget_lock_acquire_recursive>
 800a826:	89ab      	ldrh	r3, [r5, #12]
 800a828:	071b      	lsls	r3, r3, #28
 800a82a:	d501      	bpl.n	800a830 <_vfiprintf_r+0x34>
 800a82c:	692b      	ldr	r3, [r5, #16]
 800a82e:	b99b      	cbnz	r3, 800a858 <_vfiprintf_r+0x5c>
 800a830:	4629      	mov	r1, r5
 800a832:	4630      	mov	r0, r6
 800a834:	f7fe fca6 	bl	8009184 <__swsetup_r>
 800a838:	b170      	cbz	r0, 800a858 <_vfiprintf_r+0x5c>
 800a83a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a83c:	07dc      	lsls	r4, r3, #31
 800a83e:	d504      	bpl.n	800a84a <_vfiprintf_r+0x4e>
 800a840:	f04f 30ff 	mov.w	r0, #4294967295
 800a844:	b01d      	add	sp, #116	@ 0x74
 800a846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a84a:	89ab      	ldrh	r3, [r5, #12]
 800a84c:	0598      	lsls	r0, r3, #22
 800a84e:	d4f7      	bmi.n	800a840 <_vfiprintf_r+0x44>
 800a850:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a852:	f7fe fd7b 	bl	800934c <__retarget_lock_release_recursive>
 800a856:	e7f3      	b.n	800a840 <_vfiprintf_r+0x44>
 800a858:	2300      	movs	r3, #0
 800a85a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a85c:	2320      	movs	r3, #32
 800a85e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a862:	f8cd 800c 	str.w	r8, [sp, #12]
 800a866:	2330      	movs	r3, #48	@ 0x30
 800a868:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800aa18 <_vfiprintf_r+0x21c>
 800a86c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a870:	f04f 0901 	mov.w	r9, #1
 800a874:	4623      	mov	r3, r4
 800a876:	469a      	mov	sl, r3
 800a878:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a87c:	b10a      	cbz	r2, 800a882 <_vfiprintf_r+0x86>
 800a87e:	2a25      	cmp	r2, #37	@ 0x25
 800a880:	d1f9      	bne.n	800a876 <_vfiprintf_r+0x7a>
 800a882:	ebba 0b04 	subs.w	fp, sl, r4
 800a886:	d00b      	beq.n	800a8a0 <_vfiprintf_r+0xa4>
 800a888:	465b      	mov	r3, fp
 800a88a:	4622      	mov	r2, r4
 800a88c:	4629      	mov	r1, r5
 800a88e:	4630      	mov	r0, r6
 800a890:	f7ff ffa1 	bl	800a7d6 <__sfputs_r>
 800a894:	3001      	adds	r0, #1
 800a896:	f000 80a7 	beq.w	800a9e8 <_vfiprintf_r+0x1ec>
 800a89a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a89c:	445a      	add	r2, fp
 800a89e:	9209      	str	r2, [sp, #36]	@ 0x24
 800a8a0:	f89a 3000 	ldrb.w	r3, [sl]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	f000 809f 	beq.w	800a9e8 <_vfiprintf_r+0x1ec>
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	f04f 32ff 	mov.w	r2, #4294967295
 800a8b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a8b4:	f10a 0a01 	add.w	sl, sl, #1
 800a8b8:	9304      	str	r3, [sp, #16]
 800a8ba:	9307      	str	r3, [sp, #28]
 800a8bc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a8c0:	931a      	str	r3, [sp, #104]	@ 0x68
 800a8c2:	4654      	mov	r4, sl
 800a8c4:	2205      	movs	r2, #5
 800a8c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8ca:	4853      	ldr	r0, [pc, #332]	@ (800aa18 <_vfiprintf_r+0x21c>)
 800a8cc:	f7f5 fc80 	bl	80001d0 <memchr>
 800a8d0:	9a04      	ldr	r2, [sp, #16]
 800a8d2:	b9d8      	cbnz	r0, 800a90c <_vfiprintf_r+0x110>
 800a8d4:	06d1      	lsls	r1, r2, #27
 800a8d6:	bf44      	itt	mi
 800a8d8:	2320      	movmi	r3, #32
 800a8da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a8de:	0713      	lsls	r3, r2, #28
 800a8e0:	bf44      	itt	mi
 800a8e2:	232b      	movmi	r3, #43	@ 0x2b
 800a8e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a8e8:	f89a 3000 	ldrb.w	r3, [sl]
 800a8ec:	2b2a      	cmp	r3, #42	@ 0x2a
 800a8ee:	d015      	beq.n	800a91c <_vfiprintf_r+0x120>
 800a8f0:	9a07      	ldr	r2, [sp, #28]
 800a8f2:	4654      	mov	r4, sl
 800a8f4:	2000      	movs	r0, #0
 800a8f6:	f04f 0c0a 	mov.w	ip, #10
 800a8fa:	4621      	mov	r1, r4
 800a8fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a900:	3b30      	subs	r3, #48	@ 0x30
 800a902:	2b09      	cmp	r3, #9
 800a904:	d94b      	bls.n	800a99e <_vfiprintf_r+0x1a2>
 800a906:	b1b0      	cbz	r0, 800a936 <_vfiprintf_r+0x13a>
 800a908:	9207      	str	r2, [sp, #28]
 800a90a:	e014      	b.n	800a936 <_vfiprintf_r+0x13a>
 800a90c:	eba0 0308 	sub.w	r3, r0, r8
 800a910:	fa09 f303 	lsl.w	r3, r9, r3
 800a914:	4313      	orrs	r3, r2
 800a916:	9304      	str	r3, [sp, #16]
 800a918:	46a2      	mov	sl, r4
 800a91a:	e7d2      	b.n	800a8c2 <_vfiprintf_r+0xc6>
 800a91c:	9b03      	ldr	r3, [sp, #12]
 800a91e:	1d19      	adds	r1, r3, #4
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	9103      	str	r1, [sp, #12]
 800a924:	2b00      	cmp	r3, #0
 800a926:	bfbb      	ittet	lt
 800a928:	425b      	neglt	r3, r3
 800a92a:	f042 0202 	orrlt.w	r2, r2, #2
 800a92e:	9307      	strge	r3, [sp, #28]
 800a930:	9307      	strlt	r3, [sp, #28]
 800a932:	bfb8      	it	lt
 800a934:	9204      	strlt	r2, [sp, #16]
 800a936:	7823      	ldrb	r3, [r4, #0]
 800a938:	2b2e      	cmp	r3, #46	@ 0x2e
 800a93a:	d10a      	bne.n	800a952 <_vfiprintf_r+0x156>
 800a93c:	7863      	ldrb	r3, [r4, #1]
 800a93e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a940:	d132      	bne.n	800a9a8 <_vfiprintf_r+0x1ac>
 800a942:	9b03      	ldr	r3, [sp, #12]
 800a944:	1d1a      	adds	r2, r3, #4
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	9203      	str	r2, [sp, #12]
 800a94a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a94e:	3402      	adds	r4, #2
 800a950:	9305      	str	r3, [sp, #20]
 800a952:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800aa28 <_vfiprintf_r+0x22c>
 800a956:	7821      	ldrb	r1, [r4, #0]
 800a958:	2203      	movs	r2, #3
 800a95a:	4650      	mov	r0, sl
 800a95c:	f7f5 fc38 	bl	80001d0 <memchr>
 800a960:	b138      	cbz	r0, 800a972 <_vfiprintf_r+0x176>
 800a962:	9b04      	ldr	r3, [sp, #16]
 800a964:	eba0 000a 	sub.w	r0, r0, sl
 800a968:	2240      	movs	r2, #64	@ 0x40
 800a96a:	4082      	lsls	r2, r0
 800a96c:	4313      	orrs	r3, r2
 800a96e:	3401      	adds	r4, #1
 800a970:	9304      	str	r3, [sp, #16]
 800a972:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a976:	4829      	ldr	r0, [pc, #164]	@ (800aa1c <_vfiprintf_r+0x220>)
 800a978:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a97c:	2206      	movs	r2, #6
 800a97e:	f7f5 fc27 	bl	80001d0 <memchr>
 800a982:	2800      	cmp	r0, #0
 800a984:	d03f      	beq.n	800aa06 <_vfiprintf_r+0x20a>
 800a986:	4b26      	ldr	r3, [pc, #152]	@ (800aa20 <_vfiprintf_r+0x224>)
 800a988:	bb1b      	cbnz	r3, 800a9d2 <_vfiprintf_r+0x1d6>
 800a98a:	9b03      	ldr	r3, [sp, #12]
 800a98c:	3307      	adds	r3, #7
 800a98e:	f023 0307 	bic.w	r3, r3, #7
 800a992:	3308      	adds	r3, #8
 800a994:	9303      	str	r3, [sp, #12]
 800a996:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a998:	443b      	add	r3, r7
 800a99a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a99c:	e76a      	b.n	800a874 <_vfiprintf_r+0x78>
 800a99e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a9a2:	460c      	mov	r4, r1
 800a9a4:	2001      	movs	r0, #1
 800a9a6:	e7a8      	b.n	800a8fa <_vfiprintf_r+0xfe>
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	3401      	adds	r4, #1
 800a9ac:	9305      	str	r3, [sp, #20]
 800a9ae:	4619      	mov	r1, r3
 800a9b0:	f04f 0c0a 	mov.w	ip, #10
 800a9b4:	4620      	mov	r0, r4
 800a9b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a9ba:	3a30      	subs	r2, #48	@ 0x30
 800a9bc:	2a09      	cmp	r2, #9
 800a9be:	d903      	bls.n	800a9c8 <_vfiprintf_r+0x1cc>
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d0c6      	beq.n	800a952 <_vfiprintf_r+0x156>
 800a9c4:	9105      	str	r1, [sp, #20]
 800a9c6:	e7c4      	b.n	800a952 <_vfiprintf_r+0x156>
 800a9c8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a9cc:	4604      	mov	r4, r0
 800a9ce:	2301      	movs	r3, #1
 800a9d0:	e7f0      	b.n	800a9b4 <_vfiprintf_r+0x1b8>
 800a9d2:	ab03      	add	r3, sp, #12
 800a9d4:	9300      	str	r3, [sp, #0]
 800a9d6:	462a      	mov	r2, r5
 800a9d8:	4b12      	ldr	r3, [pc, #72]	@ (800aa24 <_vfiprintf_r+0x228>)
 800a9da:	a904      	add	r1, sp, #16
 800a9dc:	4630      	mov	r0, r6
 800a9de:	f7fd fe67 	bl	80086b0 <_printf_float>
 800a9e2:	4607      	mov	r7, r0
 800a9e4:	1c78      	adds	r0, r7, #1
 800a9e6:	d1d6      	bne.n	800a996 <_vfiprintf_r+0x19a>
 800a9e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a9ea:	07d9      	lsls	r1, r3, #31
 800a9ec:	d405      	bmi.n	800a9fa <_vfiprintf_r+0x1fe>
 800a9ee:	89ab      	ldrh	r3, [r5, #12]
 800a9f0:	059a      	lsls	r2, r3, #22
 800a9f2:	d402      	bmi.n	800a9fa <_vfiprintf_r+0x1fe>
 800a9f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a9f6:	f7fe fca9 	bl	800934c <__retarget_lock_release_recursive>
 800a9fa:	89ab      	ldrh	r3, [r5, #12]
 800a9fc:	065b      	lsls	r3, r3, #25
 800a9fe:	f53f af1f 	bmi.w	800a840 <_vfiprintf_r+0x44>
 800aa02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aa04:	e71e      	b.n	800a844 <_vfiprintf_r+0x48>
 800aa06:	ab03      	add	r3, sp, #12
 800aa08:	9300      	str	r3, [sp, #0]
 800aa0a:	462a      	mov	r2, r5
 800aa0c:	4b05      	ldr	r3, [pc, #20]	@ (800aa24 <_vfiprintf_r+0x228>)
 800aa0e:	a904      	add	r1, sp, #16
 800aa10:	4630      	mov	r0, r6
 800aa12:	f7fe f8e5 	bl	8008be0 <_printf_i>
 800aa16:	e7e4      	b.n	800a9e2 <_vfiprintf_r+0x1e6>
 800aa18:	0807a67a 	.word	0x0807a67a
 800aa1c:	0807a684 	.word	0x0807a684
 800aa20:	080086b1 	.word	0x080086b1
 800aa24:	0800a7d7 	.word	0x0800a7d7
 800aa28:	0807a680 	.word	0x0807a680

0800aa2c <__sflush_r>:
 800aa2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aa30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa34:	0716      	lsls	r6, r2, #28
 800aa36:	4605      	mov	r5, r0
 800aa38:	460c      	mov	r4, r1
 800aa3a:	d454      	bmi.n	800aae6 <__sflush_r+0xba>
 800aa3c:	684b      	ldr	r3, [r1, #4]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	dc02      	bgt.n	800aa48 <__sflush_r+0x1c>
 800aa42:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	dd48      	ble.n	800aada <__sflush_r+0xae>
 800aa48:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aa4a:	2e00      	cmp	r6, #0
 800aa4c:	d045      	beq.n	800aada <__sflush_r+0xae>
 800aa4e:	2300      	movs	r3, #0
 800aa50:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800aa54:	682f      	ldr	r7, [r5, #0]
 800aa56:	6a21      	ldr	r1, [r4, #32]
 800aa58:	602b      	str	r3, [r5, #0]
 800aa5a:	d030      	beq.n	800aabe <__sflush_r+0x92>
 800aa5c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800aa5e:	89a3      	ldrh	r3, [r4, #12]
 800aa60:	0759      	lsls	r1, r3, #29
 800aa62:	d505      	bpl.n	800aa70 <__sflush_r+0x44>
 800aa64:	6863      	ldr	r3, [r4, #4]
 800aa66:	1ad2      	subs	r2, r2, r3
 800aa68:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800aa6a:	b10b      	cbz	r3, 800aa70 <__sflush_r+0x44>
 800aa6c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800aa6e:	1ad2      	subs	r2, r2, r3
 800aa70:	2300      	movs	r3, #0
 800aa72:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aa74:	6a21      	ldr	r1, [r4, #32]
 800aa76:	4628      	mov	r0, r5
 800aa78:	47b0      	blx	r6
 800aa7a:	1c43      	adds	r3, r0, #1
 800aa7c:	89a3      	ldrh	r3, [r4, #12]
 800aa7e:	d106      	bne.n	800aa8e <__sflush_r+0x62>
 800aa80:	6829      	ldr	r1, [r5, #0]
 800aa82:	291d      	cmp	r1, #29
 800aa84:	d82b      	bhi.n	800aade <__sflush_r+0xb2>
 800aa86:	4a2a      	ldr	r2, [pc, #168]	@ (800ab30 <__sflush_r+0x104>)
 800aa88:	40ca      	lsrs	r2, r1
 800aa8a:	07d6      	lsls	r6, r2, #31
 800aa8c:	d527      	bpl.n	800aade <__sflush_r+0xb2>
 800aa8e:	2200      	movs	r2, #0
 800aa90:	6062      	str	r2, [r4, #4]
 800aa92:	04d9      	lsls	r1, r3, #19
 800aa94:	6922      	ldr	r2, [r4, #16]
 800aa96:	6022      	str	r2, [r4, #0]
 800aa98:	d504      	bpl.n	800aaa4 <__sflush_r+0x78>
 800aa9a:	1c42      	adds	r2, r0, #1
 800aa9c:	d101      	bne.n	800aaa2 <__sflush_r+0x76>
 800aa9e:	682b      	ldr	r3, [r5, #0]
 800aaa0:	b903      	cbnz	r3, 800aaa4 <__sflush_r+0x78>
 800aaa2:	6560      	str	r0, [r4, #84]	@ 0x54
 800aaa4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aaa6:	602f      	str	r7, [r5, #0]
 800aaa8:	b1b9      	cbz	r1, 800aada <__sflush_r+0xae>
 800aaaa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aaae:	4299      	cmp	r1, r3
 800aab0:	d002      	beq.n	800aab8 <__sflush_r+0x8c>
 800aab2:	4628      	mov	r0, r5
 800aab4:	f7ff fab4 	bl	800a020 <_free_r>
 800aab8:	2300      	movs	r3, #0
 800aaba:	6363      	str	r3, [r4, #52]	@ 0x34
 800aabc:	e00d      	b.n	800aada <__sflush_r+0xae>
 800aabe:	2301      	movs	r3, #1
 800aac0:	4628      	mov	r0, r5
 800aac2:	47b0      	blx	r6
 800aac4:	4602      	mov	r2, r0
 800aac6:	1c50      	adds	r0, r2, #1
 800aac8:	d1c9      	bne.n	800aa5e <__sflush_r+0x32>
 800aaca:	682b      	ldr	r3, [r5, #0]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d0c6      	beq.n	800aa5e <__sflush_r+0x32>
 800aad0:	2b1d      	cmp	r3, #29
 800aad2:	d001      	beq.n	800aad8 <__sflush_r+0xac>
 800aad4:	2b16      	cmp	r3, #22
 800aad6:	d11e      	bne.n	800ab16 <__sflush_r+0xea>
 800aad8:	602f      	str	r7, [r5, #0]
 800aada:	2000      	movs	r0, #0
 800aadc:	e022      	b.n	800ab24 <__sflush_r+0xf8>
 800aade:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aae2:	b21b      	sxth	r3, r3
 800aae4:	e01b      	b.n	800ab1e <__sflush_r+0xf2>
 800aae6:	690f      	ldr	r7, [r1, #16]
 800aae8:	2f00      	cmp	r7, #0
 800aaea:	d0f6      	beq.n	800aada <__sflush_r+0xae>
 800aaec:	0793      	lsls	r3, r2, #30
 800aaee:	680e      	ldr	r6, [r1, #0]
 800aaf0:	bf08      	it	eq
 800aaf2:	694b      	ldreq	r3, [r1, #20]
 800aaf4:	600f      	str	r7, [r1, #0]
 800aaf6:	bf18      	it	ne
 800aaf8:	2300      	movne	r3, #0
 800aafa:	eba6 0807 	sub.w	r8, r6, r7
 800aafe:	608b      	str	r3, [r1, #8]
 800ab00:	f1b8 0f00 	cmp.w	r8, #0
 800ab04:	dde9      	ble.n	800aada <__sflush_r+0xae>
 800ab06:	6a21      	ldr	r1, [r4, #32]
 800ab08:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ab0a:	4643      	mov	r3, r8
 800ab0c:	463a      	mov	r2, r7
 800ab0e:	4628      	mov	r0, r5
 800ab10:	47b0      	blx	r6
 800ab12:	2800      	cmp	r0, #0
 800ab14:	dc08      	bgt.n	800ab28 <__sflush_r+0xfc>
 800ab16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab1e:	81a3      	strh	r3, [r4, #12]
 800ab20:	f04f 30ff 	mov.w	r0, #4294967295
 800ab24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab28:	4407      	add	r7, r0
 800ab2a:	eba8 0800 	sub.w	r8, r8, r0
 800ab2e:	e7e7      	b.n	800ab00 <__sflush_r+0xd4>
 800ab30:	20400001 	.word	0x20400001

0800ab34 <_fflush_r>:
 800ab34:	b538      	push	{r3, r4, r5, lr}
 800ab36:	690b      	ldr	r3, [r1, #16]
 800ab38:	4605      	mov	r5, r0
 800ab3a:	460c      	mov	r4, r1
 800ab3c:	b913      	cbnz	r3, 800ab44 <_fflush_r+0x10>
 800ab3e:	2500      	movs	r5, #0
 800ab40:	4628      	mov	r0, r5
 800ab42:	bd38      	pop	{r3, r4, r5, pc}
 800ab44:	b118      	cbz	r0, 800ab4e <_fflush_r+0x1a>
 800ab46:	6a03      	ldr	r3, [r0, #32]
 800ab48:	b90b      	cbnz	r3, 800ab4e <_fflush_r+0x1a>
 800ab4a:	f7fe f9f3 	bl	8008f34 <__sinit>
 800ab4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d0f3      	beq.n	800ab3e <_fflush_r+0xa>
 800ab56:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ab58:	07d0      	lsls	r0, r2, #31
 800ab5a:	d404      	bmi.n	800ab66 <_fflush_r+0x32>
 800ab5c:	0599      	lsls	r1, r3, #22
 800ab5e:	d402      	bmi.n	800ab66 <_fflush_r+0x32>
 800ab60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ab62:	f7fe fbf2 	bl	800934a <__retarget_lock_acquire_recursive>
 800ab66:	4628      	mov	r0, r5
 800ab68:	4621      	mov	r1, r4
 800ab6a:	f7ff ff5f 	bl	800aa2c <__sflush_r>
 800ab6e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ab70:	07da      	lsls	r2, r3, #31
 800ab72:	4605      	mov	r5, r0
 800ab74:	d4e4      	bmi.n	800ab40 <_fflush_r+0xc>
 800ab76:	89a3      	ldrh	r3, [r4, #12]
 800ab78:	059b      	lsls	r3, r3, #22
 800ab7a:	d4e1      	bmi.n	800ab40 <_fflush_r+0xc>
 800ab7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ab7e:	f7fe fbe5 	bl	800934c <__retarget_lock_release_recursive>
 800ab82:	e7dd      	b.n	800ab40 <_fflush_r+0xc>

0800ab84 <__swhatbuf_r>:
 800ab84:	b570      	push	{r4, r5, r6, lr}
 800ab86:	460c      	mov	r4, r1
 800ab88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab8c:	2900      	cmp	r1, #0
 800ab8e:	b096      	sub	sp, #88	@ 0x58
 800ab90:	4615      	mov	r5, r2
 800ab92:	461e      	mov	r6, r3
 800ab94:	da0d      	bge.n	800abb2 <__swhatbuf_r+0x2e>
 800ab96:	89a3      	ldrh	r3, [r4, #12]
 800ab98:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ab9c:	f04f 0100 	mov.w	r1, #0
 800aba0:	bf14      	ite	ne
 800aba2:	2340      	movne	r3, #64	@ 0x40
 800aba4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800aba8:	2000      	movs	r0, #0
 800abaa:	6031      	str	r1, [r6, #0]
 800abac:	602b      	str	r3, [r5, #0]
 800abae:	b016      	add	sp, #88	@ 0x58
 800abb0:	bd70      	pop	{r4, r5, r6, pc}
 800abb2:	466a      	mov	r2, sp
 800abb4:	f000 f848 	bl	800ac48 <_fstat_r>
 800abb8:	2800      	cmp	r0, #0
 800abba:	dbec      	blt.n	800ab96 <__swhatbuf_r+0x12>
 800abbc:	9901      	ldr	r1, [sp, #4]
 800abbe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800abc2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800abc6:	4259      	negs	r1, r3
 800abc8:	4159      	adcs	r1, r3
 800abca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800abce:	e7eb      	b.n	800aba8 <__swhatbuf_r+0x24>

0800abd0 <__smakebuf_r>:
 800abd0:	898b      	ldrh	r3, [r1, #12]
 800abd2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800abd4:	079d      	lsls	r5, r3, #30
 800abd6:	4606      	mov	r6, r0
 800abd8:	460c      	mov	r4, r1
 800abda:	d507      	bpl.n	800abec <__smakebuf_r+0x1c>
 800abdc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800abe0:	6023      	str	r3, [r4, #0]
 800abe2:	6123      	str	r3, [r4, #16]
 800abe4:	2301      	movs	r3, #1
 800abe6:	6163      	str	r3, [r4, #20]
 800abe8:	b003      	add	sp, #12
 800abea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abec:	ab01      	add	r3, sp, #4
 800abee:	466a      	mov	r2, sp
 800abf0:	f7ff ffc8 	bl	800ab84 <__swhatbuf_r>
 800abf4:	9f00      	ldr	r7, [sp, #0]
 800abf6:	4605      	mov	r5, r0
 800abf8:	4639      	mov	r1, r7
 800abfa:	4630      	mov	r0, r6
 800abfc:	f7fd fc2c 	bl	8008458 <_malloc_r>
 800ac00:	b948      	cbnz	r0, 800ac16 <__smakebuf_r+0x46>
 800ac02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac06:	059a      	lsls	r2, r3, #22
 800ac08:	d4ee      	bmi.n	800abe8 <__smakebuf_r+0x18>
 800ac0a:	f023 0303 	bic.w	r3, r3, #3
 800ac0e:	f043 0302 	orr.w	r3, r3, #2
 800ac12:	81a3      	strh	r3, [r4, #12]
 800ac14:	e7e2      	b.n	800abdc <__smakebuf_r+0xc>
 800ac16:	89a3      	ldrh	r3, [r4, #12]
 800ac18:	6020      	str	r0, [r4, #0]
 800ac1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac1e:	81a3      	strh	r3, [r4, #12]
 800ac20:	9b01      	ldr	r3, [sp, #4]
 800ac22:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ac26:	b15b      	cbz	r3, 800ac40 <__smakebuf_r+0x70>
 800ac28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac2c:	4630      	mov	r0, r6
 800ac2e:	f000 f81d 	bl	800ac6c <_isatty_r>
 800ac32:	b128      	cbz	r0, 800ac40 <__smakebuf_r+0x70>
 800ac34:	89a3      	ldrh	r3, [r4, #12]
 800ac36:	f023 0303 	bic.w	r3, r3, #3
 800ac3a:	f043 0301 	orr.w	r3, r3, #1
 800ac3e:	81a3      	strh	r3, [r4, #12]
 800ac40:	89a3      	ldrh	r3, [r4, #12]
 800ac42:	431d      	orrs	r5, r3
 800ac44:	81a5      	strh	r5, [r4, #12]
 800ac46:	e7cf      	b.n	800abe8 <__smakebuf_r+0x18>

0800ac48 <_fstat_r>:
 800ac48:	b538      	push	{r3, r4, r5, lr}
 800ac4a:	4d07      	ldr	r5, [pc, #28]	@ (800ac68 <_fstat_r+0x20>)
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	4604      	mov	r4, r0
 800ac50:	4608      	mov	r0, r1
 800ac52:	4611      	mov	r1, r2
 800ac54:	602b      	str	r3, [r5, #0]
 800ac56:	f000 fa27 	bl	800b0a8 <_fstat>
 800ac5a:	1c43      	adds	r3, r0, #1
 800ac5c:	d102      	bne.n	800ac64 <_fstat_r+0x1c>
 800ac5e:	682b      	ldr	r3, [r5, #0]
 800ac60:	b103      	cbz	r3, 800ac64 <_fstat_r+0x1c>
 800ac62:	6023      	str	r3, [r4, #0]
 800ac64:	bd38      	pop	{r3, r4, r5, pc}
 800ac66:	bf00      	nop
 800ac68:	20003770 	.word	0x20003770

0800ac6c <_isatty_r>:
 800ac6c:	b538      	push	{r3, r4, r5, lr}
 800ac6e:	4d06      	ldr	r5, [pc, #24]	@ (800ac88 <_isatty_r+0x1c>)
 800ac70:	2300      	movs	r3, #0
 800ac72:	4604      	mov	r4, r0
 800ac74:	4608      	mov	r0, r1
 800ac76:	602b      	str	r3, [r5, #0]
 800ac78:	f000 fa26 	bl	800b0c8 <_isatty>
 800ac7c:	1c43      	adds	r3, r0, #1
 800ac7e:	d102      	bne.n	800ac86 <_isatty_r+0x1a>
 800ac80:	682b      	ldr	r3, [r5, #0]
 800ac82:	b103      	cbz	r3, 800ac86 <_isatty_r+0x1a>
 800ac84:	6023      	str	r3, [r4, #0]
 800ac86:	bd38      	pop	{r3, r4, r5, pc}
 800ac88:	20003770 	.word	0x20003770

0800ac8c <__assert_func>:
 800ac8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ac8e:	4614      	mov	r4, r2
 800ac90:	461a      	mov	r2, r3
 800ac92:	4b09      	ldr	r3, [pc, #36]	@ (800acb8 <__assert_func+0x2c>)
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	4605      	mov	r5, r0
 800ac98:	68d8      	ldr	r0, [r3, #12]
 800ac9a:	b14c      	cbz	r4, 800acb0 <__assert_func+0x24>
 800ac9c:	4b07      	ldr	r3, [pc, #28]	@ (800acbc <__assert_func+0x30>)
 800ac9e:	9100      	str	r1, [sp, #0]
 800aca0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aca4:	4906      	ldr	r1, [pc, #24]	@ (800acc0 <__assert_func+0x34>)
 800aca6:	462b      	mov	r3, r5
 800aca8:	f000 f842 	bl	800ad30 <fiprintf>
 800acac:	f000 f852 	bl	800ad54 <abort>
 800acb0:	4b04      	ldr	r3, [pc, #16]	@ (800acc4 <__assert_func+0x38>)
 800acb2:	461c      	mov	r4, r3
 800acb4:	e7f3      	b.n	800ac9e <__assert_func+0x12>
 800acb6:	bf00      	nop
 800acb8:	20000c78 	.word	0x20000c78
 800acbc:	0807a695 	.word	0x0807a695
 800acc0:	0807a6a2 	.word	0x0807a6a2
 800acc4:	0807a6d0 	.word	0x0807a6d0

0800acc8 <_calloc_r>:
 800acc8:	b570      	push	{r4, r5, r6, lr}
 800acca:	fba1 5402 	umull	r5, r4, r1, r2
 800acce:	b934      	cbnz	r4, 800acde <_calloc_r+0x16>
 800acd0:	4629      	mov	r1, r5
 800acd2:	f7fd fbc1 	bl	8008458 <_malloc_r>
 800acd6:	4606      	mov	r6, r0
 800acd8:	b928      	cbnz	r0, 800ace6 <_calloc_r+0x1e>
 800acda:	4630      	mov	r0, r6
 800acdc:	bd70      	pop	{r4, r5, r6, pc}
 800acde:	220c      	movs	r2, #12
 800ace0:	6002      	str	r2, [r0, #0]
 800ace2:	2600      	movs	r6, #0
 800ace4:	e7f9      	b.n	800acda <_calloc_r+0x12>
 800ace6:	462a      	mov	r2, r5
 800ace8:	4621      	mov	r1, r4
 800acea:	f7fe faa1 	bl	8009230 <memset>
 800acee:	e7f4      	b.n	800acda <_calloc_r+0x12>

0800acf0 <__ascii_mbtowc>:
 800acf0:	b082      	sub	sp, #8
 800acf2:	b901      	cbnz	r1, 800acf6 <__ascii_mbtowc+0x6>
 800acf4:	a901      	add	r1, sp, #4
 800acf6:	b142      	cbz	r2, 800ad0a <__ascii_mbtowc+0x1a>
 800acf8:	b14b      	cbz	r3, 800ad0e <__ascii_mbtowc+0x1e>
 800acfa:	7813      	ldrb	r3, [r2, #0]
 800acfc:	600b      	str	r3, [r1, #0]
 800acfe:	7812      	ldrb	r2, [r2, #0]
 800ad00:	1e10      	subs	r0, r2, #0
 800ad02:	bf18      	it	ne
 800ad04:	2001      	movne	r0, #1
 800ad06:	b002      	add	sp, #8
 800ad08:	4770      	bx	lr
 800ad0a:	4610      	mov	r0, r2
 800ad0c:	e7fb      	b.n	800ad06 <__ascii_mbtowc+0x16>
 800ad0e:	f06f 0001 	mvn.w	r0, #1
 800ad12:	e7f8      	b.n	800ad06 <__ascii_mbtowc+0x16>

0800ad14 <__ascii_wctomb>:
 800ad14:	4603      	mov	r3, r0
 800ad16:	4608      	mov	r0, r1
 800ad18:	b141      	cbz	r1, 800ad2c <__ascii_wctomb+0x18>
 800ad1a:	2aff      	cmp	r2, #255	@ 0xff
 800ad1c:	d904      	bls.n	800ad28 <__ascii_wctomb+0x14>
 800ad1e:	228a      	movs	r2, #138	@ 0x8a
 800ad20:	601a      	str	r2, [r3, #0]
 800ad22:	f04f 30ff 	mov.w	r0, #4294967295
 800ad26:	4770      	bx	lr
 800ad28:	700a      	strb	r2, [r1, #0]
 800ad2a:	2001      	movs	r0, #1
 800ad2c:	4770      	bx	lr
	...

0800ad30 <fiprintf>:
 800ad30:	b40e      	push	{r1, r2, r3}
 800ad32:	b503      	push	{r0, r1, lr}
 800ad34:	4601      	mov	r1, r0
 800ad36:	ab03      	add	r3, sp, #12
 800ad38:	4805      	ldr	r0, [pc, #20]	@ (800ad50 <fiprintf+0x20>)
 800ad3a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad3e:	6800      	ldr	r0, [r0, #0]
 800ad40:	9301      	str	r3, [sp, #4]
 800ad42:	f7ff fd5b 	bl	800a7fc <_vfiprintf_r>
 800ad46:	b002      	add	sp, #8
 800ad48:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad4c:	b003      	add	sp, #12
 800ad4e:	4770      	bx	lr
 800ad50:	20000c78 	.word	0x20000c78

0800ad54 <abort>:
 800ad54:	b508      	push	{r3, lr}
 800ad56:	2006      	movs	r0, #6
 800ad58:	f000 f82c 	bl	800adb4 <raise>
 800ad5c:	2001      	movs	r0, #1
 800ad5e:	f000 f9d3 	bl	800b108 <_exit>

0800ad62 <_raise_r>:
 800ad62:	291f      	cmp	r1, #31
 800ad64:	b538      	push	{r3, r4, r5, lr}
 800ad66:	4605      	mov	r5, r0
 800ad68:	460c      	mov	r4, r1
 800ad6a:	d904      	bls.n	800ad76 <_raise_r+0x14>
 800ad6c:	2316      	movs	r3, #22
 800ad6e:	6003      	str	r3, [r0, #0]
 800ad70:	f04f 30ff 	mov.w	r0, #4294967295
 800ad74:	bd38      	pop	{r3, r4, r5, pc}
 800ad76:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ad78:	b112      	cbz	r2, 800ad80 <_raise_r+0x1e>
 800ad7a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ad7e:	b94b      	cbnz	r3, 800ad94 <_raise_r+0x32>
 800ad80:	4628      	mov	r0, r5
 800ad82:	f000 f831 	bl	800ade8 <_getpid_r>
 800ad86:	4622      	mov	r2, r4
 800ad88:	4601      	mov	r1, r0
 800ad8a:	4628      	mov	r0, r5
 800ad8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad90:	f000 b818 	b.w	800adc4 <_kill_r>
 800ad94:	2b01      	cmp	r3, #1
 800ad96:	d00a      	beq.n	800adae <_raise_r+0x4c>
 800ad98:	1c59      	adds	r1, r3, #1
 800ad9a:	d103      	bne.n	800ada4 <_raise_r+0x42>
 800ad9c:	2316      	movs	r3, #22
 800ad9e:	6003      	str	r3, [r0, #0]
 800ada0:	2001      	movs	r0, #1
 800ada2:	e7e7      	b.n	800ad74 <_raise_r+0x12>
 800ada4:	2100      	movs	r1, #0
 800ada6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800adaa:	4620      	mov	r0, r4
 800adac:	4798      	blx	r3
 800adae:	2000      	movs	r0, #0
 800adb0:	e7e0      	b.n	800ad74 <_raise_r+0x12>
	...

0800adb4 <raise>:
 800adb4:	4b02      	ldr	r3, [pc, #8]	@ (800adc0 <raise+0xc>)
 800adb6:	4601      	mov	r1, r0
 800adb8:	6818      	ldr	r0, [r3, #0]
 800adba:	f7ff bfd2 	b.w	800ad62 <_raise_r>
 800adbe:	bf00      	nop
 800adc0:	20000c78 	.word	0x20000c78

0800adc4 <_kill_r>:
 800adc4:	b538      	push	{r3, r4, r5, lr}
 800adc6:	4d07      	ldr	r5, [pc, #28]	@ (800ade4 <_kill_r+0x20>)
 800adc8:	2300      	movs	r3, #0
 800adca:	4604      	mov	r4, r0
 800adcc:	4608      	mov	r0, r1
 800adce:	4611      	mov	r1, r2
 800add0:	602b      	str	r3, [r5, #0]
 800add2:	f000 f981 	bl	800b0d8 <_kill>
 800add6:	1c43      	adds	r3, r0, #1
 800add8:	d102      	bne.n	800ade0 <_kill_r+0x1c>
 800adda:	682b      	ldr	r3, [r5, #0]
 800addc:	b103      	cbz	r3, 800ade0 <_kill_r+0x1c>
 800adde:	6023      	str	r3, [r4, #0]
 800ade0:	bd38      	pop	{r3, r4, r5, pc}
 800ade2:	bf00      	nop
 800ade4:	20003770 	.word	0x20003770

0800ade8 <_getpid_r>:
 800ade8:	f000 b966 	b.w	800b0b8 <_getpid>

0800adec <expf>:
 800adec:	b508      	push	{r3, lr}
 800adee:	ed2d 8b02 	vpush	{d8}
 800adf2:	eef0 8a40 	vmov.f32	s17, s0
 800adf6:	f000 f881 	bl	800aefc <__ieee754_expf>
 800adfa:	eeb0 8a40 	vmov.f32	s16, s0
 800adfe:	eeb0 0a68 	vmov.f32	s0, s17
 800ae02:	f000 f847 	bl	800ae94 <finitef>
 800ae06:	b160      	cbz	r0, 800ae22 <expf+0x36>
 800ae08:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 800ae48 <expf+0x5c>
 800ae0c:	eef4 8ae7 	vcmpe.f32	s17, s15
 800ae10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae14:	dd0a      	ble.n	800ae2c <expf+0x40>
 800ae16:	f7fe fa6d 	bl	80092f4 <__errno>
 800ae1a:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 800ae4c <expf+0x60>
 800ae1e:	2322      	movs	r3, #34	@ 0x22
 800ae20:	6003      	str	r3, [r0, #0]
 800ae22:	eeb0 0a48 	vmov.f32	s0, s16
 800ae26:	ecbd 8b02 	vpop	{d8}
 800ae2a:	bd08      	pop	{r3, pc}
 800ae2c:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800ae50 <expf+0x64>
 800ae30:	eef4 8ae7 	vcmpe.f32	s17, s15
 800ae34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae38:	d5f3      	bpl.n	800ae22 <expf+0x36>
 800ae3a:	f7fe fa5b 	bl	80092f4 <__errno>
 800ae3e:	2322      	movs	r3, #34	@ 0x22
 800ae40:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 800ae54 <expf+0x68>
 800ae44:	6003      	str	r3, [r0, #0]
 800ae46:	e7ec      	b.n	800ae22 <expf+0x36>
 800ae48:	42b17217 	.word	0x42b17217
 800ae4c:	7f800000 	.word	0x7f800000
 800ae50:	c2cff1b5 	.word	0xc2cff1b5
 800ae54:	00000000 	.word	0x00000000

0800ae58 <sqrtf>:
 800ae58:	b508      	push	{r3, lr}
 800ae5a:	ed2d 8b02 	vpush	{d8}
 800ae5e:	eeb0 8a40 	vmov.f32	s16, s0
 800ae62:	f000 f847 	bl	800aef4 <__ieee754_sqrtf>
 800ae66:	eeb4 8a48 	vcmp.f32	s16, s16
 800ae6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae6e:	d60c      	bvs.n	800ae8a <sqrtf+0x32>
 800ae70:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800ae90 <sqrtf+0x38>
 800ae74:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800ae78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae7c:	d505      	bpl.n	800ae8a <sqrtf+0x32>
 800ae7e:	f7fe fa39 	bl	80092f4 <__errno>
 800ae82:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800ae86:	2321      	movs	r3, #33	@ 0x21
 800ae88:	6003      	str	r3, [r0, #0]
 800ae8a:	ecbd 8b02 	vpop	{d8}
 800ae8e:	bd08      	pop	{r3, pc}
 800ae90:	00000000 	.word	0x00000000

0800ae94 <finitef>:
 800ae94:	ee10 3a10 	vmov	r3, s0
 800ae98:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800ae9c:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800aea0:	bfac      	ite	ge
 800aea2:	2000      	movge	r0, #0
 800aea4:	2001      	movlt	r0, #1
 800aea6:	4770      	bx	lr

0800aea8 <with_errnof>:
 800aea8:	b510      	push	{r4, lr}
 800aeaa:	ed2d 8b02 	vpush	{d8}
 800aeae:	eeb0 8a40 	vmov.f32	s16, s0
 800aeb2:	4604      	mov	r4, r0
 800aeb4:	f7fe fa1e 	bl	80092f4 <__errno>
 800aeb8:	eeb0 0a48 	vmov.f32	s0, s16
 800aebc:	ecbd 8b02 	vpop	{d8}
 800aec0:	6004      	str	r4, [r0, #0]
 800aec2:	bd10      	pop	{r4, pc}

0800aec4 <xflowf>:
 800aec4:	b130      	cbz	r0, 800aed4 <xflowf+0x10>
 800aec6:	eef1 7a40 	vneg.f32	s15, s0
 800aeca:	ee27 0a80 	vmul.f32	s0, s15, s0
 800aece:	2022      	movs	r0, #34	@ 0x22
 800aed0:	f7ff bfea 	b.w	800aea8 <with_errnof>
 800aed4:	eef0 7a40 	vmov.f32	s15, s0
 800aed8:	e7f7      	b.n	800aeca <xflowf+0x6>
	...

0800aedc <__math_uflowf>:
 800aedc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800aee4 <__math_uflowf+0x8>
 800aee0:	f7ff bff0 	b.w	800aec4 <xflowf>
 800aee4:	10000000 	.word	0x10000000

0800aee8 <__math_oflowf>:
 800aee8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800aef0 <__math_oflowf+0x8>
 800aeec:	f7ff bfea 	b.w	800aec4 <xflowf>
 800aef0:	70000000 	.word	0x70000000

0800aef4 <__ieee754_sqrtf>:
 800aef4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800aef8:	4770      	bx	lr
	...

0800aefc <__ieee754_expf>:
 800aefc:	ee10 2a10 	vmov	r2, s0
 800af00:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 800af04:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800af08:	d902      	bls.n	800af10 <__ieee754_expf+0x14>
 800af0a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800af0e:	4770      	bx	lr
 800af10:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 800af14:	d106      	bne.n	800af24 <__ieee754_expf+0x28>
 800af16:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 800b050 <__ieee754_expf+0x154>
 800af1a:	2900      	cmp	r1, #0
 800af1c:	bf18      	it	ne
 800af1e:	eeb0 0a67 	vmovne.f32	s0, s15
 800af22:	4770      	bx	lr
 800af24:	484b      	ldr	r0, [pc, #300]	@ (800b054 <__ieee754_expf+0x158>)
 800af26:	4282      	cmp	r2, r0
 800af28:	dd02      	ble.n	800af30 <__ieee754_expf+0x34>
 800af2a:	2000      	movs	r0, #0
 800af2c:	f7ff bfdc 	b.w	800aee8 <__math_oflowf>
 800af30:	2a00      	cmp	r2, #0
 800af32:	da05      	bge.n	800af40 <__ieee754_expf+0x44>
 800af34:	4a48      	ldr	r2, [pc, #288]	@ (800b058 <__ieee754_expf+0x15c>)
 800af36:	4293      	cmp	r3, r2
 800af38:	d902      	bls.n	800af40 <__ieee754_expf+0x44>
 800af3a:	2000      	movs	r0, #0
 800af3c:	f7ff bfce 	b.w	800aedc <__math_uflowf>
 800af40:	4a46      	ldr	r2, [pc, #280]	@ (800b05c <__ieee754_expf+0x160>)
 800af42:	4293      	cmp	r3, r2
 800af44:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800af48:	d952      	bls.n	800aff0 <__ieee754_expf+0xf4>
 800af4a:	4a45      	ldr	r2, [pc, #276]	@ (800b060 <__ieee754_expf+0x164>)
 800af4c:	4293      	cmp	r3, r2
 800af4e:	ea4f 0281 	mov.w	r2, r1, lsl #2
 800af52:	d834      	bhi.n	800afbe <__ieee754_expf+0xc2>
 800af54:	4b43      	ldr	r3, [pc, #268]	@ (800b064 <__ieee754_expf+0x168>)
 800af56:	4413      	add	r3, r2
 800af58:	ed93 7a00 	vldr	s14, [r3]
 800af5c:	4b42      	ldr	r3, [pc, #264]	@ (800b068 <__ieee754_expf+0x16c>)
 800af5e:	4413      	add	r3, r2
 800af60:	ee30 7a47 	vsub.f32	s14, s0, s14
 800af64:	f081 0201 	eor.w	r2, r1, #1
 800af68:	edd3 7a00 	vldr	s15, [r3]
 800af6c:	1a52      	subs	r2, r2, r1
 800af6e:	ee37 0a67 	vsub.f32	s0, s14, s15
 800af72:	ee20 6a00 	vmul.f32	s12, s0, s0
 800af76:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 800b06c <__ieee754_expf+0x170>
 800af7a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b070 <__ieee754_expf+0x174>
 800af7e:	eee6 6a05 	vfma.f32	s13, s12, s10
 800af82:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 800b074 <__ieee754_expf+0x178>
 800af86:	eea6 5a86 	vfma.f32	s10, s13, s12
 800af8a:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800b078 <__ieee754_expf+0x17c>
 800af8e:	eee5 6a06 	vfma.f32	s13, s10, s12
 800af92:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 800b07c <__ieee754_expf+0x180>
 800af96:	eea6 5a86 	vfma.f32	s10, s13, s12
 800af9a:	eef0 6a40 	vmov.f32	s13, s0
 800af9e:	eee5 6a46 	vfms.f32	s13, s10, s12
 800afa2:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800afa6:	ee20 5a26 	vmul.f32	s10, s0, s13
 800afaa:	bb92      	cbnz	r2, 800b012 <__ieee754_expf+0x116>
 800afac:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800afb0:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800afb4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800afb8:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800afbc:	4770      	bx	lr
 800afbe:	4b30      	ldr	r3, [pc, #192]	@ (800b080 <__ieee754_expf+0x184>)
 800afc0:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800b084 <__ieee754_expf+0x188>
 800afc4:	eddf 6a30 	vldr	s13, [pc, #192]	@ 800b088 <__ieee754_expf+0x18c>
 800afc8:	4413      	add	r3, r2
 800afca:	edd3 7a00 	vldr	s15, [r3]
 800afce:	eee0 7a07 	vfma.f32	s15, s0, s14
 800afd2:	eeb0 7a40 	vmov.f32	s14, s0
 800afd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800afda:	ee17 2a90 	vmov	r2, s15
 800afde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800afe2:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800afe6:	eddf 6a29 	vldr	s13, [pc, #164]	@ 800b08c <__ieee754_expf+0x190>
 800afea:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800afee:	e7be      	b.n	800af6e <__ieee754_expf+0x72>
 800aff0:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 800aff4:	d20b      	bcs.n	800b00e <__ieee754_expf+0x112>
 800aff6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800b090 <__ieee754_expf+0x194>
 800affa:	ee70 6a26 	vadd.f32	s13, s0, s13
 800affe:	eef4 6ae5 	vcmpe.f32	s13, s11
 800b002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b006:	dd02      	ble.n	800b00e <__ieee754_expf+0x112>
 800b008:	ee30 0a25 	vadd.f32	s0, s0, s11
 800b00c:	4770      	bx	lr
 800b00e:	2200      	movs	r2, #0
 800b010:	e7af      	b.n	800af72 <__ieee754_expf+0x76>
 800b012:	ee36 6a66 	vsub.f32	s12, s12, s13
 800b016:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 800b01a:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800b01e:	bfb8      	it	lt
 800b020:	3264      	addlt	r2, #100	@ 0x64
 800b022:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b026:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b02a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800b02e:	ee17 3a90 	vmov	r3, s15
 800b032:	bfab      	itete	ge
 800b034:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800b038:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800b03c:	ee00 3a10 	vmovge	s0, r3
 800b040:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 800b094 <__ieee754_expf+0x198>
 800b044:	bfbc      	itt	lt
 800b046:	ee00 3a10 	vmovlt	s0, r3
 800b04a:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800b04e:	4770      	bx	lr
 800b050:	00000000 	.word	0x00000000
 800b054:	42b17217 	.word	0x42b17217
 800b058:	42cff1b5 	.word	0x42cff1b5
 800b05c:	3eb17218 	.word	0x3eb17218
 800b060:	3f851591 	.word	0x3f851591
 800b064:	0807a8dc 	.word	0x0807a8dc
 800b068:	0807a8d4 	.word	0x0807a8d4
 800b06c:	3331bb4c 	.word	0x3331bb4c
 800b070:	b5ddea0e 	.word	0xb5ddea0e
 800b074:	388ab355 	.word	0x388ab355
 800b078:	bb360b61 	.word	0xbb360b61
 800b07c:	3e2aaaab 	.word	0x3e2aaaab
 800b080:	0807a8e4 	.word	0x0807a8e4
 800b084:	3fb8aa3b 	.word	0x3fb8aa3b
 800b088:	3f317180 	.word	0x3f317180
 800b08c:	3717f7d1 	.word	0x3717f7d1
 800b090:	7149f2ca 	.word	0x7149f2ca
 800b094:	0d800000 	.word	0x0d800000

0800b098 <_close>:
 800b098:	4b02      	ldr	r3, [pc, #8]	@ (800b0a4 <_close+0xc>)
 800b09a:	2258      	movs	r2, #88	@ 0x58
 800b09c:	601a      	str	r2, [r3, #0]
 800b09e:	f04f 30ff 	mov.w	r0, #4294967295
 800b0a2:	4770      	bx	lr
 800b0a4:	20003770 	.word	0x20003770

0800b0a8 <_fstat>:
 800b0a8:	4b02      	ldr	r3, [pc, #8]	@ (800b0b4 <_fstat+0xc>)
 800b0aa:	2258      	movs	r2, #88	@ 0x58
 800b0ac:	601a      	str	r2, [r3, #0]
 800b0ae:	f04f 30ff 	mov.w	r0, #4294967295
 800b0b2:	4770      	bx	lr
 800b0b4:	20003770 	.word	0x20003770

0800b0b8 <_getpid>:
 800b0b8:	4b02      	ldr	r3, [pc, #8]	@ (800b0c4 <_getpid+0xc>)
 800b0ba:	2258      	movs	r2, #88	@ 0x58
 800b0bc:	601a      	str	r2, [r3, #0]
 800b0be:	f04f 30ff 	mov.w	r0, #4294967295
 800b0c2:	4770      	bx	lr
 800b0c4:	20003770 	.word	0x20003770

0800b0c8 <_isatty>:
 800b0c8:	4b02      	ldr	r3, [pc, #8]	@ (800b0d4 <_isatty+0xc>)
 800b0ca:	2258      	movs	r2, #88	@ 0x58
 800b0cc:	601a      	str	r2, [r3, #0]
 800b0ce:	2000      	movs	r0, #0
 800b0d0:	4770      	bx	lr
 800b0d2:	bf00      	nop
 800b0d4:	20003770 	.word	0x20003770

0800b0d8 <_kill>:
 800b0d8:	4b02      	ldr	r3, [pc, #8]	@ (800b0e4 <_kill+0xc>)
 800b0da:	2258      	movs	r2, #88	@ 0x58
 800b0dc:	601a      	str	r2, [r3, #0]
 800b0de:	f04f 30ff 	mov.w	r0, #4294967295
 800b0e2:	4770      	bx	lr
 800b0e4:	20003770 	.word	0x20003770

0800b0e8 <_lseek>:
 800b0e8:	4b02      	ldr	r3, [pc, #8]	@ (800b0f4 <_lseek+0xc>)
 800b0ea:	2258      	movs	r2, #88	@ 0x58
 800b0ec:	601a      	str	r2, [r3, #0]
 800b0ee:	f04f 30ff 	mov.w	r0, #4294967295
 800b0f2:	4770      	bx	lr
 800b0f4:	20003770 	.word	0x20003770

0800b0f8 <_read>:
 800b0f8:	4b02      	ldr	r3, [pc, #8]	@ (800b104 <_read+0xc>)
 800b0fa:	2258      	movs	r2, #88	@ 0x58
 800b0fc:	601a      	str	r2, [r3, #0]
 800b0fe:	f04f 30ff 	mov.w	r0, #4294967295
 800b102:	4770      	bx	lr
 800b104:	20003770 	.word	0x20003770

0800b108 <_exit>:
 800b108:	e7fe      	b.n	800b108 <_exit>
	...

0800b10c <_init>:
 800b10c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b10e:	bf00      	nop
 800b110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b112:	bc08      	pop	{r3}
 800b114:	469e      	mov	lr, r3
 800b116:	4770      	bx	lr

0800b118 <_fini>:
 800b118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b11a:	bf00      	nop
 800b11c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b11e:	bc08      	pop	{r3}
 800b120:	469e      	mov	lr, r3
 800b122:	4770      	bx	lr
